<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr. Kin&#39;s Blog</title>
  <icon>https://mister-kin.github.io/images_public/favicon/Logo.svg</icon>
  <subtitle>计算机知识分享/软件应用讲解</subtitle>
  <link href="https://mister-kin.github.io/atom.xml" rel="self"/>
  
  <link href="https://mister-kin.github.io/"/>
  <updated>2023-09-10T20:24:13.000Z</updated>
  <id>https://mister-kin.github.io/</id>
  
  <author>
    <name>Mr. Kin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PVE+iKuai+OpenWrt虚拟机折腾记录</title>
    <link href="https://mister-kin.github.io/software/pve/"/>
    <id>https://mister-kin.github.io/software/pve/</id>
    <published>2023-09-10T20:19:30.000Z</published>
    <updated>2023-09-10T20:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon"><p>推荐教程：张大妈网站的大佬-纵笔浮生的「<a href="https://search.smzdm.com/?c=home&s=%E3%80%8E%E8%BD%AF%E8%B7%AF%E7%94%B1%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97%E3%80%8F+&v=b">软路由踩坑指南</a>」系列文章。</p></div><h1 id="背景">1 &nbsp&nbsp<a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因联通赠送的光猫性能不支持双lan口长时间同时上网，故从海鲜市场（小黄鱼）上淘了一块n3530小工控机，计划用来安装pve虚拟机用以作软路由处理宽带拨号和网关ip分配，光猫仅作为一个光电信号转换器。</p><h2 id="机器配置">1.1 &nbsp&nbsp<a href="#机器配置" class="headerlink" title="机器配置"></a>机器配置</h2><ul><li>CPU：Intel(R) Pentium(R) CPU N3530</li><li>内存：海力士DDR3L-8GB单根</li><li>硬盘：海力士SH920 msata 256GB</li><li>网卡：双网卡intel I211+Realtek mini-pcie RTL8211E&#x2F;F（螃蟹卡，后期自己购买加装至mini pcie无线网卡口位置）</li></ul><h1 id="安装pve">2 &nbsp&nbsp<a href="#安装pve" class="headerlink" title="安装pve"></a>安装pve</h1><h2 id="BIOS的优化设置">2.1 &nbsp&nbsp<a href="#BIOS的优化设置" class="headerlink" title="BIOS的优化设置"></a>BIOS的优化设置</h2><ul><li>设置来电自启</li><li>开启快速启动</li></ul><h2 id="安装步骤">2.2 &nbsp&nbsp<a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>下载pve系统镜像：<a href="https://www.proxmox.com/en/downloads/proxmox-virtual-environment/iso">点击跳转</a>（我的情况就是需要下载pve 7.4的iso镜像文件）</li><li>制作U盘启动项：ventoy。拷贝镜像iso文件到U盘，启动选择pve镜像进入，选择图形安装界面。</li><li>同意协议。</li><li>点击option按钮，选择硬盘和ext4格式（我的情况只有一个硬盘，不用设置option，直接下一步）</li><li>国家选择china，时区会自动修改为上海，键盘布局不改。</li><li>设置密码，邮箱随意。</li><li>管理网口，默认第一个做管理（enp1s0，pve系统里面识别的第一个网口，靠近hdmi接口的rj45），第二个做wan口（方便后续维护）。域名hostname设置为pve.lan（这项随便填写都行，有能用的域名可填写上去，可解析到机器用域名管理pve虚拟机）；ip：192.168.1.2；掩码：255.255.255.0；网关：192.168.1.1（留给ikuai的地址），DNS：223.5.5.5。</li><li>查看确认已设置的内容（弹窗），确认安装。</li><li>访问管理地址并登录：<a href="https://192.168.1.2:8006。">https://192.168.1.2:8006。</a></li><li>设置网卡并确保pve能联网。</li></ol><h2 id="升级步骤（7-4-8-0）">2.3 &nbsp&nbsp<a href="#升级步骤（7-4-8-0）" class="headerlink" title="升级步骤（7.4-&gt;8.0）"></a>升级步骤（7.4-&gt;8.0）</h2><ol><li>替换软件源和企业软件源（国内镜像）<div class="tabs" id="74sources"><ul class="nav-tabs"><li class="tab active"><a href="#74sources-1">7.4软件源</a></li><li class="tab"><a href="#74sources-2">7.4企业软件源</a></li></ul><div class="tab-content"><div class="tab-pane active" id="74sources-1"><p>&#x2F;etc&#x2F;apt&#x2F;sources.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#deb http://ftp.debian.org/debian bullseye main contrib</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"></span><br><span class="line">#deb http://ftp.debian.org/debian bullseye-updates main contrib</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"># security updates</span><br><span class="line">#deb http://security.debian.org bullseye-security main contrib</span><br><span class="line">deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-security main contrib non-free</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="74sources-2"><p>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#deb https://enterprise.proxmox.com/debian/pve bullseye pve-enterprise</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bullseye pve-no-subscription</span><br></pre></td></tr></table></figure></div></div></div></li><li>升级到7.4最新的版本<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt dist-upgrade -y</span><br><span class="line"></span><br><span class="line">sed -i_orig &quot;s/data.status === &#x27;Active&#x27;/true/g&quot; /usr/share/pve-manager/js/pvemanagerlib.js</span><br><span class="line">sed -i_orig &quot;s/<span class="keyword">if</span> (res === null || res === undefined || \!res || res/<span class="keyword">if</span>(/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">sed -i_orig &quot;s/.data.status.toLowerCase() !== &#x27;active&#x27;/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">systemctl restart pveproxy</span><br><span class="line"></span><br><span class="line">pveversion</span><br></pre></td></tr></table></figure></li><li>检查兼容性：<code>pve7to8</code></li><li>替换8.0软件源和企业软件源（国内镜像）<div class="tabs" id="80sources"><ul class="nav-tabs"><li class="tab active"><a href="#80sources-1">8.0软件源</a></li><li class="tab"><a href="#80sources-2">8.0企业软件源</a></li></ul><div class="tab-content"><div class="tab-pane active" id="80sources-1"><p>&#x2F;etc&#x2F;apt&#x2F;sources.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># deb http://ftp.debian.org/debian bookworm main contrib</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free</span><br><span class="line"></span><br><span class="line"># deb http://ftp.debian.org/debian bookworm-updates main contrib</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free</span><br><span class="line"># security updates</span><br><span class="line"># deb http://security.debian.org bookworm-security main contrib</span><br><span class="line">deb [trusted=yes] https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-security main contrib non-free</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="80sources-2"><p>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># deb https://enterprise.proxmox.com/debian/pve bookworm pve-enterprise</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm pve-no-subscription</span><br></pre></td></tr></table></figure></div></div></div></li><li>开始正式升级<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt dist-upgrade</span><br></pre></td></tr></table></figure>升级中会出现一些交互界面，下面是官网的建议（不清楚的选项，可以选择推荐参数）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/etc/issue -&gt; Proxmox VE will auto-generate this file on boot, and it has only cosmetic effects on the login console.</span><br><span class="line">Using the default &quot;No&quot; (keep your currently-installed version) is safe here.</span><br><span class="line"></span><br><span class="line">/etc/lvm/lvm.conf -&gt; Changes relevant for Proxmox VE will be updated, and a newer config version might be useful.</span><br><span class="line">If you did not make extra changes yourself and are unsure it&#x27;s suggested to choose &quot;Yes&quot; (install the package maintainer&#x27;s version) here.</span><br><span class="line"></span><br><span class="line">/etc/ssh/sshd_config -&gt; If you have not changed this file manually, the only differences should be a replacement of ChallengeResponseAuthentication no with KbdInteractiveAuthentication no and some irrelevant changes in comments (lines starting with #).</span><br><span class="line">If this is the case, both options are safe, though we would recommend installing the package maintainer&#x27;s version in order to move away from the deprecated ChallengeResponseAuthentication option. If there are other changes, we suggest to inspect them closely and decide accordingly.</span><br><span class="line"></span><br><span class="line">/etc/default/grub -&gt; Here you may want to take special care, as this is normally only asked for if you changed it manually, e.g., for adding some kernel command line option.</span><br><span class="line">It&#x27;s recommended to check the difference for any relevant change, note that changes in comments (lines starting with #) are not relevant.</span><br><span class="line">If unsure, we suggested to selected &quot;No&quot; (keep your currently-installed version)</span><br></pre></td></tr></table></figure></li><li>去除未订阅提示<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i_orig &quot;s/data.status === &#x27;Active&#x27;/true/g&quot; /usr/share/pve-manager/js/pvemanagerlib.js</span><br><span class="line">sed -i_orig &quot;s/<span class="keyword">if</span> (res === null || res === undefined || \!res || res/<span class="keyword">if</span>(/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">sed -i_orig &quot;s/.data.status.toLowerCase() !== &#x27;active&#x27;/false/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br><span class="line">systemctl restart pveproxy</span><br></pre></td></tr></table></figure></li></ol><div class="note info no-icon"><p>升级若遇到提示<code>Upgrade wants to remove package &#39;proxmox-ve&#39;</code>的话，在升级前尝试执行<code>apt remove linux-image-amd64</code>。</p></div><h2 id="安装遇到的坑">2.4 &nbsp&nbsp<a href="#安装遇到的坑" class="headerlink" title="安装遇到的坑"></a>安装遇到的坑</h2><h3 id="安装到99-时出现unable-to-install-the-EFI-boot-loader-on-dev-sda">2.4.1 &nbsp&nbsp<a href="#安装到99-时出现unable-to-install-the-EFI-boot-loader-on-dev-sda" class="headerlink" title="安装到99%时出现unable to install the EFI boot loader on &#39;&#x2F;dev&#x2F;sda&#39;"></a>安装到99%时出现unable to install the EFI boot loader on &#39;&#x2F;dev&#x2F;sda&#39;</h3><p>报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bootloader setup errors:</span><br><span class="line">- failed to prepare EFI boot using Grub on &#x27;/dev/sda2&#x27;: unable to install the EFI boot loader on &#x27;/dev/sda&#x27;</span><br></pre></td></tr></table></figure><p>原因：pve 8.0版本镜像īso不兼容此台机器，估计是bug。参考其他帖子说的只保留usb的uefi设备，依旧也会报错。并且因为机器的bios设置也比较繁琐，我反复尝试将其设置为csm模式，机器始终无法以csm模式启动，估计该主板的bios也是魔改过有bug的。因此导致也无法以csm模式安装pve。</p><p>解决方法：安装pve 7.4版本，再升级到pve 8.x。</p><h3 id="usb键盘一直插着时会无法响应的，无法进入并操控BIOS，只有ctrl-alt-delete可以响应">2.4.2 &nbsp&nbsp<a href="#usb键盘一直插着时会无法响应的，无法进入并操控BIOS，只有ctrl-alt-delete可以响应" class="headerlink" title="usb键盘一直插着时会无法响应的，无法进入并操控BIOS，只有ctrl+alt+delete可以响应"></a>usb键盘一直插着时会无法响应的，无法进入并操控BIOS，只有ctrl+alt+delete可以响应</h3><p>原因：估计是BIOS的驱动bug。</p><p>解决方法：先不插键盘启动机器，看屏幕等待主板自检代码走到99阶段，快速插上键盘，摁DEL键。</p><h3 id="hdmi屏幕不显bios">2.4.3 &nbsp&nbsp<a href="#hdmi屏幕不显bios" class="headerlink" title="hdmi屏幕不显bios"></a>hdmi屏幕不显bios</h3><p>主板BIOS驱动不支持普通hdmi小屏幕，自检阶段和BIOS界面显示白屏或者花屏，接大屏驱动板兼容性好点。</p><h3 id="后面加装的RTL8211网卡不识别">2.4.4 &nbsp&nbsp<a href="#后面加装的RTL8211网卡不识别" class="headerlink" title="后面加装的RTL8211网卡不识别"></a>后面加装的RTL8211网卡不识别</h3><p>原因：因为安装pve系统之前未加装好螃蟹卡RTL8211，因此后续加装之后，pve系统并未识别到。</p><p>解决方法：重装pve系统。（驱动源码编译方案，也有编译报错，不好解决，推荐是重装pve，让pve自动打驱动）</p><h3 id="pve重启bug，看门狗导致重启很长时间">2.4.5 &nbsp&nbsp<a href="#pve重启bug，看门狗导致重启很长时间" class="headerlink" title="pve重启bug，看门狗导致重启很长时间"></a>pve重启bug，看门狗导致重启很长时间</h3><p>原因：未查明，只要一重启，就会长时间卡在看门狗的错误提示。</p><p>错误提示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watchgod: watchdog0: watchdog did<span class="number">&#x27;</span>t did <span class="keyword">not</span> stop!</span><br><span class="line"></span><br><span class="line">systemd-shutdown: Failed to finalzie DM services, ignorening.</span><br></pre></td></tr></table></figure><p>解决方法：无法解决，只能长时间等待完成重启或者强制关机重开。</p><h1 id="硬件直通">3 &nbsp&nbsp<a href="#硬件直通" class="headerlink" title="硬件直通"></a>硬件直通</h1><p>IOMMU允许系统设备在虚拟内存中进行寻址，也就是将虚拟内存地址映射为物理内存地址，让实体设备可以在虚拟的内存环境中工作，这样可以帮助系统扩充内存容量，提升性能。</p><p>换而言之，IOMMU可以使VM虚拟机能够接入一些物理设备，比如PCIe中的网卡、声卡、显卡，VM虚拟机可以直接或间接使用这些设备。</p><h2 id="检查硬件是否支持直通（BIOS内查看Advanced高级选项）">3.1 &nbsp&nbsp<a href="#检查硬件是否支持直通（BIOS内查看Advanced高级选项）" class="headerlink" title="检查硬件是否支持直通（BIOS内查看Advanced高级选项）"></a>检查硬件是否支持直通（BIOS内查看Advanced高级选项）</h2><ol><li>开启CPU虚拟化：Intel: VT-X(Intel Virtual Technology)。AMD: AMD-V(SVM, Secure Virtual Machine)。</li><li>为CPU开启硬件虚拟功能：Intel: Intel VT-d。AMD: IOMMU。</li><li>部分主板会有和Intel VT-d&#x2F;IOMMU相关联的<code>Memory Remap Feature</code>设置。</li></ol><div class="note danger no-icon"><p>如果没有VT-d或者IOMMU功能选项，则主板不支持虚拟机直通硬件。</p></div><h2 id="pve提示No-IOMMU-detected">3.2 &nbsp&nbsp<a href="#pve提示No-IOMMU-detected" class="headerlink" title="pve提示No IOMMU detected"></a>pve提示<code>No IOMMU detected</code></h2><p>当pve未启用IOMMU或者硬件不支持直通（已启用IOMMU）时，在ProxmoxVE(PVE)的VM&#x2F;VPS中添加PCI设备时候提示：<code>No IOMMU detected, please activate it.See Documentation for further information</code>.</p><h2 id="pve启用IOMMU">3.3 &nbsp&nbsp<a href="#pve启用IOMMU" class="headerlink" title="pve启用IOMMU"></a>pve启用IOMMU</h2><div class="note info no-icon"><p>内核版本为5.15或之前的，在ProxmoxVE(PVE)系统内核中，需要手动启用IOMMU。5.15版本以后的ProxmoxVE(PVE)系统内核自带默认开启了IOMMU支持。</p><p>但我的硬件本身不支持VT-d，因此并未自动启用IOMMU，也可能是因为从7.4升级到8.0的缘故。</p></div><div class="tabs" id="引导类型"><ul class="nav-tabs"><li class="tab active"><a href="#引导类型-1">GRUD引导类型（PVE默认引导方式）</a></li><li class="tab"><a href="#引导类型-2">systemd-boot引导类型（非PVE现行版本常见引导方式）</a></li></ul><div class="tab-content"><div class="tab-pane active" id="引导类型-1"><ol><li>编辑grub文件：<code>nano /etc/default/grub</code></li><li>找到GRUB_CMDLINE_LINUX_DEFAULT这一行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s &lt;strong&gt;2&lt;/strong&gt;&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>根据CPU类型修改<div class="tabs" id="grub-cpu类型"><ul class="nav-tabs"><li class="tab active"><a href="#grub-cpu类型-1">Intel CPU</a></li><li class="tab"><a href="#grub-cpu类型-2">AMD CPU</a></li></ul><div class="tab-content"><div class="tab-pane active" id="grub-cpu类型-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet intel_iommu=on&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="grub-cpu类型-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet amd_iommu=on&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></div></div></li><li>更新grub：<code>update-grub</code></li><li>重启PVE</li></ol></div><div class="tab-pane" id="引导类型-2"><ol><li>编辑cmdline：<code>nano /etc/kernel/cmdline</code>。（若不存在，则新建该文件）</li><li>根据CPU类型在第一行末尾添加：<div class="tabs" id="systemd-boot-cpu类型"><ul class="nav-tabs"><li class="tab active"><a href="#systemd-boot-cpu类型-1">Intel CPU</a></li><li class="tab"><a href="#systemd-boot-cpu类型-2">AMD CPU</a></li></ul><div class="tab-content"><div class="tab-pane active" id="systemd-boot-cpu类型-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quiet intel_iommu=on</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="systemd-boot-cpu类型-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quiet amd_iommu=on</span><br></pre></td></tr></table></figure></div></div></div></li></ol></div></div></div><p>验证IOMMU是否启用：<code>dmesg | grep -e DMAR -e IOMMU</code>。输出显示<code>DMAR: IOMMU enabled</code>证明已启用，虚拟机分配PCI设备时可见。若无输出，需排查故障。</p><h2 id="pve启用PT模式">3.4 &nbsp&nbsp<a href="#pve启用PT模式" class="headerlink" title="pve启用PT模式"></a>pve启用PT模式</h2><div class="note info no-icon"><p>PT模式：会在IOMMU需要使用时候才启动，适配器不需要使用 DMA 转换到内存，因此可以提高其他没有分配过设备的性能。</p></div><ol><li>编辑grub文件：<code>nano /etc/default/grub</code></li><li>找到GRUB_CMDLINE_LINUX_DEFAULT这一行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line">GRUB_TIMEOUT=5</span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s &lt;strong&gt;2&lt;/strong&gt;&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br><span class="line">GRUB_CMDLINE_LINUX=&quot;&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>附加参数iommu&#x3D;pt，Intel和AMD芯片均可使用这个参数。</li><li>添加模块设置（5.4内核需自行添加，现行版本自带有添加）：<code>nano /etc/modules</code>。没有如下内容需添加。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vfio</span><br><span class="line">vfio_iommu_type1</span><br><span class="line">vfio_pci</span><br><span class="line">vfio_virqfd</span><br></pre></td></tr></table></figure></li><li>刷新 initramfs：<code>update-initramfs -u -k all</code></li><li>更新 grub：<code>update-grub</code></li></ol><h1 id="创建虚拟机">4 &nbsp&nbsp<a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h1><h2 id="PVE基础设置">4.1 &nbsp&nbsp<a href="#PVE基础设置" class="headerlink" title="PVE基础设置"></a>PVE基础设置</h2><ol><li>访问管理地址并登录：<a href="https://192.168.1.2:8006，帐号：root。">https://192.168.1.2:8006，帐号：root。</a></li><li>根据硬件网卡情况，添加并设置好虚拟网桥Linux Bridge：创建&gt;Linux Bridge&gt;桥接接口填写物理网口地址名称。以我的机器为例，机器三个物理网口，PVE新建5个网桥，前三个网桥和物理网口绑定，第四个网桥用作iKuai和OpenWrt之间的传输，第五个网桥用作其他虚拟机系统的传输。</li></ol><h2 id="安装iKuai">4.2 &nbsp&nbsp<a href="#安装iKuai" class="headerlink" title="安装iKuai"></a>安装iKuai</h2><ol><li>下载iKuai镜像：<a href="https://www.ikuai8.com/component/download">点击跳转</a></li><li>local-内容-上传：iKuai的安装镜像。</li><li>创建虚拟机，命名虚拟机名称ikuai，VM编号100。</li><li>CD&#x2F;DVD光盘镜像文件选择刚上传的ISO镜像。</li><li>硬盘分配2G，添加EFI磁盘（不勾选添加密钥），CPU给2核（KVM64），内存分配4G（64位iKuai要求4G内存），网卡模型选择VirtIO（半虚拟化）。</li><li>完成新建后，在硬件标签页中继续完成添加所有网桥，网桥的防火墙全部关掉（使用iKuai的），模型都选择半虚拟化。</li><li>在选项标签页中把「开机自启动」开启，启动顺序设置为1，引导顺序只开disk‘xxxx’磁盘，把网络启动关掉，CD启动上移到第一位。</li><li>点击启动虚拟机，完成安装即可。</li><li>iKuai内识别的第一个网卡设置为lan1。</li><li>输入字母o回车进入其「其他选项」，开启外网访问web。</li><li>访问管理地址并登录：<a href="https://192.168.1.1:80。默认用户：admin。默认密码：admin。">https://192.168.1.1:80。默认用户：admin。默认密码：admin。</a></li></ol><h2 id="安装OpenWrt">4.3 &nbsp&nbsp<a href="#安装OpenWrt" class="headerlink" title="安装OpenWrt"></a>安装OpenWrt</h2><h3 id="OpenWrt镜像的选择">4.3.1 &nbsp&nbsp<a href="#OpenWrt镜像的选择" class="headerlink" title="OpenWrt镜像的选择"></a>OpenWrt镜像的选择</h3><ul><li><a href="https://openwrt.mpdn.fun:8443/?dir=lede/x86_64">Bleach OpenWrt</a>：推荐。内置SmartDNS，软件包空间设置为1G，剩余五百多兆。</li><li><a href="https://drive.google.com/drive/folders/1PsS3c0P7a4A4KY8plQg4Fla8ZI-PGBb1">eSir GDQ 高大全</a>：eSir的高大全固件。不推荐。没有内置SmartDNS拓展（我测试时安装SmartDNS并未出现有服务项，无效）。并且相较于Blench版本，较为繁琐。软件包空间只剩余几兆，需自己手动扩盘。</li></ul><h3 id="安装步骤-1">4.3.2 &nbsp&nbsp<a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>创建虚拟机，命名虚拟机名称openwrt，VM编号101。</li><li>CD&#x2F;DVD光盘镜像文件设置为无介质。</li><li>硬盘随便分配（后续会删除），添加EFI磁盘（不勾选添加密钥），CPU给4核（KVM64），内存分配4G，网卡模型选择VirtIO（半虚拟化）。</li><li>网桥只选择第四个网桥（用作iKuai和OpenWrt之间的传输），网卡的防火墙全部关掉（使用iKuai的），模型选择半虚拟化。</li><li>下载OpenWrt镜像：<a href="#OpenWrt%E9%95%9C%E5%83%8F%E7%9A%84%E9%80%89%E6%8B%A9">见上一小节</a></li><li>local-内容-上传：OpenWrt的镜像。</li><li>向虚拟机导入OpenWrt镜像：<code>qm importdisk 101 /var/lib/vz/template/iso/bleach-plus-20230826-openwrt-x86-64-generic-squashfs-combined-efi.img local-lvm</code>。（直接写盘即可，无需安装）。</li><li>在pve管理页面中，加载刚才导入镜像生成的磁盘。</li><li>在选项标签页中把「开机自启动」开启，启动顺序设置为2，引导顺序只开disk‘xxxx’磁盘，把网络启动关掉。</li><li>点击启动虚拟机。</li><li>pve中用shell：<code>vi /etc/config/network</code>，将lan口ip改为<code>192.168.1.3</code>，<code>reboot</code>重启。vim编辑：按i进入修改模式，按esc退出编辑模式，输入 :wq回车保存修改。</li><li>访问管理地址并登录：<a href="https://192.168.1.3。默认用户：root。默认密码：password。">https://192.168.1.3。默认用户：root。默认密码：password。</a></li></ol><h2 id="创建虚拟机遇到的坑">4.4 &nbsp&nbsp<a href="#创建虚拟机遇到的坑" class="headerlink" title="创建虚拟机遇到的坑"></a>创建虚拟机遇到的坑</h2><h3 id="添加EFI磁盘后，启动无法引导磁盘，出现shell界面。">4.4.1 &nbsp&nbsp<a href="#添加EFI磁盘后，启动无法引导磁盘，出现shell界面。" class="headerlink" title="添加EFI磁盘后，启动无法引导磁盘，出现shell界面。"></a>添加EFI磁盘后，启动无法引导磁盘，出现shell界面。</h3><p>原因：创建EFI磁盘时，勾选了添加密钥。</p><p>解决方法：创建EFI磁盘时，取消勾选添加密钥。</p><h3 id="安装windows镜像，无法识别找到磁盘">4.4.2 &nbsp&nbsp<a href="#安装windows镜像，无法识别找到磁盘" class="headerlink" title="安装windows镜像，无法识别找到磁盘"></a>安装windows镜像，无法识别找到磁盘</h3><p>原因：scsi不适合windows镜像，windows安装解决识别不到硬盘。</p><p>解决方法：创建硬盘时，总线&#x2F;设备选择：sata硬盘或者IDE。</p><h3 id="安装windows镜像，无法识别找到磁盘-1">4.4.3 &nbsp&nbsp<a href="#安装windows镜像，无法识别找到磁盘-1" class="headerlink" title="安装windows镜像，无法识别找到磁盘"></a>安装windows镜像，无法识别找到磁盘</h3><p>现象：当网卡设置为virtio模型时，安装并进入到windows系统后，网卡无驱动。</p><p>原因：windows系统自带的驱动无此虚拟硬件的驱动。</p><p>解决方式：加载virtio镜像，并运行x64程序安装驱动即可。</p><p>VirtIO镜像下载地址：<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/">点击跳转</a></p><h1 id="iKuai-OpenWRT-做旁路由网络拓扑">5 &nbsp&nbsp<a href="#iKuai-OpenWRT-做旁路由网络拓扑" class="headerlink" title="iKuai +OpenWRT 做旁路由网络拓扑"></a>iKuai +OpenWRT 做旁路由网络拓扑</h1><p>iKuai作为主路由，负责拨号及DHCP，OpenWRT做旁路由。SmartDNS+AdGuardHome设置分流与去广告。SmartDNS作为DNS管理并提供DNS缓存，实现国内国外DNS分流，彻底解决DNS污染问题、实现秒开网页。同时搭配AdGuardHome实现整个局域网去广告。</p><p>DNS转发流程：设置最核心的部分就是DNS转发端口的衔接，就是把DNSMASQ、Adguardhome、SmartDNS三个插件里的DNS服务器功能分成三个层级，实现层层转发。依次是第一级DNSMASQ，第二级Adguardhome，第三级SmartDNS。</p><h2 id="iKuai的设置">5.1 &nbsp&nbsp<a href="#iKuai的设置" class="headerlink" title="iKuai的设置"></a>iKuai的设置</h2><ul><li>系统设置&gt;重启关机&gt;添加一个重启计划：每天05:00时重启。</li><li>网络设置&gt;内外网设置<ul><li>外网接口（选择iKuai识别到的第二个网口）：填入宽带拨号信息。</li><li>内网接口（iKuai识别到的第一个网口，IP地址192.168.1.1）：链路桥接（选择剩余的其他全部接口）</li></ul></li><li>DHCP设置&gt;DHCP服务端<ul><li>单iKuai版：<ul><li>客户端地址：192.168.1.10-192.168.1.254（1-9留给专用设备的管理地址）</li><li>子网掩码：255.255.255.0</li><li>网关：192.168.1.1</li><li>首选DNS：223.5.5.5</li><li>备选DNS：114.114.114.114</li></ul></li><li>iKuai+OpenWrt版本：<ul><li>客户端地址：192.168.1.10-192.168.1.254（1-9留给专用设备的管理地址）</li><li>子网掩码：255.255.255.0</li><li>网关：192.168.1.3</li><li>首选DNS：192.168.1.3</li><li>备选DNS：192.168.1.3</li></ul></li></ul></li><li>DNS设置&gt;DNS设置<ul><li>单iKuai版：<ul><li>首选DNS：223.5.5.5</li><li>备选DNS：114.114.114.114</li></ul></li><li>iKuai+OpenWrt版本：<ul><li>首选DNS：192.168.1.3</li><li>备选DNS：192.168.1.3</li></ul></li></ul></li><li>UPnP设置&gt;UPnP设置<ul><li>UPnP即插即用服务：开启</li><li>允许内网IP映射：0.0.0.0-255.255.255.255</li><li>默认线路设置：任意</li><li>掉线检测：开启</li><li>检测周期：2</li><li>定时重启：开启</li><li>重启周期：全选</li><li>重启时间：05:00。</li></ul></li></ul><h2 id="OpenWrt设置">5.2 &nbsp&nbsp<a href="#OpenWrt设置" class="headerlink" title="OpenWrt设置"></a>OpenWrt设置</h2><h3 id="定时重启">5.2.1 &nbsp&nbsp<a href="#定时重启" class="headerlink" title="定时重启"></a>定时重启</h3><p>系统&gt;定时重启：启用，设置每天05:00。</p><h3 id="网络">5.2.2 &nbsp&nbsp<a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="接口-LAN">5.2.2.1 &nbsp&nbsp<a href="#接口-LAN" class="headerlink" title="接口&gt;LAN"></a>接口&gt;LAN</h4><ul><li>IPv4地址：192.168.1.3。管理OpenWrt的地址。</li><li>和ikuai一致保证同一个网段。</li><li>IPv4网关：指向iKuai的网关。保证OpenWrt的上网数据传输到iKuai再传输到外网。</li><li>使用自定义的DNS服务器：223.5.5.5（初始先设置阿里云DNS保证设置过程的上网）。后面等设置好SmartDNS之后改由OpenWrt代理，即输入192.168.1.3。</li><li>关闭DHCP服务，统一由iKuai分配。</li><li>禁用掉IPv6服务。</li><li>物理设置：桥接接口。（因为选用的也是）</li><li>lan高级设置：不勾选IPv6，勾选【开启开机自动运行】和【强制链路】。</li></ul><h4 id="Turbo-ACC-加速">5.2.2.2 &nbsp&nbsp<a href="#Turbo-ACC-加速" class="headerlink" title="Turbo ACC 加速"></a>Turbo ACC 加速</h4><p>只开启前三个即可，DNS缓存后面由SmartDNS来管理。</p><h4 id="防火墙设置">5.2.2.3 &nbsp&nbsp<a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><ul><li>SYN-flood 防御：关闭（此项开启关闭都行）</li><li>丢弃无效数据包：启用（此项开启关闭都行）</li><li>启用FullCone-NAT：高性能模式</li><li>入站数据、出站数据、转发都设置为接受。</li><li>lan口开启：IP 动态伪装（只保留lan口的规格，其他接口全部删除）</li><li>防火墙自定义规则（一般默认就有前四条规则，没有需加上）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p udp —dport 53 -j REDIRECT —to-ports 53</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp —dport 53 -j REDIRECT —to-ports 53</span><br><span class="line">[ -n “$(command -v ip6tables)” ] &amp;&amp; ip6tables -t nat -A PREROUTING -p udp —dport 53 -j REDIRECT —to-ports 53</span><br><span class="line">[ -n “$(command -v ip6tables)” ] &amp;&amp; ip6tables -t nat -A PREROUTING -p tcp —dport 53 -j REDIRECT —to-ports 53</span><br><span class="line">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure></li></ul><h3 id="SmartDNS">5.2.3 &nbsp&nbsp<a href="#SmartDNS" class="headerlink" title="SmartDNS"></a>SmartDNS</h3><div class="note info no-icon"><p>Bleach OpenWrt固件自带SmartDNS，eSir GDQ高大全固件需自行手动安装。</p></div><ul><li>基本设置<ul><li>启用</li><li>本地端口6053</li></ul></li><li>高级设置<ul><li>开启TCP服务器</li><li>勾选域名预加载</li><li>勾选缓存过期服务</li><li>缓存大小设为：1000000</li><li>域名TTL最大值设为：3600</li></ul></li><li>第二DNS服务器<ul><li>启用</li><li>本地端口5335</li><li>TCP服务器</li><li>服务器组：oversea</li><li>跳过测速</li><li>跳过address规则</li><li>跳过address SOA(#)规则</li><li>跳过双栈优选</li><li>跳过cache</li><li>停用IPV6地址解析</li></ul></li><li>上游服务器（添加DNS的设置里面可以设置服务器组）<ul><li>服务器组名称：china（10条左右，包含iKuai路由宽带拨号返回的两个宽带供应商提供的DNS）</li><li>服务器组名称：oversea（10条左右）</li></ul></li><li>域名规则<ul><li>服务器组：china</li><li>域名分流设置：跳过测试</li></ul></li><li>自定义设置（只设置两条，其他全部注释掉）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind:6053 -group china</span><br><span class="line">bind:5335 -group oversea</span><br></pre></td></tr></table></figure></li><li>保存&amp;应用</li></ul><h3 id="AdGuard-Home">5.2.4 &nbsp&nbsp<a href="#AdGuard-Home" class="headerlink" title="AdGuard Home"></a>AdGuard Home</h3><h4 id="手动更新内核">5.2.4.1 &nbsp&nbsp<a href="#手动更新内核" class="headerlink" title="手动更新内核"></a>手动更新内核</h4><ol><li>下载最新的AdGuardHome内核（AdGuardHome_linux_amd64.tar.gz）：<a href="https://github.com/AdguardTeam/AdGuardHome/releases">点击跳转</a></li><li>解压获取「AdGuardHome」文件。</li><li>使用WinSCP登录openwrt虚拟机，进入到路径<code>/usr/bin/AdGuardHome/</code>，上传「AdGuardHome」文件。右击属性，分配权限0755（rwxr-xr-x）。</li></ol><div class="note info no-icon"><p>能科学上网时，点击检查更新，直接更新核心即可。</p></div><h4 id="设置AdGuard-Home">5.2.4.2 &nbsp&nbsp<a href="#设置AdGuard-Home" class="headerlink" title="设置AdGuard Home"></a>设置AdGuard Home</h4><ul><li>启用</li><li>AdGuardHome重定向模式：作为dnsmasq的上游服务器</li><li>详细日志</li><li>开机后网络准备好时重启</li><li>在关机时备份工作目录文件（所有的选项）</li><li>打开192.168.1.3:3000地址并配置</li><li>网页管理界面&gt;监听接口&gt;所有接口，端口号设置为默认的3000</li><li>DNS 服务器&gt;监听接口&gt;所有接口，端口号设置为5351</li><li>网页管理界面登录密码</li><li>设置&gt;常规设置&gt;使用过滤器和Hosts文件以拦截指定域名（其他选项全部关闭）</li><li>设置&gt;DNS设置<ul><li>上游 DNS 服务器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6053</span><br><span class="line">127.0.0.1:5335</span><br></pre></td></tr></table></figure><ul><li>并行请求</li><li>Bootstrap DNS：<code>127.0.0.1:6053</code></li><li>应用</li></ul></li><li>DNS服务配置<ul><li>速度限制：0</li><li>DNS 缓存配置：都空着（采用上游DNS服务器，让SmartDNS来管理）</li></ul></li></ul></li><li>设置&gt;过滤器&gt;DNS黑名单设置（将阻止匹配 DNS 拦截清单的域名）：综合性的规则列表启用几个即可。</li></ul><h3 id="DNSMASQ设置">5.2.5 &nbsp&nbsp<a href="#DNSMASQ设置" class="headerlink" title="DNSMASQ设置"></a>DNSMASQ设置</h3><p>打开网络&gt;DHCP&#x2F;DNS。主要是解除DNSMASQ的DNS功能，只保留转发功能，让DNSMASQ作为AdGuard Home的下级服务生效。</p><ul><li>DNS转发：<code>127.0.0.1#5351</code>。如果未自动设置成这个，手动强制改成这个。</li><li>HOSTS 和解析文件：忽略掉解析文件，不用DNSMASQ的解析。</li><li>高级设置<ul><li>DNS服务器端口：53</li><li>DNS查询缓存的大小：0</li><li>最大并发查询数：1500</li></ul></li><li>保存&amp;应用</li></ul><h3 id="OpenClash">5.2.6 &nbsp&nbsp<a href="#OpenClash" class="headerlink" title="OpenClash"></a>OpenClash</h3><h4 id="更新客户端">5.2.6.1 &nbsp&nbsp<a href="#更新客户端" class="headerlink" title="更新客户端"></a>更新客户端</h4><ol><li>下载客户端安装包：<a href="https://github.com/vernesong/OpenClash/releases">点击跳转</a></li><li>使用WinSCP登录openwrt虚拟机，进入到路径家目录home，上传安装包，运行安装<code>opkg install ./luci-app-openclash_0.45.141-beta_all.ipk</code>。如果报错，尝试<code>opkg update</code>。</li></ol><h4 id="手动更新内核-1">5.2.6.2 &nbsp&nbsp<a href="#手动更新内核-1" class="headerlink" title="手动更新内核"></a>手动更新内核</h4><p>内核下载地址：</p><ul><li>老的Release页面<ul><li><a href="https://github.com/vernesong/OpenClash/releases/tag/Clash">Dev 内核</a></li><li><a href="https://github.com/vernesong/OpenClash/releases/tag/TUN-Premium">Tun 内核</a></li><li><a href="https://github.com/vernesong/OpenClash/releases/tag/TUN">Tun 游戏内核</a></li></ul></li><li>当前发布的最新内核<ul><li><a href="https://github.com/vernesong/OpenClash/tree/core/master/dev">Dev 内核</a></li><li><a href="https://github.com/vernesong/OpenClash/tree/core/master/premium">Tun 内核</a></li><li><a href="https://github.com/vernesong/OpenClash/tree/core/master/meta">Meta 内核</a></li></ul></li></ul><div class="note danger no-icon"><p>新的内核只支持fake-ip，需要上传Meta内核。</p></div><div class="note info no-icon"><p>能科学上网时，点击检查并更新，直接更新核心即可。</p></div><p>更新步骤：</p><ol><li>下载内核。</li><li>使用WinSCP登录openwrt虚拟机，进入到路径<code>/etc/openclash/core</code>，上传内核文件。右击属性，分配权限0755（rwxr-xr-x）。</li></ol><p>内核对应的名称（压缩包解压出来的名称不一定对应，需手动修改）：</p><ul><li>Dev 内核: clash</li><li>Tun 内核: clash_tun</li><li>Meta 内核: clash_meta</li></ul><h4 id="OpenClash设置">5.2.6.3 &nbsp&nbsp<a href="#OpenClash设置" class="headerlink" title="OpenClash设置"></a>OpenClash设置</h4><ul><li>运行状态：启动OPENCLASH</li><li>插件设置<ul><li>模式设置&gt;运行模式：Fake-IP（TUN-混合）模式【UDP-TUN，TCP-转发】</li><li>DNS设置&gt;本地DNS劫持：停用</li><li>GEO数据库订阅：设置自动更新</li><li>大陆白名单订阅：设置自动更新</li></ul></li><li>配置订阅：设置自动更新，更新间隔60分钟</li></ul><h3 id="扩容Overlay软件安装空间">5.2.7 &nbsp&nbsp<a href="#扩容Overlay软件安装空间" class="headerlink" title="扩容Overlay软件安装空间"></a>扩容Overlay软件安装空间</h3><ol><li>关闭openwrt虚拟机。</li><li>硬件&gt;硬盘&gt;更多，调整磁盘大小（只能增加大小，按需增加所需硬盘的空间大小）。</li><li>打开openwrt虚拟机。</li><li>系统&gt;磁盘管理L：将新增磁盘大小新建一个分区并格式化为ext4，保存并应用</li><li>挂载刚才新增的分区，举例sda3：<code>mount /dev/sda3 /mnt/sda3</code>，保存并应用。</li><li>拷贝源overlay目录的文件到新分区内：<code>cp -r /overlay/* /mnt/sda3</code>。</li><li>系统&gt;挂载点：添加sda3挂载点为「作为外部overlay使用（&#x2F;overlay）」，保存并应用。</li><li>重启openwrt虚拟机，检查扩容情况。</li><li>根据情况可能需手动移除之前挂载的<code>/mnt/sda3</code>状态。</li></ol><h1 id="后记">6 &nbsp&nbsp<a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><del>这光猫还是有断流情况，估计是过热导致掉线，后续考虑下加装小风扇。</del></p><p>断流降速故障已查明：虚拟网卡模型设置为Intel E1000导致的故障，重设为virtio半虚拟化即可解决。</p><h1 id="参考文献">7 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] Installation Failing: &quot;Failed to prepare EFI boot using Grub&quot;[EB&#x2F;OL]. <a href="https://forum.proxmox.com/threads/installation-failing-failed-to-prepare-efi-boot-using-grub.122002/">https://forum.proxmox.com/threads/installation-failing-failed-to-prepare-efi-boot-using-grub.122002/</a>.<br>[2] 软路由科普系列 篇二：PVE安装iKuai OpenWrt 旁路由 基础设置 保姆级全教程[EB&#x2F;OL]. <a href="https://post.smzdm.com/p/awrx4lxm/">https://post.smzdm.com/p/awrx4lxm/</a>.<br>[3] ProxmoxVE 7.4 升级到 8.0，详细步骤[EB&#x2F;OL]. <a href="https://blog.margrop.net/post/pve-7-upgrade-to-8/">https://blog.margrop.net/post/pve-7-upgrade-to-8/</a>.<br>[4] PVE 联网及更换国内源[EB&#x2F;OL]. <a href="https://www.cnblogs.com/pdblogs/p/16218543.html">https://www.cnblogs.com/pdblogs/p/16218543.html</a>.<br>[5] Force update from unsigned repository[EB&#x2F;OL]. <a href="https://askubuntu.com/questions/732985/force-update-from-unsigned-repository">https://askubuntu.com/questions/732985/force-update-from-unsigned-repository</a>.<br>[6] ProxmoxVE(PVE) 启用 IOMMU[EB&#x2F;OL]. <a href="https://www.insilen.com/post/501.html">https://www.insilen.com/post/501.html</a>.<br>[7] Enable IOMMU or VT-d in your motherboard BIOS[EB&#x2F;OL]. <a href="https://us.informatiweb.net/tutorials/it/bios/enable-iommu-or-vt-d-in-your-bios.html">https://us.informatiweb.net/tutorials/it/bios/enable-iommu-or-vt-d-in-your-bios.html</a>.<br>[8] ProxmoxVE(PVE) 使用 IMG 镜像文件，img 转 qcow2[EB&#x2F;OL]. <a href="https://www.lxtx.tech/index.php/archives/65/">https://www.lxtx.tech/index.php/archives/65/</a>.<br>[9]『软路由踩坑指南』篇三：ESXi 8.0 虚拟机安装 iKuai 主路由及保姆级配置[EB&#x2F;OL]. <a href="https://post.smzdm.com/p/a5op28x7/">https://post.smzdm.com/p/a5op28x7/</a>.<br>[10]『软路由踩坑指南』篇四：ESXi 8.0 虚拟机安装 openWrt 路由系统终极指南[EB&#x2F;OL]. <a href="https://post.smzdm.com/p/a7ngxeel/">https://post.smzdm.com/p/a7ngxeel/</a>.<br>[11]『软路由踩坑指南』篇五：OpenWrt 旁路由进阶篇 SmartDNS+AdGuardHome 设置 DNS 分流、秒开网页、去广告[EB&#x2F;OL]. <a href="https://post.smzdm.com/p/axz6z7w9/">https://post.smzdm.com/p/axz6z7w9/</a>.<br>[12] [openwrt(x86)] OPenWRT 旁路由 +MosDNS+OpenClash+AdGuard Home 傻瓜配置图文教程[EB&#x2F;OL]. <a href="https://www.right.com.cn/forum/thread-8284982-1-1.html">https://www.right.com.cn/forum/thread-8284982-1-1.html</a>.<br>[13] OpenWrt 扩容 Overlay 和 Docker 软件安装空间教程（内置硬盘版）附：Samba 网络共享设置[EB&#x2F;OL]. <a href="https://www.right.com.cn/forum/thread-7470757-1-1.html">https://www.right.com.cn/forum/thread-7470757-1-1.html</a>.<br>[14] [OpenWrt] 使用 OpenClash 科学上网[EB&#x2F;OL]. <a href="http://suyu0925.github.io/blog/2022/07/25/openwrt-openclash/">http://suyu0925.github.io/blog/2022/07/25/openwrt-openclash/</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;推荐教程：张大妈网站的大佬-纵笔浮生的「&lt;a</summary>
        
      
    
    
    
    <category term="software" scheme="https://mister-kin.github.io/categories/software/"/>
    
    
    <category term="系统" scheme="https://mister-kin.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="linux" scheme="https://mister-kin.github.io/tags/linux/"/>
    
    <category term="pve系统" scheme="https://mister-kin.github.io/tags/pve%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="软路由" scheme="https://mister-kin.github.io/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="科学上网" scheme="https://mister-kin.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="ikuai" scheme="https://mister-kin.github.io/tags/ikuai/"/>
    
    <category term="openwrt" scheme="https://mister-kin.github.io/tags/openwrt/"/>
    
    <category term="虚拟机" scheme="https://mister-kin.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python总结笔记</title>
    <link href="https://mister-kin.github.io/code/python/"/>
    <id>https://mister-kin.github.io/code/python/</id>
    <published>2023-09-08T20:26:25.000Z</published>
    <updated>2023-09-10T20:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装python的踩坑记录">1 &nbsp&nbsp<a href="#安装python的踩坑记录" class="headerlink" title="安装python的踩坑记录"></a>安装python的踩坑记录</h1><h2 id="vscode-无法设置python解释器">1.1 &nbsp&nbsp<a href="#vscode-无法设置python解释器" class="headerlink" title="vscode 无法设置python解释器"></a>vscode 无法设置python解释器</h2><p>原因：安装路径在<code>C:\Program Files</code>，vscode权限不够时会导致无法设置python解释器。</p><p>解决方法：安装路径直接按默认路径，不装program路径。</p><h2 id="pip安装某些包异常">1.2 &nbsp&nbsp<a href="#pip安装某些包异常" class="headerlink" title="pip安装某些包异常"></a>pip安装某些包异常</h2><p>情况：如果pip安装某些包一直有异常，反复安装卸载包都无法解决的话，并且确认不是包的问题的话。</p><p>原因：python环境异常。</p><p>解决方法：重装python。</p><ol><li>直接删除python主安装路径的文件</li><li>运行安装程序repair</li><li>点击卸载，再点击安装（必须要卸载再安装，否则site-packages路径下没有任何包，repair操作不会恢复这个路径的文件）</li></ol><h1 id="卸载python">2 &nbsp&nbsp<a href="#卸载python" class="headerlink" title="卸载python"></a>卸载python</h1><h2 id="卸载清除已安装的pip包的bat批处理脚本">2.1 &nbsp&nbsp<a href="#卸载清除已安装的pip包的bat批处理脚本" class="headerlink" title="卸载清除已安装的pip包的bat批处理脚本"></a>卸载清除已安装的pip包的bat批处理脚本</h2><div class="tabs" id="purge_pip_packages"><ul class="nav-tabs"><li class="tab active"><a href="#purge_pip_packages-1">python 3.11</a></li><li class="tab"><a href="#purge_pip_packages-2">python 3.10</a></li><li class="tab"><a href="#purge_pip_packages-3">python 3.9</a></li></ul><div class="tab-content"><div class="tab-pane active" id="purge_pip_packages-1"><p>purge_py311_packages.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">py -<span class="number">3</span>.<span class="number">11</span> -m pip freeze &gt; py311_requirements.txt</span><br><span class="line">py -<span class="number">3</span>.<span class="number">11</span> -m pip uninstall -r py311_requirements.txt -y</span><br><span class="line"><span class="built_in">del</span> py311_requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="purge_pip_packages-2"><p>purge_py310_packages.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">py -<span class="number">3</span>.<span class="number">10</span> -m pip freeze &gt; py310_requirements.txt</span><br><span class="line">py -<span class="number">3</span>.<span class="number">10</span> -m pip uninstall -r py310_requirements.txt -y</span><br><span class="line"><span class="built_in">del</span> py310_requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="purge_pip_packages-3"><p>purge_py39_packages.bat</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">py -<span class="number">3</span>.<span class="number">9</span> -m pip freeze &gt; py39_requirements.txt</span><br><span class="line">py -<span class="number">3</span>.<span class="number">9</span> -m pip uninstall -r py39_requirements.txt -y</span><br><span class="line"><span class="built_in">del</span> py39_requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure></div></div></div><h2 id="清除pip缓存">2.2 &nbsp&nbsp<a href="#清除pip缓存" class="headerlink" title="清除pip缓存"></a>清除pip缓存</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">pip cache purge</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h1 id="python的包管理">3 &nbsp&nbsp<a href="#python的包管理" class="headerlink" title="python的包管理"></a>python的包管理</h1><p>Python包管理是指创建、发布和安装Python包的过程。Python包是一种封装和分发Python代码的方式，以便于其他开发者使用和共享。Python包管理涉及的三个关键组件：PyPI、setuptools和wheel。</p><h2 id="PyPI">3.1 &nbsp&nbsp<a href="#PyPI" class="headerlink" title="PyPI"></a>PyPI</h2><p>Python软件包索引（PyPI）是一个在线存储库，用于发布和查找Python包。PyPI允许开发者上传他们的包，并提供一个中心化的搜索引擎，让其他开发者能够找到并安装这些包。PyPI通过pip（Python包安装器）来安装和管理包。</p><p>基本的使用：</p><ul><li>安装包：<code>pip install &lt;package_name&gt;</code></li><li>升级包：<code>pip install --upgrade &lt;package_name&gt;</code></li><li>卸载包：<code>pip uninstall &lt;package_name&gt;</code></li></ul><h2 id="setuptools和wheel">3.2 &nbsp&nbsp<a href="#setuptools和wheel" class="headerlink" title="setuptools和wheel"></a>setuptools和wheel</h2><p>setuptools是一个Python包管理工具，用于创建、构建和发布Python包。setuptools通过提供易于使用的命令行接口和配置文件（如setup.py）来简化包管理过程。通过使用setuptools，开发者可以方便地将他们的代码打包成可分发的格式，如源代码分发（sdist）和wheel分发（bdist_wheel）。</p><p>wheel是一种Python分发格式，用于提高安装速度和兼容性。与源代码分发（sdist）相比，wheel分发是预编译的，这意味着它们不需要在安装过程中进行编译。这使得wheel分发在安装速度和跨平台兼容性方面具有优势。</p><p>基本使用：</p><ul><li>安装setuptools和wheel：<code>pip install setuptools wheel</code></li><li>创建setup.py文件：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;my_package&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;0.1&quot;</span>,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    install_requires=[</span><br><span class="line">        <span class="string">&quot;requests&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>构建源代码分发和wheel分发：<code>python setup.py sdist bdist_wheel</code></li><li>安装twine并发布包到PyPI：<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure></li><li>安装wheel分发的包：<code>pip install dist/my_package-0.1-py3-none-any.whl</code></li></ul><h1 id="其他">4 &nbsp&nbsp<a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>官方3.9版本最后提供二进制文件下载的是3.9.13版本，之后都是补丁形式。</li></ul><h1 id="参考文献">5 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]【Python 基础】Python 包管理：PyPI、setuptools 与 wheel[EB&#x2F;OL]. <a href="https://blog.csdn.net/qq_33578950/article/details/130297451">https://blog.csdn.net/qq_33578950/article/details/130297451</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;安装python的踩坑记录&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#安装python的踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;安装python的踩坑记录&quot;&gt;&lt;/a&gt;安装python的踩坑记录&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="https://mister-kin.github.io/tags/python/"/>
    
    <category term="编程" scheme="https://mister-kin.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Blender练习总结：《CG Boost-Blender 2.8 Beginner Series》</title>
    <link href="https://mister-kin.github.io/software/blender/tranining/cg-boost-blender28-beginner-series/"/>
    <id>https://mister-kin.github.io/software/blender/tranining/cg-boost-blender28-beginner-series/</id>
    <published>2023-08-12T09:28:05.000Z</published>
    <updated>2023-08-12T09:28:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="练习成果展示">1 &nbsp&nbsp<a href="#练习成果展示" class="headerlink" title="练习成果展示"></a>练习成果展示</h1><h1 id="前期工作">2 &nbsp&nbsp<a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h1><p>设计草图，善于利用参考资料（搜索引擎&gt;图片，现实中的实物&gt;拍照等）。三维创作需要时间，很难一蹴而就，慢慢迭代制作即可。</p><h1 id="建模">3 &nbsp&nbsp<a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>开始建模之前，要注意建模物体的尺寸。注意观察物体外形，思考用哪些基础网格mesh创建模型会更容易点。</p><p>查看当前物体的尺寸：右边侧边栏（快捷键N）&gt;item条目&gt;尺寸</p><p>设置当前场景的单位：属性编辑器&gt;场景属性&gt;单位。</p><p><img data-src="/1.1.png"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;练习成果展示&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#练习成果展示&quot; class=&quot;headerlink&quot; title=&quot;练习成果展示&quot;&gt;&lt;/a&gt;练习成果展示&lt;/h1&gt;&lt;h1 id=&quot;前期工作&quot;&gt;2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#前期工作&quot;</summary>
        
      
    
    
    
    <category term="software" scheme="https://mister-kin.github.io/categories/software/"/>
    
    <category term="blender" scheme="https://mister-kin.github.io/categories/software/blender/"/>
    
    <category term="tranining" scheme="https://mister-kin.github.io/categories/software/blender/tranining/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="blender" scheme="https://mister-kin.github.io/tags/blender/"/>
    
    <category term="教程" scheme="https://mister-kin.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="练习" scheme="https://mister-kin.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="苹果" scheme="https://mister-kin.github.io/tags/%E8%8B%B9%E6%9E%9C/"/>
    
    <category term="小刀" scheme="https://mister-kin.github.io/tags/%E5%B0%8F%E5%88%80/"/>
    
    <category term="布料" scheme="https://mister-kin.github.io/tags/%E5%B8%83%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer 第五版：第五章「语句」习题答案</title>
    <link href="https://mister-kin.github.io/code-training/cpp-primer-v5/chap5/"/>
    <id>https://mister-kin.github.io/code-training/cpp-primer-v5/chap5/</id>
    <published>2023-08-07T15:24:10.000Z</published>
    <updated>2023-08-12T09:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章：语句"><a href="#第五章：语句" class="headerlink" title="第五章：语句"></a>第五章：语句</h1><h2 id="练习5-1"><a href="#练习5-1" class="headerlink" title="练习5.1"></a>练习5.1</h2><blockquote><p>什么是空语句？什么时候会用到空语句？</p></blockquote><p>只含有一个单独的分号的语句是空语句。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;</span><br></pre></td></tr></table></figure><p>如果在程序的某个地方，语法上需要一条语句但是逻辑上不需要，此时应该使用空语句。（建议做好注释说明空语句作用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重复读入数据直至到达文件末尾或某次输入的值等于sought</span></span><br><span class="line"><span class="keyword">while</span> (cin &gt;&gt; s &amp;&amp; s != sought)</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="练习5-2"><a href="#练习5-2" class="headerlink" title="练习5.2"></a>练习5.2</h2><blockquote><p>什么是块？什么时候会用到块？</p></blockquote><p>用花括号括起来的语句和声明的序列就是块。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在程序的某个地方，逻辑上需要多条语句，而语法上只能容纳一条语句，此时应该使用块。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (val &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">    ++val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习5-3"><a href="#练习5-3" class="headerlink" title="练习5.3"></a>练习5.3</h2><blockquote><p>使用逗号运算符重写（参见4.10节，第140页）1.4.1节的 while 循环，使它不再需要块，观察改写之后的代码可读性提高了还是降低了。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (val &lt;= <span class="number">10</span>)</span><br><span class="line">    sum += val, ++val;</span><br></pre></td></tr></table></figure><p>代码的可读性降低了。</p><h2 id="练习5-4"><a href="#练习5-4" class="headerlink" title="练习5.4"></a>练习5.4</h2><blockquote><p>说明下列例子的含义，如果存在问题，试着修改它。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">while</span> (string::iterator iter != s.<span class="built_in">end</span>()) &#123; <span class="comment">/* . . . */</span> &#125;</span><br><span class="line">(b) <span class="keyword">while</span> (<span class="type">bool</span> status = <span class="built_in">find</span>(word)) &#123; <span class="comment">/* . . . */</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> (!status) &#123; <span class="comment">/* . . . */</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>(a) 这个循环试图用迭代器遍历string，但是变量的定义应该放在循环的外面，目前每次循环都会重新定义一个变量，明显是错误的。</li><li>(b) 这个循环的 while 和 if 是两个独立的语句，if 语句中无法访问 status 变量，正确的做法是应该将 if 语句包含在 while 里面，</li></ul><h2 id="练习5-5"><a href="#练习5-5" class="headerlink" title="练习5.5"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_5.cpp">练习5.5</a></h2><blockquote><p>写一段自己的程序，使用if else 语句实现把数字转换为字母成绩的要求。</p></blockquote><h2 id="练习5-6"><a href="#练习5-6" class="headerlink" title="练习5.6"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_6.cpp">练习5.6</a></h2><blockquote><p>改写上一题的程序，使用条件运算符（参见4.7节，第134页）代替if else语句。</p></blockquote><span id="more"></span><h2 id="练习5-7"><a href="#练习5-7" class="headerlink" title="练习5.7"></a>练习5.7</h2><blockquote><p>改写下列代码段中的错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">if</span> (ival1 != ival2)</span><br><span class="line">        ival1 = ival2</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ival1 = ival2 = <span class="number">0</span>;</span><br><span class="line">(b) <span class="keyword">if</span> (ival &lt; minval)</span><br><span class="line">        minval = ival;</span><br><span class="line">        occurs = <span class="number">1</span>;</span><br><span class="line">(c) <span class="keyword">if</span> (<span class="type">int</span> ival = <span class="built_in">get_value</span>())</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ival = &quot;</span> &lt;&lt; ival &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (!ival)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;ival = 0\n&quot;</span>;</span><br><span class="line">(d) <span class="keyword">if</span> (ival = <span class="number">0</span>)</span><br><span class="line">        ival = <span class="built_in">get_value</span>();</span><br></pre></td></tr></table></figure><ul><li>(a) <code>ival1 = ival2</code> 后面少了分号。</li><li>(b) 应该用花括号括起来。</li><li>(c) <code>if (!ival)</code> 应该改为 <code>else</code>。</li><li>(d) <code>if (ival = 0)</code> 应该改为 <code>if (ival == 0)</code>。</li></ul><h2 id="练习5-8"><a href="#练习5-8" class="headerlink" title="练习5.8"></a>练习5.8</h2><blockquote><p>什么是“悬垂else”？C++语言是如何处理else子句的？</p></blockquote><p>C++语言规定else与它最近的尚未匹配的if匹配。</p><h2 id="练习5-9"><a href="#练习5-9" class="headerlink" title="练习5.9"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_9.cpp">练习5.9</a></h2><blockquote><p>编写一段程序，使用一系列if语句统计从cin读入的文本中有多少元音字母。</p></blockquote><h2 id="练习5-10"><a href="#练习5-10" class="headerlink" title="练习5.10"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_10.cpp">练习5.10</a></h2><blockquote><p>我们之前实现的统计元音字母的程序存在一个问题：如果元音字母以大写形式出现，不会被统计在内。编写一段程序，既统计元音字母的小写形式，也统计大写形式，也就是说，新程序遇到&#39;a&#39;和&#39;A&#39;都应该递增 aCnt 的值，以此类推。</p></blockquote><h2 id="练习5-11"><a href="#练习5-11" class="headerlink" title="练习5.11"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_11.cpp">练习5.11</a></h2><blockquote><p>修改统计元音字母的程序，使其也能统计空格、制表符、和换行符的数量。</p></blockquote><h2 id="练习5-12"><a href="#练习5-12" class="headerlink" title="练习5.12"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_12.cpp">练习5.12</a></h2><blockquote><p>修改统计元音字母的程序，使其能统计以下含有两个字符的字符序列的数量：ff、fl和fi。</p></blockquote><h2 id="练习5-13"><a href="#练习5-13" class="headerlink" title="练习5.13"></a>练习5.13</h2><blockquote><p>下面显示的每个程序都含有一个常见的编程错误，指出错误在哪里，然后修改它们。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="type">unsigned</span> aCnt = <span class="number">0</span>, eCnt = <span class="number">0</span>, iouCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">next_text</span>();</span><br><span class="line">    <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: aCnt++;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: eCnt++;</span><br><span class="line">        <span class="keyword">default</span>: iouCnt++;</span><br><span class="line">    &#125;</span><br><span class="line">(b) <span class="type">unsigned</span> index = <span class="built_in">some_value</span>();</span><br><span class="line">    <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="type">int</span> ix = <span class="built_in">get_value</span>();</span><br><span class="line">            ivec[ ix ] = index;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ix = ivec.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            ivec[ ix ] = index;</span><br><span class="line">    &#125;</span><br><span class="line">(c) <span class="type">unsigned</span> evenCnt = <span class="number">0</span>, oddCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> digit = <span class="built_in">get_num</span>() % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">switch</span> (digit) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>:</span><br><span class="line">            oddcnt++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>:</span><br><span class="line">            evencnt++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">(d) <span class="type">unsigned</span> ival=<span class="number">512</span>, jval=<span class="number">1024</span>, kval=<span class="number">4096</span>;</span><br><span class="line">    <span class="type">unsigned</span> bufsize;</span><br><span class="line">    <span class="type">unsigned</span> swt = <span class="built_in">get_bufCnt</span>();</span><br><span class="line">    <span class="keyword">switch</span>(swt) &#123;</span><br><span class="line">        <span class="keyword">case</span> ival:</span><br><span class="line">            bufsize = ival * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> jval:</span><br><span class="line">            bufsize = jval * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> kval:</span><br><span class="line">            bufsize = kval * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>(a) 少了 break语句。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> aCnt = <span class="number">0</span>, eCnt = <span class="number">0</span>, iouCnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">next_text</span>();</span><br><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: aCnt++; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: eCnt++; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: iouCnt++; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch内部的控制流：如果某个case标签匹配成功，将从该标签开始往后顺序执行所有case分支，除非程序显式地中断了这一过程，比如添加break语句，否则直到switch的结尾处才会停下来。</p></li><li><p>(b) 在 default 分支当中，ix 未定义。应该在外部定义ix。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> index = <span class="built_in">some_value</span>();</span><br><span class="line"><span class="type">int</span> ix;</span><br><span class="line"><span class="keyword">switch</span> (index) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ix = <span class="built_in">get_value</span>();</span><br><span class="line">        ivec[ ix ] = index;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ix = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(ivec.<span class="built_in">size</span>())<span class="number">-1</span>;</span><br><span class="line">        ivec[ ix ] = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(c) case 后面应该用冒号而不是逗号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> evenCnt = <span class="number">0</span>, oddCnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> digit = <span class="built_in">get_num</span>() % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (digit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">case</span> <span class="number">7</span>: <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        oddcnt++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">case</span> <span class="number">8</span>: <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        evencnt++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(d) case 标签必须是整型常量表达式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> ival=<span class="number">512</span>, jval=<span class="number">1024</span>, kval=<span class="number">4096</span>;</span><br><span class="line"><span class="type">unsigned</span> bufsize;</span><br><span class="line"><span class="type">unsigned</span> swt = <span class="built_in">get_bufCnt</span>();</span><br><span class="line"><span class="keyword">switch</span>(swt) &#123;</span><br><span class="line">    <span class="keyword">case</span> ival:</span><br><span class="line">        bufsize = ival * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> jval:</span><br><span class="line">        bufsize = jval * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kval:</span><br><span class="line">        bufsize = kval * <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="练习5-14"><a href="#练习5-14" class="headerlink" title="练习5.14"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_14.cpp">练习5.14</a></h2><blockquote><p>编写一段程序，从标准输入中读取若干string对象并查找连续重复出现的单词，所谓连续重复出现的意思是：一个单词后面紧跟着这个单词本身。要求记录连续重复出现的最大次数以及对应的单词。如果这样的单词存在，输出重复出现的最大次数；如果不存在，输出一条信息说明任何单词都没有连续出现过。例如：如果输入是：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">how now now now brown cow cow</span><br></pre></td></tr></table></figure><blockquote><p>那么输出应该表明单词now连续出现了3次。</p></blockquote><p>本题编程中使用了<code>std::pair</code>，<code>std::pair</code>是类模板，提供在一个单元存储两个相异类型对象的途径。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">T1</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">T2</span></span><br><span class="line">&gt; <span class="keyword">struct</span> <span class="title class_">pair</span>;</span><br></pre></td></tr></table></figure><p>总共有两个成员对象：first和second。</p><p>示例：<code>std::pair&lt;std::string, float&gt;(&quot;aa&quot;, 1.1);</code></p><h2 id="练习5-15"><a href="#练习5-15" class="headerlink" title="练习5.15"></a>练习5.15</h2><blockquote><p>说明下列循环的含义并改正其中的错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">for</span> (<span class="type">int</span> ix = <span class="number">0</span>; ix != sz; ++ix) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (ix != sz)</span><br><span class="line">        <span class="comment">// . . .</span></span><br><span class="line">(b) <span class="type">int</span> ix;</span><br><span class="line">    <span class="keyword">for</span> (ix != sz; ++ix) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">(c) <span class="keyword">for</span> (<span class="type">int</span> ix = <span class="number">0</span>; ix != sz; ++ix, ++sz) &#123; <span class="comment">/*...*/</span> &#125;</span><br></pre></td></tr></table></figure><p>修正如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="type">int</span> ix;</span><br><span class="line">    <span class="keyword">for</span> (ix = <span class="number">0</span>; ix != sz; ++ix)  &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (ix != sz)</span><br><span class="line">    <span class="comment">// . . .</span></span><br><span class="line">(b) <span class="type">int</span> ix;</span><br><span class="line">    <span class="keyword">for</span> (; ix != sz; ++ix) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">(c) <span class="keyword">for</span> (<span class="type">int</span> ix = <span class="number">0</span>; ix != sz; ++ix) &#123; <span class="comment">/*...*/</span> &#125; <span class="comment">//如果首次判断ix不等于sz，执行++sz将导致死循环。</span></span><br></pre></td></tr></table></figure><h2 id="练习5-16"><a href="#练习5-16" class="headerlink" title="练习5.16"></a>练习5.16</h2><blockquote><p>while 循环特别适用于那种条件不变、反复执行操作的情况，例如，当未达到文件末尾时不断读取下一个值。for 循环则更像是在按步骤迭代，它的索引值在某个范围内依次变化。根据每种循环的习惯各自编写一段程序，然后分别用另一种循环改写。如果只能使用一种循环，你倾向于使用哪种呢？为什么？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while循环读取输入</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span> ( cin &gt;&gt; i )</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环读取输入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; cin &gt;&gt; i;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != size; ++i)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环遍历</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只能用一种循环，我会更倾向使用while循环，因为while的代码可读性更强。</p><h2 id="练习5-17"><a href="#练习5-17" class="headerlink" title="练习5.17"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_17.cpp">练习5.17</a></h2><blockquote><p>假设有两个包含整数的vector对象，编写一段程序，检验其中一个vector对象是否是另一个的前缀。为了实现这一目标，对于两个不等长的vector对象，只需挑出长度较短的那个，把它的所有元素和另一个vector对象比较即可。例如，如果两个vector对象的元素分别是0、1、1、2 和 0、1、1、2、3、5、8，则程序的返回结果为真。</p></blockquote><h2 id="练习5-18"><a href="#练习5-18" class="headerlink" title="练习5.18"></a>练习5.18</h2><blockquote><p>说明下列循环的含义并改正其中的错误。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">do</span></span><br><span class="line">        <span class="type">int</span> v1, v2;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter two numbers to sum:&quot;</span> ;</span><br><span class="line">        <span class="keyword">if</span> (cin &gt;&gt; v1 &gt;&gt; v2)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Sum is: &quot;</span> &lt;&lt; v1 + v2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (cin);</span><br><span class="line">(b) <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// . . .</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (ival = <span class="built_in">get_response</span>()); <span class="comment">// 应该将ival 定义在循环外</span></span><br><span class="line">(c) <span class="keyword">do</span> &#123;</span><br><span class="line">        ival = <span class="built_in">get_response</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (ival); <span class="comment">// 应该将ival 定义在循环外</span></span><br></pre></td></tr></table></figure><p>修正如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">do</span> &#123; <span class="comment">// 应该添加花括号</span></span><br><span class="line">        <span class="type">int</span> v1, v2;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Please enter two numbers to sum:&quot;</span> ;</span><br><span class="line">        <span class="keyword">if</span> (cin &gt;&gt; v1 &gt;&gt; v2)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Sum is: &quot;</span> &lt;&lt; v1 + v2 &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">while</span> (cin);</span><br><span class="line">(b) <span class="type">int</span> ival;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// . . .</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (ival = <span class="built_in">get_response</span>()); <span class="comment">// 应该将ival 定义在循环外</span></span><br><span class="line">(c) <span class="type">int</span> ival;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ival = <span class="built_in">get_response</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (ival); <span class="comment">// 应该将ival 定义在循环外</span></span><br></pre></td></tr></table></figure><h2 id="练习5-19"><a href="#练习5-19" class="headerlink" title="练习5.19"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_19.cpp">练习5.19</a></h2><blockquote><p>编写一段程序，使用do while 循环重复地执行下述任务：首先提示用户输入两个string对象，然后挑出较短的那个并输出它。</p></blockquote><h2 id="练习5-20"><a href="#练习5-20" class="headerlink" title="练习5.20"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_20.cpp">练习5.20</a></h2><blockquote><p>编写一段程序，从标准输入中读取string对象的序列直到连续出现两个相同的单词或者所有的单词都读完为止。使用while循环一次读取一个单词，当一个单词连续出现两次时使用break语句终止循环。输出连续重复出现的单词，或者输出一个消息说明没有任何单词是连续重复出现的。</p></blockquote><h2 id="练习5-21"><a href="#练习5-21" class="headerlink" title="练习5.21"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_21.cpp">练习5.21</a></h2><blockquote><p>修改5.5.1节（第171页）练习题的程序，使其找到的重复单词必须以大写字母开头。</p></blockquote><h2 id="练习5-22"><a href="#练习5-22" class="headerlink" title="练习5.22"></a>练习5.22</h2><blockquote><p>本节的最后一个例子跳回到 begin，其实使用循环能更好的完成该任务，重写这段代码，注意不再使用goto语句。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向后跳过一个带初始化的变量定义是合法的</span></span><br><span class="line">begin:</span><br><span class="line">    <span class="type">int</span> sz = <span class="built_in">get_size</span>();</span><br><span class="line">    <span class="keyword">if</span> (sz &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> begin;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用 <code>for</code> 循环修改效果如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> sz = <span class="built_in">get_size</span>(); sz &lt;=<span class="number">0</span>; sz = <span class="built_in">get_size</span>())</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h2 id="练习5-23"><a href="#练习5-23" class="headerlink" title="练习5.23"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_23.cpp">练习5.23</a></h2><blockquote><p>编写一段程序，从标准输入读取两个整数，输出第一个数除以第二个数的结果。</p></blockquote><h2 id="练习5-24"><a href="#练习5-24" class="headerlink" title="练习5.24"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_24.cpp">练习5.24</a></h2><blockquote><p>修改你的程序，使得当第二个数是0时抛出异常。先不要设定catch子句，运行程序并真的为除数输入0，看看会发生什么？</p></blockquote><h2 id="练习5-25"><a href="#练习5-25" class="headerlink" title="练习5.25"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_25.cpp">练习5.25</a></h2><blockquote><p>修改上一题的程序，使用try语句块去捕获异常。catch子句应该为用户输出一条提示信息，询问其是否输入新数并重新执行try语句块的内容。</p></blockquote><p>异常处理（try-throw-catch）：</p><ul><li>将错误处理代码和正常代码分离开：传统的错误处理代码中都会使用一系列的 if-else 条件判断来处理错误。这些条件判断代码和错误处理代码会混在正常的程序流中，降低代码的可读性和可维护性。使用 try&#x2F;catch 块则能够将错误处理与正常流程分开。</li><li>个人理解：更像是一个高级goto语法。</li></ul><p>大致的使用形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 被保护的代码</span></span><br><span class="line">    <span class="keyword">throw</span>  <span class="comment">// 抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第五章：语句&quot;&gt;&lt;a href=&quot;#第五章：语句&quot; class=&quot;headerlink&quot; title=&quot;第五章：语句&quot;&gt;&lt;/a&gt;第五章：语句&lt;/h1&gt;&lt;h2 id=&quot;练习5-1&quot;&gt;&lt;a href=&quot;#练习5-1&quot; class=&quot;headerlink&quot; title=&quot;练习5.1&quot;&gt;&lt;/a&gt;练习5.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是空语句？什么时候会用到空语句？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只含有一个单独的分号的语句是空语句。如：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在程序的某个地方，语法上需要一条语句但是逻辑上不需要，此时应该使用空语句。（建议做好注释说明空语句作用）&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//重复读入数据直至到达文件末尾或某次输入的值等于sought&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (cin &amp;gt;&amp;gt; s &amp;amp;&amp;amp; s != sought)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习5-2&quot;&gt;&lt;a href=&quot;#练习5-2&quot; class=&quot;headerlink&quot; title=&quot;练习5.2&quot;&gt;&lt;/a&gt;练习5.2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;什么是块？什么时候会用到块？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用花括号括起来的语句和声明的序列就是块。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果在程序的某个地方，逻辑上需要多条语句，而语法上只能容纳一条语句，此时应该使用块。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (val &amp;lt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum += val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ++val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习5-3&quot;&gt;&lt;a href=&quot;#练习5-3&quot; class=&quot;headerlink&quot; title=&quot;练习5.3&quot;&gt;&lt;/a&gt;练习5.3&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用逗号运算符重写（参见4.10节，第140页）1.4.1节的 while 循环，使它不再需要块，观察改写之后的代码可读性提高了还是降低了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (val &amp;lt;= &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sum += val, ++val;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码的可读性降低了。&lt;/p&gt;
&lt;h2 id=&quot;练习5-4&quot;&gt;&lt;a href=&quot;#练习5-4&quot; class=&quot;headerlink&quot; title=&quot;练习5.4&quot;&gt;&lt;/a&gt;练习5.4&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;说明下列例子的含义，如果存在问题，试着修改它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(a) &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (string::iterator iter != s.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;()) &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* . . . */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(b) &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; status = &lt;span class=&quot;built_in&quot;&gt;find&lt;/span&gt;(word)) &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* . . . */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!status) &amp;#123; &lt;span class=&quot;comment&quot;&gt;/* . . . */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;(a) 这个循环试图用迭代器遍历string，但是变量的定义应该放在循环的外面，目前每次循环都会重新定义一个变量，明显是错误的。&lt;/li&gt;
&lt;li&gt;(b) 这个循环的 while 和 if 是两个独立的语句，if 语句中无法访问 status 变量，正确的做法是应该将 if 语句包含在 while 里面，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;练习5-5&quot;&gt;&lt;a href=&quot;#练习5-5&quot; class=&quot;headerlink&quot; title=&quot;练习5.5&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_5.cpp&quot;&gt;练习5.5&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写一段自己的程序，使用if else 语句实现把数字转换为字母成绩的要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;练习5-6&quot;&gt;&lt;a href=&quot;#练习5-6&quot; class=&quot;headerlink&quot; title=&quot;练习5.6&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap5/5_6.cpp&quot;&gt;练习5.6&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;改写上一题的程序，使用条件运算符（参见4.7节，第134页）代替if else语句。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="code-training" scheme="https://mister-kin.github.io/categories/code-training/"/>
    
    <category term="cpp-primer-v5" scheme="https://mister-kin.github.io/categories/code-training/cpp-primer-v5/"/>
    
    
    <category term="C++" scheme="https://mister-kin.github.io/tags/C/"/>
    
    <category term="C++ Primer" scheme="https://mister-kin.github.io/tags/C-Primer/"/>
    
    <category term="习题答案" scheme="https://mister-kin.github.io/tags/%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/"/>
    
    <category term="练习总结" scheme="https://mister-kin.github.io/tags/%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="第五章" scheme="https://mister-kin.github.io/tags/%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    
    <category term="语句" scheme="https://mister-kin.github.io/tags/%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>C++ Primer 第五版：第四章「表达式」习题答案</title>
    <link href="https://mister-kin.github.io/code-training/cpp-primer-v5/chap4/"/>
    <id>https://mister-kin.github.io/code-training/cpp-primer-v5/chap4/</id>
    <published>2023-08-04T17:23:08.000Z</published>
    <updated>2023-08-12T09:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章：表达式"><a href="#第四章：表达式" class="headerlink" title="第四章：表达式"></a>第四章：表达式</h1><h2 id="练习4-1"><a href="#练习4-1" class="headerlink" title="练习4.1"></a>练习4.1</h2><blockquote><p>表达式 5 + 10 * 20 &#x2F; 2 的求值结果是多少？</p></blockquote><p>105</p><h2 id="练习4-2"><a href="#练习4-2" class="headerlink" title="练习4.2"></a>练习4.2</h2><blockquote><p>根据4.12节中的表，在下述表达式的合理位置添加括号，使得添加括号后运算对象的组合顺序与添加括号前一致。</p></blockquote><ul><li>(a) *vec.begin()</li><li>(b) *vec.begin() + 1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*(vec.begin())</span><br><span class="line">(*(vec.begin())) + 1</span><br></pre></td></tr></table></figure><h2 id="练习4-3"><a href="#练习4-3" class="headerlink" title="练习4.3"></a>练习4.3</h2><blockquote><p>C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗？请说出你的理由。</p></blockquote><p>可以接受。C++的设计思想是尽可能地“相信”程序员，将效率最大化。然而这种思想却有着潜在的危害，就是无法控制程序员自身引发的错误。因此 Java 的诞生也是必然，Java的思想就是尽可能地“不相信”程序员。</p><h2 id="练习4-4"><a href="#练习4-4" class="headerlink" title="练习4.4"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap4/4_4.cpp">练习4.4</a></h2><blockquote><p>在下面的表达式中添加括号，说明其求值过程及最终结果。编写程序编译该（不加括号的）表达式并输出结果验证之前的推断。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> / <span class="number">3</span> * <span class="number">4</span> + <span class="number">5</span> * <span class="number">15</span> + <span class="number">24</span> % <span class="number">4</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure><p>((12&#x2F;3)*4) + (5*15) + ((24%4)&#x2F;2)</p><p>实际输出结果：91。</p><h2 id="练习4-5"><a href="#练习4-5" class="headerlink" title="练习4.5"></a>练习4.5</h2><blockquote><p>写出下列表达式的求值结果。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-30</span> * <span class="number">3</span> + <span class="number">21</span> / <span class="number">5</span>  <span class="comment">// -90+4 = -86</span></span><br><span class="line"><span class="number">-30</span> + <span class="number">3</span> * <span class="number">21</span> / <span class="number">5</span>  <span class="comment">// -30+63/5 = -30+12 = -18</span></span><br><span class="line"><span class="number">30</span> / <span class="number">3</span> * <span class="number">21</span> % <span class="number">5</span>   <span class="comment">// 10*21%5 = 210%5 = 0</span></span><br><span class="line"><span class="number">-30</span> / <span class="number">3</span> * <span class="number">21</span> % <span class="number">4</span>  <span class="comment">// -10*21%4 = -210%4 = -2</span></span><br></pre></td></tr></table></figure><h2 id="练习4-6"><a href="#练习4-6" class="headerlink" title="练习4.6"></a>练习4.6</h2><blockquote><p>写出一条表达式用于确定一个整数是奇数还是偶数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><h2 id="练习4-7"><a href="#练习4-7" class="headerlink" title="练习4.7"></a>练习4.7</h2><blockquote><p>溢出是何含义？写出三条将导致溢出的表达式。</p></blockquote><p>溢出含义：当计算的结果超出该类型所能表示的范围时就会产生溢出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> svalue = <span class="number">32767</span>; ++svalue; <span class="comment">// -32768</span></span><br><span class="line"><span class="type">unsigned</span> uivalue = <span class="number">0</span>; --uivalue;  <span class="comment">// 4294967295</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> usvalue = <span class="number">65535</span>; ++usvalue;  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="练习4-8"><a href="#练习4-8" class="headerlink" title="练习4.8"></a>练习4.8</h2><blockquote><p>说明在逻辑与、逻辑或及相等性运算符中运算对象的求值顺序。</p></blockquote><ul><li>逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为<strong>短路求值</strong>。</li><li>相等性运算符未定义求值顺序。</li></ul><span id="more"></span><h2 id="练习4-9"><a href="#练习4-9" class="headerlink" title="练习4.9"></a>练习4.9</h2><blockquote><p>解释在下面的if语句中条件部分的判断过程。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *cp = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (cp &amp;&amp; *cp)</span><br></pre></td></tr></table></figure><p>首先判断 <code>cp</code> ，<code>cp</code> 不是一个空指针，因此 <code>cp</code> 为真。然后判断 <code>*cp</code>，<code>*cp</code> 的值是字符 &#39;H&#39;，非0。因此最后的结果为真。</p><h2 id="练习4-10"><a href="#练习4-10" class="headerlink" title="练习4.10"></a>练习4.10</h2><blockquote><p>为while 循环写一个条件，使其从标准输入中读取整数，遇到 42 时停止。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; i &amp;&amp; i != <span class="number">42</span>)</span><br></pre></td></tr></table></figure><h2 id="练习4-11"><a href="#练习4-11" class="headerlink" title="练习4.11"></a>练习4.11</h2><blockquote><p>书写一条表达式用于测试4个值a、b、c、d的关系，确保a大于b、b大于c、c大于d。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&gt;b &amp;&amp; b&gt;c &amp;&amp; c&gt;d</span><br></pre></td></tr></table></figure><h2 id="练习4-12"><a href="#练习4-12" class="headerlink" title="练习4.12"></a>练习4.12</h2><blockquote><p>假设i、j 和k 是三个整数，说明表达式 i !&#x3D; j &lt; k 的含义。</p></blockquote><p>这个表达式等于 <code>i != (j &lt; k)</code>。首先得到 j &lt; k 的结果为 true 或 false，转换为整数值是 1 和 0，然后判断 i 不等于 1 和 0 ，最终的结果为 bool 值。</p><h2 id="练习4-13"><a href="#练习4-13" class="headerlink" title="练习4.13"></a>练习4.13</h2><blockquote><p>在下述语句中，当赋值完成后 i 和 d 的值分别是多少？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;   <span class="type">double</span> d;</span><br><span class="line">d = i = <span class="number">3.5</span>; <span class="comment">// i = 3, d = 3.0</span></span><br><span class="line">i = d = <span class="number">3.5</span>; <span class="comment">// d = 3.5, i = 3</span></span><br></pre></td></tr></table></figure><ul><li>赋值运算符的左侧运算对象必须是一个可修改的左值，赋值运算的结果是左侧运算对象。</li><li>若左右两个运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。</li><li>赋值运算符满足右结合律，因此可多重赋值，例如<code>s1=s2=&quot;Hello&quot;</code>。</li><li>赋值运算符优先级一般较低。</li><li>复合赋值运算符等价于：<code>a=a op b</code>，例如<code>a+=1等价于a=a+1</code>。</li></ul><h3 id="左值和右值"><a href="#左值和右值" class="headerlink" title="左值和右值"></a>左值和右值</h3><p>左值和右值的概念是从C语言继承过来的。</p><p>在C语言中，左值可以位于赋值语句的左侧，右值则不能。</p><p>在C++语言中，区别则复杂一些。当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。</p><h2 id="练习4-14"><a href="#练习4-14" class="headerlink" title="练习4.14"></a>练习4.14</h2><blockquote><p>执行下述 if 语句后将发生什么情况？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">42</span> = i)   <span class="comment">// 编译错误。赋值运算符左侧必须是一个可修改的左值。而字面值是右值。</span></span><br><span class="line"><span class="keyword">if</span> (i = <span class="number">42</span>)   <span class="comment">// true.</span></span><br></pre></td></tr></table></figure><h2 id="练习4-15"><a href="#练习4-15" class="headerlink" title="练习4.15"></a>练习4.15</h2><blockquote><p>下面的赋值是非法的，为什么？应该如何修改？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> dval; <span class="type">int</span> ival; <span class="type">int</span> *pi;</span><br><span class="line">dval = ival = pi = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>pi 是指针，不能赋值给 int 类型，应该改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dval = ival = <span class="number">0</span>;</span><br><span class="line">pi = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="练习4-16"><a href="#练习4-16" class="headerlink" title="练习4.16"></a>练习4.16</h2><blockquote><p>尽管下面的语句合法，但它们实际执行的行为可能和预期并不一样，为什么？应该如何修改？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p = <span class="built_in">getPtr</span>() != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (i = <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><ul><li><code>p=getPtr() != 0</code>中赋值运算符优先级低于不相等运算符，因此这个条件判断首先执行<code>getPtr() != 0</code>，返回一个bool值，之后将bool值赋值给变量p，因此条件判断可能为true或者false。</li><li><code>i = 1024</code>条件判断总是为 true</li></ul><p>代码修改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p=<span class="built_in">getPtr</span>()) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><h2 id="练习4-17"><a href="#练习4-17" class="headerlink" title="练习4.17"></a>练习4.17</h2><blockquote><p>说明前置递增运算符和后置递增运算符的区别。</p></blockquote><p>这两种运算符必须作用于左值运算对象。前置递增运算符将对象本身作为左值返回，而后置递增运算符将对象原始值的副本作为右值返回。</p><p>P.S.如无必要，例如不需要修改前的值，那么不要使用递增递减运算符的后置版本。</p><h2 id="练习4-18"><a href="#练习4-18" class="headerlink" title="练习4.18"></a>练习4.18</h2><blockquote><p>如果132页那个输出vector对象元素的while循环使用前置递增运算符，将得到什么结果？</p></blockquote><p>将会从第二个元素开始取值，并且如果序列中没有负值时，最后对 v.end() 进行取值，结果是未定义的，因为end成员返回的迭代器是尾后迭代器，指向一个本不存在的尾后元素（尾后迭代器是标记作用，无实际含义）。</p><h2 id="练习4-19"><a href="#练习4-19" class="headerlink" title="练习4.19"></a>练习4.19</h2><blockquote><p>假设 ptr 的类型是指向 int 的指针、vec 的类型是vector<int>、ival 的类型是int，说明下面的表达式是何含义？如果有表达式不正确，为什么？应该如何修改？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a) ptr != <span class="number">0</span> &amp;&amp; *ptr++</span><br><span class="line">(b) ival++ &amp;&amp; <span class="built_in">ival</span></span><br><span class="line">(c) vec[ival++] &lt;= vec[ival]</span><br></pre></td></tr></table></figure><ul><li>(a) 判断ptr不是一个空指针，并且ptr当前指向的元素的值也为真，然后将ptr指向下一个元素</li><li>(b) 判断(ival + 1)的值为真，并且ival的值也为真</li><li>(c) 表达式有误。C++标准中并没有规定 <code>&lt;=</code> 运算符两边的求值顺序，因此编译器既有可能先求左侧的值，也有可能先求右侧的值，而这两种方式导致的结果也不同，这种是未定义行为undefined behavior（详见P133）。应该改为 <code>vec[ival] &lt;= vec[ival+1]</code>。</li></ul><h2 id="练习4-20"><a href="#练习4-20" class="headerlink" title="练习4.20"></a>练习4.20</h2><blockquote><p>假设 iter 的类型是 vector&lt;string&gt;::iterator, 说明下面的表达式是否合法。如果合法，表达式的含义是什么？如果不合法，错在何处？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a) *iter++;</span><br><span class="line">(b) (*iter)++;</span><br><span class="line">(c) *iter.<span class="built_in">empty</span>();</span><br><span class="line">(d) iter-&gt;<span class="built_in">empty</span>();</span><br><span class="line">(e) ++*iter;</span><br><span class="line">(f) iter++-&gt;<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure><ul><li>(a)合法。返回迭代器所指向的元素，然后迭代器递增。</li><li>(b)不合法。因为vector元素类型是 string，没有 ++ 操作。</li><li>(c)不合法。解引用运算符的优先级低于点运算，iter是一个迭代器，没有名为empty的成员，这里应该加括号。</li><li>(d)合法。判断迭代器当前的元素是否为空。</li><li>(e)不合法。string 类型没有 ++ 操作。</li><li>(f)合法。判断迭代器当前元素是否为空，然后迭代器递增。</li></ul><h3 id="成员访问运算符"><a href="#成员访问运算符" class="headerlink" title="成员访问运算符"></a>成员访问运算符</h3><p>点运算符和箭头运算符都可用于访问成员，获取类对象的一个成员的的运算符形式如下（设定cls是一个类对象，ptr是指向cls的指针或者迭代器，访问其中men成员）：</p><ul><li>点运算符：<code>cls.men</code>或者<code>(*ptr).men</code>，点运算符作用于对象类型</li><li>箭头运算符：<code>ptr-&gt;men</code>，箭头运算符作用于指针类型</li></ul><h2 id="练习4-21"><a href="#练习4-21" class="headerlink" title="练习4.21"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap4/4_21.cpp">练习4.21</a></h2><blockquote><p>编写一段程序，使用条件运算符从 vector<int> 中找到哪些元素的值是奇数，然后将这些奇数值翻倍。</p></blockquote><p>条件运算符（?:）允许我们把简单的 if-else 逻辑嵌入到单个表达式当中，条件运算符按照如下形式使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cond ? exprl : expr2</span><br></pre></td></tr></table></figure><p>其中 cond 是判断条件的表达式，而 expr1 和 expr2 是两个类型相同或可能转换为某个公共类型的表达式。条件运算符的执行过程是：首先求 cond 的值，如果条件为真对expr1求值并返回该值，否则对expr2求值并返回该值。</p><ul><li>当条件运算符的两个表达式都是左值或者能转换成同一种左值类型时，运算的结果是左值：否则运算的结果是右值。</li><li>条件运算符允许嵌套，为了保证代码的可读性，嵌套不要超过两三层。</li><li>条件运算符满足右结合律，即运算对象一般按照从右向左的顺序组合。</li></ul><h2 id="练习4-22"><a href="#练习4-22" class="headerlink" title="练习4.22"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap4/4_22.cpp">练习4.22</a></h2><blockquote><p>本节的示例程序将成绩划分为high pass、pass 和 fial 三种，扩展该程序使其进一步将 60 分到 75 分之间的成绩设定为 low pass。要求程序包含两个版本：一个版本只使用条件运算符；另一个版本使用1个或多个if语句。哪个版本的程序更容易理解呢？为什么？</p></blockquote><p>if-else版本更容易理解。当条件运算符嵌套层数变多之后，代码的可读性急剧下降。而if-else的逻辑很清晰。</p><h2 id="练习4-23"><a href="#练习4-23" class="headerlink" title="练习4.23"></a>练习4.23</h2><blockquote><p>因为运算符的优先级问题，下面这条表达式无法通过编译。根据4.12节中的表（第147页）指出它的问题在哪里？应该如何修改？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;word&quot;</span>;</span><br><span class="line">string pl = s + s[s.<span class="built_in">size</span>() - <span class="number">1</span>] == <span class="string">&#x27;s&#x27;</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;s&quot;</span> ;</span><br></pre></td></tr></table></figure><p>加法运算符的优先级高于条件运算符。因此要改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string pl = s + (s[s.<span class="built_in">size</span>() - <span class="number">1</span>] == <span class="string">&#x27;s&#x27;</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;s&quot;</span>) ;</span><br></pre></td></tr></table></figure><h2 id="练习4-24"><a href="#练习4-24" class="headerlink" title="练习4.24"></a>练习4.24</h2><blockquote><p>本节的示例程序将成绩划分为 high pass、pass、和fail三种，它的依据是条件运算符满足右结合律。假如条件运算符满足的是左结合律，求值的过程将是怎样的？</p></blockquote><p>如果条件运算符满足的是左结合律。那么</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finalgrade = (grade &gt; <span class="number">90</span>) ? <span class="string">&quot;high pass&quot;</span> : (grade &lt; <span class="number">60</span>) ? <span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span>;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finalgrade = ((grade &gt; <span class="number">90</span>) ? <span class="string">&quot;high pass&quot;</span> : (grade &lt; <span class="number">60</span>)) ? <span class="string">&quot;fail&quot;</span> : <span class="string">&quot;pass&quot;</span>;</span><br></pre></td></tr></table></figure><p>假如此时 grade &gt; 90 ，第一个条件表达式的结果是 &quot;high pass&quot; ，而字符串字面值的类型是 const char *，非空所以为真。因此第二个条件表达式的结果是 &quot;fail&quot;。这样就出现了自相矛盾的逻辑。</p><h2 id="练习4-25"><a href="#练习4-25" class="headerlink" title="练习4.25"></a>练习4.25</h2><blockquote><p>如果一台机器上 int 占 32 位、char 占8位，用的是 Latin-1 字符集，其中字符&#39;q&#39; 的二进制形式是 01110001，那么表达式&#39;q&#39; &lt;&lt; 6的值是什么？</p></blockquote><p>首先将char类型提升为int 类型，等同于 00000000 00000000 00000000 01110001 &lt;&lt; 6，结果是 00000000 00000000 00011100 01000000，转换十进制为7232。</p><h3 id="位运算符的总结"><a href="#位运算符的总结" class="headerlink" title="位运算符的总结"></a>位运算符的总结</h3><ul><li>位运算符操作可能会改变符号为的值，关于符号位如何处理没有明确的规定，具体依赖于机器，因此强烈建议仅将位运算符用于处理无符号类型。</li><li>移位运算符满足左结合律，移位运算符又名IO运算符（重载版本，用以IO操作）</li></ul><h2 id="练习4-26"><a href="#练习4-26" class="headerlink" title="练习4.26"></a>练习4.26</h2><blockquote><p>在本节关于测验成绩的例子中，如果使用unsigned int 作为quiz1 的类型会发生什么情况？</p></blockquote><p>C++标准中并未以字节的单位指定int的大小，但指定了它们必须能够容纳的最小范围。<code>unsigned int</code>的最小取值范围是0到65535。但在有的机器上，unsigned int类型可能只有16位，而这结果是未定义行为。</p><h2 id="练习4-27"><a href="#练习4-27" class="headerlink" title="练习4.27"></a>练习4.27</h2><blockquote><p>下列表达式的结果是什么？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> ul1 = <span class="number">3</span>, ul2 = <span class="number">7</span>;</span><br><span class="line">(a) <span class="function">ul1 &amp; <span class="title">ul2</span></span></span><br><span class="line"><span class="function"><span class="params">(b)</span> ul1 | <span class="title">ul2</span></span></span><br><span class="line"><span class="function"><span class="params">(c)</span> ul1 &amp;&amp; <span class="title">ul2</span></span></span><br><span class="line"><span class="function"><span class="params">(d)</span> ul1 || ul2</span></span><br></pre></td></tr></table></figure><ul><li>(a) 3</li><li>(b) 7</li><li>(c) true</li><li>(d) true</li></ul><h2 id="练习4-28"><a href="#练习4-28" class="headerlink" title="练习4.28"></a><a href="https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap4/4_28.cpp">练习4.28</a></h2><blockquote><p>编写一段程序，输出每一种内置类型所占空间的大小。</p></blockquote><h2 id="练习4-29"><a href="#练习4-29" class="headerlink" title="练习4.29"></a>练习4.29</h2><blockquote><p>推断下面代码的输出结果并说明理由。实际运行这段程序，结果和你想象的一样吗？如不一样，为什么？</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x[<span class="number">10</span>];   <span class="type">int</span> *p = x;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(x)/<span class="built_in">sizeof</span>(*x) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p)/<span class="built_in">sizeof</span>(*p) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>第一个输出结果是 10。第二个结果是未定义。</p><p>参考：<a href="http://stackoverflow.com/a/2428809">Why the size of a pointer is 4bytes in C++</a></p><p>sizeof运算符的总结：</p><ul><li>对char或者类型为char的表达式执行sizeof运算，结果得1。</li><li>对引用类型执行sizeof运算得到被引用对象所占空间的大小。</li><li>对指针执行sizeof运算得到指针本身所占空间的大小。</li><li>对解引用指针执行sizeof运算得到指针指向的对象所占空间的大小，指针不需有效。在sizeof的运算对象中解引用一个无效指针仍然是一种安全的行为，因为指针实际上并没有被真正使用。sizeof不需要真的解引用指针也能知道它所指对象的类型。</li><li>对数组执行sizeof运算得到整个数组所占空间的大小，等价于对数组中所有的元素各执行一次sizeof运算并将所得结果求和（因为执行sizeof运算能得到整个数组的大小，所以可以用数组的大小除以单个元素的大小得到数组中元素的个数：<code>sizeof(ia)/sizeof(*ia)</code>返回ia的元素数量）。注意，sizeof运算不会把数组转换成指针来处理。</li><li>对string对象或vector对象执行sizeof运算只返回该类型固定部分的大小，不会计算对象中的元素占用了多少空间。</li></ul><h2 id="练习4-30"><a href="#练习4-30" class="headerlink" title="练习4.30"></a>练习4.30</h2><blockquote><p>根据4.12节中的表，在下述表达式的适当位置加上括号，使得加上括号之后的表达式的含义与原来的含义相同。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">sizeof</span> x + <span class="built_in">y</span></span><br><span class="line">(b) <span class="keyword">sizeof</span> p-&gt;mem[i]</span><br><span class="line">(c) <span class="keyword">sizeof</span> a &lt; <span class="built_in">b</span></span><br><span class="line">(d) <span class="function"><span class="keyword">sizeof</span> <span class="title">f</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li>(a) (sizeof x) + y</li><li>(b) sizeof(p-&gt;mem[i])</li><li>(c) sizeof(a) &lt; b</li><li>(d) sizeof(f())</li></ul><h2 id="练习4-31"><a href="#练习4-31" class="headerlink" title="练习4.31"></a>练习4.31</h2><blockquote><p>本节的程序使用了前置版本的递增运算符和递减运算符，解释为什么要用前置版本而不用后置版本。要想使用后置版本的递增递减运算符需要做哪些改动？使用后置版本重写本节的程序。</p></blockquote><p>在<a href="#%E7%BB%83%E4%B9%A04-17">练习4.17</a>（4.5节，132页）已经说过了，<strong>除非必须，否则不用递增递减运算符的后置版本</strong>。在这里要使用后置版本的递增递减运算符不影响程序结果，不需要任何改动。</p><h2 id="练习4-32"><a href="#练习4-32" class="headerlink" title="练习4.32"></a>练习4.32</h2><blockquote><p>解释下面这个循环的含义。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> size = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ia[size] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> *ptr = ia, ix = <span class="number">0</span>;</span><br><span class="line">    ix != size &amp;&amp; ptr != ia+size;</span><br><span class="line">    ++ix, ++ptr) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>这个循环在遍历数组 ia，指针 ptr 和 整型 ix 都是起到一个计数的功能，任意选择其中一个都可以完成遍历。</p><h2 id="练习4-33"><a href="#练习4-33" class="headerlink" title="练习4.33"></a>练习4.33</h2><blockquote><p>根据4.12节中的表说明下面这条表达式的含义。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someValue ? ++x, ++y : --x, --y</span><br></pre></td></tr></table></figure><p>逗号表达式的优先级是最低的。因此这条表达式也等于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(someValue ? ++x, ++y : --x), --y</span><br></pre></td></tr></table></figure><p>如果someValue的值为真，x和y的值都自增并返回y值，然后丢弃y值，y递减并返回y值。如果someValue的值为假，x递减并返回x值，然后丢弃x值，y递减并返回y值。</p><h2 id="练习4-34"><a href="#练习4-34" class="headerlink" title="练习4.34"></a>练习4.34</h2><blockquote><p>根据本节给出的变量定义，说明在下面的表达式中奖发生什么样的类型转换：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="keyword">if</span> (fval)</span><br><span class="line">(b) dval = fval + ival;</span><br><span class="line">(c) dval + ival * cval;</span><br></pre></td></tr></table></figure><p>需要注意每种运算符遵循的是左结合律还是右结合律。</p><ul><li>(a) fval 转换为 bool 类型</li><li>(b) ival 转换为 float ，相加的结果转换为 double</li><li>(c) cval 转换为 int，然后相乘的结果转换为 double</li></ul><h2 id="练习4-35"><a href="#练习4-35" class="headerlink" title="练习4.35"></a>练习4.35</h2><blockquote><p>假设有如下的定义：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> cval;</span><br><span class="line"><span class="type">int</span> ival;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> ui;</span><br><span class="line"><span class="type">float</span> fval;</span><br><span class="line"><span class="type">double</span> dval;</span><br></pre></td></tr></table></figure><p>请回答在下面的表达式中发生了隐式类型转换吗？如果有，指出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(a) cval = <span class="string">&#x27;a&#x27;</span> + <span class="number">3</span>;</span><br><span class="line">(b) fval = ui - ival * <span class="number">1.0</span>;</span><br><span class="line">(c) dval = ui * fval;</span><br><span class="line">(d) cval = ival + fval + dval;</span><br></pre></td></tr></table></figure><ul><li>(a) &#39;a&#39; 转换为 int ，然后与 3 相加的结果转换为 char</li><li>(b) ival 转换为 double，ui 转换为 double，结果转换为 float</li><li>(c) ui 转换为 float，结果转换为 double</li><li>(d) ival 转换为 float，与fval相加后的结果转换为 double，最后的结果转换为char</li></ul><p>隐式转换：</p><ul><li>算术转换<ul><li>在大多数表达式中，比int类型小的整型值首先提升为较大的整数类型。</li><li>在条件中，非布尔值转换成布尔类型。</li><li>初始化过程中，初始值转换成变量的类型：在赋值语句中，右侧运算对象转换成左侧运算对象的类型。</li><li>如果算术运算或关系运算的运算对象有多种类型，需要转换成同一种类型。</li><li>如第 6 章将要介绍的，函数调用时也会发生类型转换。</li></ul></li><li>其他隐式类型转换（详见P143-P144）<ul><li>数组转换成指针：在大多数用到数组的表达式中，数组自动转换成指向数组首元素的指针。</li><li>指针的转换</li><li>转换成布尔类型</li><li>转换成常量</li><li>类类型定义的转换</li></ul></li></ul><h2 id="练习4-36"><a href="#练习4-36" class="headerlink" title="练习4.36"></a>练习4.36</h2><blockquote><p>假设 i 是int类型，d 是double类型，书写表达式 i*&#x3D;d 使其执行整数类型的乘法而非浮点类型的乘法。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i *= <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d);</span><br></pre></td></tr></table></figure><h2 id="练习4-37"><a href="#练习4-37" class="headerlink" title="练习4.37"></a>练习4.37</h2><blockquote><p>用命名的强制类型转换改写下列旧式的转换语句。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i; <span class="type">double</span> d; <span class="type">const</span> string *ps; <span class="type">char</span> *pc; <span class="type">void</span> *pv;</span><br><span class="line">(a) pv = (<span class="type">void</span>*)ps;</span><br><span class="line">(b) i = <span class="built_in">int</span>(*pc);</span><br><span class="line">(c) pv = &amp;d;</span><br><span class="line">(d) pc = (<span class="type">char</span>*)pv;</span><br></pre></td></tr></table></figure><ul><li>(a) pv &#x3D; static_cast&lt;void*&gt;(const_cast&lt;string*&gt;(ps));</li><li>(b) i &#x3D; static_cast<int>(*pc);</li><li>(c) pv &#x3D; static_cast&lt;void*&gt;(&amp;d);</li><li>(d) pc &#x3D; static_cast&lt;char*&gt;(pv);</li></ul><h2 id="练习4-38"><a href="#练习4-38" class="headerlink" title="练习4.38"></a>练习4.38</h2><blockquote><p>说明下面这条表达式的含义。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> slope = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(j/i);</span><br></pre></td></tr></table></figure><p>将 <code>j/i</code> 的结果值转换为 double，然后赋值给slope。</p><p>显式转换（如无必要，尽可能避免强制类型转换，因为会干扰正常的类型检查）</p><ul><li>命名的强制类型转换：<code>cast-name&lt;type&gt;(expression);</code>其中，type是转换的目标类型，而expression是要转换的值。如果type是引用类型，则结果是左值。 cast-name有以下四种类型<ul><li>static_cast<ul><li>任何具有明确定义的类型转换，只要不包含底层const ，都可以使用 static_cast。例如，通过将一个运算对象强制转换成 double 类型就能使表达式执行浮点数除法：<code>double slope=static_cast&lt;double&gt;(j)/i</code>。</li><li>当需要把一个较大的算术类型赋值给较小的类型时， static_cast非常有用。此时，强制类型转换告诉程序的读者和编译器：我们知道并且不在乎潜在的精度损失。一般来说，如果编译器发现一个较大的算术类型试图赋值给较小的类型，就会给出警告信息；但是当我们执行了显式的类型转换后，警告信息就会被关闭了。</li><li>static_cast对于编译器无法自动执行的类型转换也非常有用。</li></ul></li><li>dynamic_cast：支持运行时类型识别。</li><li>const_cast：只能改变运算对象的底层const（详见P145）。const_cast常常用于有函数重载的上下文中。</li><li>reinterpret_cast：通常为运算对象的位模式提供较低层次上的重新解释。使用这个类型是非常危险的。reinterpret_cast本质上依赖于机器。要想安全地使用reinterpret_cast，必须对涉及的类型和编译器实现转换的过程都非常了解。</li></ul></li><li>旧式的强制类型转换<ul><li><code>type(expr);</code>：函数形式</li><li><code>(type)expr;</code>：C语言风格</li></ul></li></ul><h3 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a><strong>运算符优先级表</strong></h3><table><thead><tr><th align="left">运算符</th><th align="left">功能</th><th align="left">用法</th><th align="left">结合律</th><th align="left">参考页码</th></tr></thead><tbody><tr><td align="left">::</td><td align="left">全局作用域</td><td align="left">::name</td><td align="left">左</td><td align="left">P256</td></tr><tr><td align="left">::</td><td align="left">类作用域</td><td align="left">class::name</td><td align="left">左</td><td align="left">P79</td></tr><tr><td align="left">::</td><td align="left">命名空间作用域</td><td align="left">namespace::name</td><td align="left">左</td><td align="left">P74</td></tr><tr><td align="left">.</td><td align="left">成员选择</td><td align="left">object::member</td><td align="left">左</td><td align="left">P20</td></tr><tr><td align="left">-&gt;</td><td align="left">成员选择</td><td align="left">pointer-&gt;member</td><td align="left">左</td><td align="left">P98</td></tr><tr><td align="left">[]</td><td align="left">下标</td><td align="left">expr[expr]</td><td align="left">左</td><td align="left">P104</td></tr><tr><td align="left">()</td><td align="left">函数调用</td><td align="left">name(expr_list)</td><td align="left">左</td><td align="left">P20</td></tr><tr><td align="left">()</td><td align="left">类型构造</td><td align="left">type(expr_list)</td><td align="left">左</td><td align="left">P145</td></tr><tr><td align="left">++</td><td align="left">后置递增运算</td><td align="left">lvalue++</td><td align="left">右</td><td align="left">P131</td></tr><tr><td align="left">--</td><td align="left">后置递减运算</td><td align="left">lvalue--</td><td align="left">右</td><td align="left">P131</td></tr><tr><td align="left">typeid</td><td align="left">类型ID</td><td align="left">typeid(type)</td><td align="left">右</td><td align="left">P731</td></tr><tr><td align="left">typeid</td><td align="left">运行时类型ID</td><td align="left">typeid(type)</td><td align="left">右</td><td align="left">P731</td></tr><tr><td align="left">explicit cast</td><td align="left">类型转换</td><td align="left">cast_nam&lt;type&gt;(expr)</td><td align="left">右</td><td align="left">P144</td></tr><tr><td align="left">++</td><td align="left">前置递增运算</td><td align="left">++lvalue</td><td align="left">右</td><td align="left">P131</td></tr><tr><td align="left">--</td><td align="left">前置递减运算</td><td align="left">--lvalue</td><td align="left">右</td><td align="left">P131</td></tr><tr><td align="left">~</td><td align="left">位求反</td><td align="left">~expr</td><td align="left">右</td><td align="left">P136</td></tr><tr><td align="left">!</td><td align="left">逻辑非</td><td align="left">!expr</td><td align="left">右</td><td align="left">P126</td></tr><tr><td align="left">-</td><td align="left">一元负号</td><td align="left">-expr</td><td align="left">右</td><td align="left">P124</td></tr><tr><td align="left">+</td><td align="left">一元正号</td><td align="left">+expr</td><td align="left">右</td><td align="left">P124</td></tr><tr><td align="left">*</td><td align="left">解引用</td><td align="left">*expr</td><td align="left">右</td><td align="left">P48</td></tr><tr><td align="left">&amp;</td><td align="left">取地址</td><td align="left">&amp;lvalue</td><td align="left">右</td><td align="left">P47</td></tr><tr><td align="left">()</td><td align="left">类型转换</td><td align="left">(type)expr</td><td align="left">右</td><td align="left">P145</td></tr><tr><td align="left">sizeof</td><td align="left">对象的大小</td><td align="left">sizeof expr</td><td align="left">右</td><td align="left">P139</td></tr><tr><td align="left">sizeof</td><td align="left">类型的大小</td><td align="left">sizeof(type)</td><td align="left">右</td><td align="left">P139</td></tr><tr><td align="left">sizeof...</td><td align="left">参数包的大小</td><td align="left">sizeof...(name)</td><td align="left">右</td><td align="left">P619</td></tr><tr><td align="left">new</td><td align="left">创建对象</td><td align="left">new type</td><td align="left">右</td><td align="left">P407</td></tr><tr><td align="left">new[]</td><td align="left">创建数组</td><td align="left">new typep[size]</td><td align="left">右</td><td align="left">P407</td></tr><tr><td align="left">delete</td><td align="left">释放对象</td><td align="left">delete expr</td><td align="left">右</td><td align="left">P409</td></tr><tr><td align="left">delete[]</td><td align="left">释放数组</td><td align="left">delete[] expr</td><td align="left">右</td><td align="left">P409</td></tr><tr><td align="left">noexcept</td><td align="left">能否抛出异常</td><td align="left">noexpect(expr)</td><td align="left">右</td><td align="left">P690</td></tr><tr><td align="left">-&gt;*</td><td align="left">指向成员选择的指针</td><td align="left">ptr-&gt;*ptr_to_member</td><td align="left">左</td><td align="left">P740</td></tr><tr><td align="left">.*</td><td align="left">指向成员选择的指针</td><td align="left">obj.*ptr_to_member</td><td align="left">左</td><td align="left">P740</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left">expr*expr</td><td align="left">左</td><td align="left">P124</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td><td align="left">expr&#x2F;expr</td><td align="left">左</td><td align="left">P124</td></tr><tr><td align="left">%</td><td align="left">取模（取余）</td><td align="left">expr%expr</td><td align="left">左</td><td align="left">P124</td></tr><tr><td align="left">+</td><td align="left">加法</td><td align="left">expr+expr</td><td align="left">左</td><td align="left">P124</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left">expr-expr</td><td align="left">左</td><td align="left">P124</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">向左移位</td><td align="left">expr&lt;&lt;expr</td><td align="left">左</td><td align="left">P136</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">向右移位</td><td align="left">exp&gt;&gt;expr</td><td align="left">左</td><td align="left">P136</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">exp&lt;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td><td align="left">exp&lt;&#x3D;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">expr&gt;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">大于等于</td><td align="left">exp&gt;&#x3D;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等</td><td align="left">exp&#x3D;&#x3D;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等</td><td align="left">exp!&#x3D;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">&amp;</td><td align="left">位与</td><td align="left">exp&amp;expr</td><td align="left">左</td><td align="left">P136</td></tr><tr><td align="left">^</td><td align="left">位异或</td><td align="left">exp^expr</td><td align="left">左</td><td align="left">P136</td></tr><tr><td align="left">|</td><td align="left">位或</td><td align="left">exp|expr</td><td align="left">左</td><td align="left">P136</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td><td align="left">exp&amp;&amp;expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td><td align="left">exp||expr</td><td align="left">左</td><td align="left">P126</td></tr><tr><td align="left">?:</td><td align="left">条件</td><td align="left">exp?expr:expr</td><td align="left">右</td><td align="left">P134</td></tr><tr><td align="left">&#x3D;</td><td align="left">赋值</td><td align="left">lvalue&#x3D;expr</td><td align="left">右</td><td align="left">P129</td></tr><tr><td align="left">*&#x3D;, &#x2F;&#x3D;, %&#x3D;, +&#x3D;, -&#x3D;, &lt;&lt;&#x3D;, &gt;&gt;&#x3D;, &amp;&#x3D;, |&#x3D;, ^&#x3D;</td><td align="left">复合赋值</td><td align="left">lvalue+&#x3D;expr等</td><td align="left">右</td><td align="left">P129</td></tr><tr><td align="left">throw</td><td align="left">抛出异常</td><td align="left">throw expr</td><td align="left">右</td><td align="left">P173</td></tr><tr><td align="left">,</td><td align="left">逗号</td><td align="left">expr, expr</td><td align="left">左</td><td align="left">P140</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;第四章：表达式&quot;&gt;&lt;a href=&quot;#第四章：表达式&quot; class=&quot;headerlink&quot; title=&quot;第四章：表达式&quot;&gt;&lt;/a&gt;第四章：表达式&lt;/h1&gt;&lt;h2 id=&quot;练习4-1&quot;&gt;&lt;a href=&quot;#练习4-1&quot; class=&quot;headerlink&quot; title=&quot;练习4.1&quot;&gt;&lt;/a&gt;练习4.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;表达式 5 + 10 * 20 &amp;#x2F; 2 的求值结果是多少？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;105&lt;/p&gt;
&lt;h2 id=&quot;练习4-2&quot;&gt;&lt;a href=&quot;#练习4-2&quot; class=&quot;headerlink&quot; title=&quot;练习4.2&quot;&gt;&lt;/a&gt;练习4.2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;根据4.12节中的表，在下述表达式的合理位置添加括号，使得添加括号后运算对象的组合顺序与添加括号前一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;(a) *vec.begin()&lt;/li&gt;
&lt;li&gt;(b) *vec.begin() + 1&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*(vec.begin())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(*(vec.begin())) + 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习4-3&quot;&gt;&lt;a href=&quot;#练习4-3&quot; class=&quot;headerlink&quot; title=&quot;练习4.3&quot;&gt;&lt;/a&gt;练习4.3&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗？请说出你的理由。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以接受。C++的设计思想是尽可能地“相信”程序员，将效率最大化。然而这种思想却有着潜在的危害，就是无法控制程序员自身引发的错误。因此 Java 的诞生也是必然，Java的思想就是尽可能地“不相信”程序员。&lt;/p&gt;
&lt;h2 id=&quot;练习4-4&quot;&gt;&lt;a href=&quot;#练习4-4&quot; class=&quot;headerlink&quot; title=&quot;练习4.4&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/Mister-Kin/CodeTraining/blob/master/cpp_primer_v5/chap4/4_4.cpp&quot;&gt;练习4.4&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在下面的表达式中添加括号，说明其求值过程及最终结果。编写程序编译该（不加括号的）表达式并输出结果验证之前的推断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;((12&amp;#x2F;3)*4) + (5*15) + ((24%4)&amp;#x2F;2)&lt;/p&gt;
&lt;p&gt;实际输出结果：91。&lt;/p&gt;
&lt;h2 id=&quot;练习4-5&quot;&gt;&lt;a href=&quot;#练习4-5&quot; class=&quot;headerlink&quot; title=&quot;练习4.5&quot;&gt;&lt;/a&gt;练习4.5&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写出下列表达式的求值结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-30&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// -90+4 = -86&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-30&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// -30+63/5 = -30+12 = -18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 10*21%5 = 210%5 = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;-30&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; % &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// -10*21%4 = -210%4 = -2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习4-6&quot;&gt;&lt;a href=&quot;#练习4-6&quot; class=&quot;headerlink&quot; title=&quot;练习4.6&quot;&gt;&lt;/a&gt;练习4.6&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写出一条表达式用于确定一个整数是奇数还是偶数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习4-7&quot;&gt;&lt;a href=&quot;#练习4-7&quot; class=&quot;headerlink&quot; title=&quot;练习4.7&quot;&gt;&lt;/a&gt;练习4.7&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;溢出是何含义？写出三条将导致溢出的表达式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;溢出含义：当计算的结果超出该类型所能表示的范围时就会产生溢出。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; svalue = &lt;span class=&quot;number&quot;&gt;32767&lt;/span&gt;; ++svalue; &lt;span class=&quot;comment&quot;&gt;// -32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; uivalue = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; --uivalue;  &lt;span class=&quot;comment&quot;&gt;// 4294967295&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; usvalue = &lt;span class=&quot;number&quot;&gt;65535&lt;/span&gt;; ++usvalue;  &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习4-8&quot;&gt;&lt;a href=&quot;#练习4-8&quot; class=&quot;headerlink&quot; title=&quot;练习4.8&quot;&gt;&lt;/a&gt;练习4.8&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;说明在逻辑与、逻辑或及相等性运算符中运算对象的求值顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为&lt;strong&gt;短路求值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;相等性运算符未定义求值顺序。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="code-training" scheme="https://mister-kin.github.io/categories/code-training/"/>
    
    <category term="cpp-primer-v5" scheme="https://mister-kin.github.io/categories/code-training/cpp-primer-v5/"/>
    
    
    <category term="C++" scheme="https://mister-kin.github.io/tags/C/"/>
    
    <category term="C++ Primer" scheme="https://mister-kin.github.io/tags/C-Primer/"/>
    
    <category term="习题答案" scheme="https://mister-kin.github.io/tags/%E4%B9%A0%E9%A2%98%E7%AD%94%E6%A1%88/"/>
    
    <category term="练习总结" scheme="https://mister-kin.github.io/tags/%E7%BB%83%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    <category term="第四章" scheme="https://mister-kin.github.io/tags/%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    
    <category term="表达式" scheme="https://mister-kin.github.io/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VSCode配置总结笔记</title>
    <link href="https://mister-kin.github.io/code/vscode/"/>
    <id>https://mister-kin.github.io/code/vscode/</id>
    <published>2023-07-26T20:49:05.000Z</published>
    <updated>2023-07-27T18:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载及安装VSCode">1 &nbsp&nbsp<a href="#下载及安装VSCode" class="headerlink" title="下载及安装VSCode"></a>下载及安装VSCode</h1><ul><li>下载：<a href="https://code.visualstudio.com/Download">VSCode System Installer</a></li><li>安装：默认及路径安装，选项额外添选上下文菜单（文件和目录）</li></ul><h2 id="配置C-C">1.1 &nbsp&nbsp<a href="#配置C-C" class="headerlink" title="配置C&#x2F;C++"></a>配置C&#x2F;C++</h2><p>编译器：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">MSVC CL 编译器（Visual Studio 2022 生成工具）</a></p><h1 id="CL编译器的环境设置">2 &nbsp&nbsp<a href="#CL编译器的环境设置" class="headerlink" title="CL编译器的环境设置"></a>CL编译器的环境设置</h1><ol><li>安装cl开发环境</li><li>将CL路径添加到系统path中：<code>C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.35.32215/bin/Hostx64/x64/</code></li><li>拷贝.vscode配置文件夹</li></ol><h2 id="更新MSVC后找不到CL命令">2.1 &nbsp&nbsp<a href="#更新MSVC后找不到CL命令" class="headerlink" title="更新MSVC后找不到CL命令"></a>更新MSVC后找不到CL命令</h2><p>更新MSVC后，版本号可能会变更，如果终端运行cl命令后查不到，需要手动更新两个文件中的CL路径：</p><ul><li>系统PATH</li><li>c_cpp_properties.json</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;下载及安装VSCode&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#下载及安装VSCode&quot; class=&quot;headerlink&quot; title=&quot;下载及安装VSCode&quot;&gt;&lt;/a&gt;下载及安装VSCode&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;下载：&lt;a</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="编译" scheme="https://mister-kin.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="vsc" scheme="https://mister-kin.github.io/tags/vsc/"/>
    
    <category term="vscode" scheme="https://mister-kin.github.io/tags/vscode/"/>
    
    <category term="编辑器" scheme="https://mister-kin.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    <category term="链接" scheme="https://mister-kin.github.io/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>网站收藏夹</title>
    <link href="https://mister-kin.github.io/bookmark/"/>
    <id>https://mister-kin.github.io/bookmark/</id>
    <published>2023-07-25T13:15:01.000Z</published>
    <updated>2023-09-09T12:35:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三方站点导航推荐">1 &nbsp&nbsp<a href="#第三方站点导航推荐" class="headerlink" title="第三方站点导航推荐"></a>第三方站点导航推荐</h1><ul><li><a href="https://arandintday.github.io/2020/02/28/goodwebsite/">个人收藏的良心网站（持续更新）</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;第三方站点导航推荐&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#第三方站点导航推荐&quot; class=&quot;headerlink&quot; title=&quot;第三方站点导航推荐&quot;&gt;&lt;/a&gt;第三方站点导航推荐&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a</summary>
        
      
    
    
    
    
    <category term="书签" scheme="https://mister-kin.github.io/tags/%E4%B9%A6%E7%AD%BE/"/>
    
    <category term="收藏夹" scheme="https://mister-kin.github.io/tags/%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
    <category term="网址" scheme="https://mister-kin.github.io/tags/%E7%BD%91%E5%9D%80/"/>
    
    <category term="站点" scheme="https://mister-kin.github.io/tags/%E7%AB%99%E7%82%B9/"/>
    
    <category term="导航" scheme="https://mister-kin.github.io/tags/%E5%AF%BC%E8%88%AA/"/>
    
    <category term="推荐" scheme="https://mister-kin.github.io/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>CAD总结笔记</title>
    <link href="https://mister-kin.github.io/cad/cad/"/>
    <id>https://mister-kin.github.io/cad/cad/</id>
    <published>2023-07-24T18:11:40.000Z</published>
    <updated>2023-08-02T18:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见接口引脚定义">1 &nbsp&nbsp<a href="#常见接口引脚定义" class="headerlink" title="常见接口引脚定义"></a>常见接口引脚定义</h1><h2 id="Type-C接口">1.1 &nbsp&nbsp<a href="#Type-C接口" class="headerlink" title="Type-C接口"></a>Type-C接口</h2><p><a href="https://blog.csdn.net/qlexcel/article/details/117431413">https://blog.csdn.net/qlexcel/article/details/117431413</a></p><h2 id="充电DC圆孔">1.2 &nbsp&nbsp<a href="#充电DC圆孔" class="headerlink" title="充电DC圆孔"></a>充电DC圆孔</h2><p>无论是公口或者母口，一般都是内正外负，不仅是5.5大小的，4、3.5、2.5等等的。不过有些厂家是对着干的，比如当年卡西欧和雅马哈电子琴所配的电源。</p><div class="flex-column"><img data-src="/images/cad/dc_pin.webp">DC接口引脚定义</div><h1 id="华硕主板灯控开发">2 &nbsp&nbsp<a href="#华硕主板灯控开发" class="headerlink" title="华硕主板灯控开发"></a>华硕主板灯控开发</h1><ul><li><a href="https://github.com/ProgramAndPoem/AacHal">https://github.com/ProgramAndPoem/AacHal</a></li><li><a href="https://blog.csdn.net/weixin_42349978/article/details/112128924">https://blog.csdn.net/weixin_42349978/article/details/112128924</a></li></ul><h1 id="锂电池">3 &nbsp&nbsp<a href="#锂电池" class="headerlink" title="锂电池"></a>锂电池</h1><p>串并联符号：串联s，并联p。3s1p：三串一并，一并实际就是没有并联。比如1s1p就是单一电池。</p><p>串联增压，并联增容。</p><h1 id="Proteus仿真">4 &nbsp&nbsp<a href="#Proteus仿真" class="headerlink" title="Proteus仿真"></a>Proteus仿真</h1><h2 id="仿真时时间流动过慢">4.1 &nbsp&nbsp<a href="#仿真时时间流动过慢" class="headerlink" title="仿真时时间流动过慢"></a>仿真时时间流动过慢</h2><p>可能存在的原因：</p><ul><li>计算机性能不够，导致运行proteus仿真过慢</li><li>proteus内设置的晶振频率和keil源码编译时设置的晶振频率不同</li></ul><h1 id="参考文献">5 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] proteus 8 仿真时 时间流动过慢的解决方案[EB&#x2F;OL]. <a href="https://blog.csdn.net/weixin_44176696/article/details/106875850">https://blog.csdn.net/weixin_44176696/article/details/106875850</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;常见接口引脚定义&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#常见接口引脚定义&quot; class=&quot;headerlink&quot; title=&quot;常见接口引脚定义&quot;&gt;&lt;/a&gt;常见接口引脚定义&lt;/h1&gt;&lt;h2 id=&quot;Type-C接口&quot;&gt;1.1 &amp;nbsp&amp;nbsp&lt;a</summary>
        
      
    
    
    
    <category term="cad" scheme="https://mister-kin.github.io/categories/cad/"/>
    
    
  </entry>
  
  <entry>
    <title>Office总结笔记</title>
    <link href="https://mister-kin.github.io/software/office/"/>
    <id>https://mister-kin.github.io/software/office/</id>
    <published>2023-07-24T14:42:36.000Z</published>
    <updated>2023-09-04T16:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓android-Office">1 &nbsp&nbsp<a href="#安卓android-Office" class="headerlink" title="安卓android Office"></a>安卓android Office</h1><ul><li>excel表格别用其中的创建自定义视图功能，这功能是创建一个新的视图，完完全全改变单元格的全部样式（对应视图）。如果只是需要修改单元格特定格式，在编辑模式下完成即可。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;安卓android-Office&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#安卓android-Office&quot; class=&quot;headerlink&quot; title=&quot;安卓android Office&quot;&gt;&lt;/a&gt;安卓android</summary>
        
      
    
    
    
    <category term="software" scheme="https://mister-kin.github.io/categories/software/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="office" scheme="https://mister-kin.github.io/tags/office/"/>
    
    <category term="软件" scheme="https://mister-kin.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
    <category term="操作" scheme="https://mister-kin.github.io/tags/%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Android系统排障总结</title>
    <link href="https://mister-kin.github.io/troubleshooting/android-troubleshooting/"/>
    <id>https://mister-kin.github.io/troubleshooting/android-troubleshooting/</id>
    <published>2023-07-24T14:39:33.000Z</published>
    <updated>2023-08-02T18:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓系统免杀后台进程设置步骤（包含各个安卓系统）">1 &nbsp&nbsp<a href="#安卓系统免杀后台进程设置步骤（包含各个安卓系统）" class="headerlink" title="安卓系统免杀后台进程设置步骤（包含各个安卓系统）"></a>安卓系统免杀后台进程设置步骤（包含各个安卓系统）</h1><p><a href="https://dontkillmyapp.com/">https://dontkillmyapp.com/</a></p><h1 id="在保留root的情况下（保留Magisk）升级系统">2 &nbsp&nbsp<a href="#在保留root的情况下（保留Magisk）升级系统" class="headerlink" title="在保留root的情况下（保留Magisk）升级系统"></a>在保留root的情况下（保留Magisk）升级系统</h1><ol><li>更新到提示你“立即安装”这一步，先不要点</li><li>调出Magisk小窗，点Magisk旁边的安装，选择安装到未使用的槽位，然后会提示你重启，不要点重启，点“立即安装”会自动重启</li><li>重启后检查更新，检查Magisk、ROOT还在不在，再把模块都打开再重启一遍检查</li></ol><h1 id="参考资料">3 &nbsp&nbsp<a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Realme真我GT Neo3更新系统会掉ROOT吗-怎么保留Magsik更新系统[EB&#x2F;OL]. <a href="http://m.romjd.com/reviews/content/6069">http://m.romjd.com/reviews/content/6069</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;安卓系统免杀后台进程设置步骤（包含各个安卓系统）&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#安卓系统免杀后台进程设置步骤（包含各个安卓系统）&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="troubleshooting" scheme="https://mister-kin.github.io/categories/troubleshooting/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="系统" scheme="https://mister-kin.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="计算机" scheme="https://mister-kin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="电脑" scheme="https://mister-kin.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="维护" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E6%8A%A4/"/>
    
    <category term="维修" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E4%BF%AE/"/>
    
    <category term="故障" scheme="https://mister-kin.github.io/tags/%E6%95%85%E9%9A%9C/"/>
    
    <category term="android" scheme="https://mister-kin.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统排障总结</title>
    <link href="https://mister-kin.github.io/troubleshooting/linux-troubleshooting/"/>
    <id>https://mister-kin.github.io/troubleshooting/linux-troubleshooting/</id>
    <published>2023-07-24T14:06:21.000Z</published>
    <updated>2023-09-18T19:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础命令">1 &nbsp&nbsp<a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><ul><li>关机：<ul><li><code>poweroff</code>（也是调用shutdown工具链实现）</li><li><code>halt</code>（实际调用shutdown -h）</li><li><code>shutdown -h now</code></li><li><code>init 0</code>（init是所有进程的祖先，他是Linux系统操作中不可缺少的程序之一。它的进程号始终为1，所以发送TERM信号给init会终止所有的用户进程，shutdown就是使用这种机制。init定义了8个运行级别(runlevel)，init 0为关机，init 1为重启。）</li></ul></li><li>重启<ul><li><code>reboot</code></li><li><code>shutdown -r now</code>（root权限可使用）</li><li><code>init 1</code></li></ul></li></ul><h1 id="终端符号输入">2 &nbsp&nbsp<a href="#终端符号输入" class="headerlink" title="终端符号输入"></a>终端符号输入</h1><ul><li>ctrl+c：停止</li><li>ctrl+z：停止输入</li></ul><h1 id="包管理器">3 &nbsp&nbsp<a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h1><h2 id="apt">3.1 &nbsp&nbsp<a href="#apt" class="headerlink" title="apt"></a>apt</h2><h3 id="apt-update证书验证错误">3.1.1 &nbsp&nbsp<a href="#apt-update证书验证错误" class="headerlink" title="apt update证书验证错误"></a>apt update证书验证错误</h3><p>错误信息：Certificate verification failed: The certificate is NOT trusted.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install --reinstall ca-certificates</span><br></pre></td></tr></table></figure><h1 id="编译问题">4 &nbsp&nbsp<a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h1><h2 id="普通用户导致的编译问题">4.1 &nbsp&nbsp<a href="#普通用户导致的编译问题" class="headerlink" title="普通用户导致的编译问题"></a>普通用户导致的编译问题</h2><p>普通用户中如果在系统关键目录中，如<code>/opt</code>，执行<code>sudo make</code>可能会出现<code>xxx command not found</code>，这是因为有些命令在<code>sudo</code>下是不可见的，但如果不用<code>sudo</code>，<code>make</code>又无法在这些路径生成文件。</p><p>解决方式：使用<code>make -f</code>参数指定<code>makefile</code>文件，让它在有权限的路径中工作。例如，将工作路径切到<code>home</code>目录中，<code>make -f /opt/xxx/xxx/makefile</code>，<code>make</code>可在<code>home</code>路径中生成文件。</p><h1 id="账户管理">5 &nbsp&nbsp<a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h1><h2 id="删除账户">5.1 &nbsp&nbsp<a href="#删除账户" class="headerlink" title="删除账户"></a>删除账户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel [-r] [user_account] <span class="comment"># 切换到其他账户再执行，建议是root账户</span></span><br><span class="line">userdel -r kin <span class="comment"># 删除账户kin，-r参数是移除该账户的home目录和用户邮箱（mail spool）</span></span><br></pre></td></tr></table></figure><h2 id="自动root登录">5.2 &nbsp&nbsp<a href="#自动root登录" class="headerlink" title="自动root登录"></a>自动root登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gedit /etc/gdm/custom.conf</span><br><span class="line"><span class="comment"># 在daemon下添加</span></span><br><span class="line">AutomaticLoginEnable=True</span><br><span class="line">AutomaticLogin=root</span><br></pre></td></tr></table></figure><h2 id="重置密码（ubuntu为例）">5.3 &nbsp&nbsp<a href="#重置密码（ubuntu为例）" class="headerlink" title="重置密码（ubuntu为例）"></a>重置密码（ubuntu为例）</h2><ol><li>进入到救援模式中，选择root选项（root  Drop to root shell prompt），敲一次回车enter键显示：<code>root@ubuntu:~#</code></li><li>重置密码命令：<code>passwd 系统账户名</code>，按提示输入两次密码确认</li><li>exit退出shell，选择resume回到正常启动中。</li></ol><h2 id="帐号和密码文件（-etc-passwd和-etc-shadow）">5.4 &nbsp&nbsp<a href="#帐号和密码文件（-etc-passwd和-etc-shadow）" class="headerlink" title="帐号和密码文件（&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow）"></a>帐号和密码文件（&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow）</h2><p>Linux系统中，所有用户（包括系统管理员root）的账号和密码存储在&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow这两个文件中。其中，passwd保存的是账号，shadow保存的是账号的密码等信息（&#x2F;etc&#x2F;passwd只有root才可以修改的，&#x2F;etc&#x2F;shadow只有root才能查看）</p><h3 id="etc-passwd">5.4.1 &nbsp&nbsp<a href="#etc-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h3><p>示例：<code>root:x:0:0:root:/root:/bin/bash</code></p><p>上面每一行都代表一个用户，每一行又通过[:]分为7个部分。</p><ol><li>账号名称</li><li>为密码占位符（x表示该账户需要密码才能登录，为空时，账户无须密码即可登录）。原先用来保存密码的，现在密码都放在&#x2F;etc&#x2F;shadow中，所以这里显示x。</li><li>UID，也就是使用者ID。默认的系统管理员的UID为0，我们添加用户的时候最好使用1000以上的UID，1-1000范围的UID最好保留给系统用。</li><li>GID，也就是群组ID</li><li>关于账号的一些说明信息（暂时可以忽略）</li><li>账号的家目录，家目录就是你登陆系统后默认的那个目录</li><li>账号使用的shell。&#x2F;bin&#x2F;bash为可登录系统Shell，&#x2F;sbin&#x2F;nologin表示账户无法登录系统。</li></ol><h3 id="etc-shadow">5.4.2 &nbsp&nbsp<a href="#etc-shadow" class="headerlink" title="&#x2F;etc&#x2F;shadow"></a>&#x2F;etc&#x2F;shadow</h3><p>示例：<code>root:!:15324:0:99999:7:::</code></p><p>上面每一行都代表一个用户，每一行又通过[:]分为9个部分。</p><ol><li>账户名称（密码需要与账户对应的）</li><li>加密后的密码：如果这一栏的第一个字符为!或者*的话，说明这是一个不能登录的账户，从示例可看出ubuntu默认的就不启用root账户。（账户未设置密码时为空，设置密码后加密显示。!为无效哈希，系统会自动锁定这些账户并阻止登录，通过在&#x2F;etc&#x2F;passwd设置&#x2F;bin&#x2F;false或者&#x2F;sbin&#x2F;nologin实现禁止登录）</li><li>最近改动密码的日期：上次修改密码的时间距离1970年01月01日多少天</li><li>密码不可被变更的天数：设置了这个值，则表示从变更密码的日期算起，多少天内无法再次修改密码，如果是0的话，则没有限制</li><li>密码需要重新变更的天数：密码经常更换才能保证安全，为了提醒某些经常不更换密码的用户，可以设置一个天数，强制让用户更换密码，也就是说该用户的密码会在多少天后过期（默认位99999天，可以理解为永不过期）</li><li>密码过期预警天数：如果在5中设置了密码需要重新变更的天数，则会在密码过期的前多少天进行提醒，提示用户其密码将在多少天后过期</li><li>密码过期的宽恕时间：如果在5中设置的日期过后，用户仍然没有修改密码，则该用户还可以继续使用的天数</li><li>账号失效日期，过了这个日期账号就不能用了</li><li>保留未使用</li></ol><h3 id="etc-shadow文件中密码的加密方式">5.4.3 &nbsp&nbsp<a href="#etc-shadow文件中密码的加密方式" class="headerlink" title="&#x2F;etc&#x2F;shadow文件中密码的加密方式"></a>&#x2F;etc&#x2F;shadow文件中密码的加密方式</h3><p>示例：<code>root:$1$Bg1H/4mz$X89TqH7tpi9dX1B9j5YsF.:14838:0:99999:7:::</code></p><p>示例的密码域：<code>$1$Bg1H/4mz$X89TqH7tpi9dX1B9j5YsF.</code>，密码域密文也是由三部分组成的，即：$id$salt$encrypted，详细参见linux标准源文件passwd.c中的pw_encrypt函数。</p><p>加密算法：明文密码和一个叫salt的东西通过函数crypt()完成加密</p><div class="note "><p>id为1时，采用md5进行加密；id为5时，采用SHA256进行加密；id为6时，采用SHA512进行加密。</p></div><p>得知加密方式，可以复制密文到相关工具上逆向破解：</p><h1 id="硬盘和分区管理">6 &nbsp&nbsp<a href="#硬盘和分区管理" class="headerlink" title="硬盘和分区管理"></a>硬盘和分区管理</h1><h2 id="挂载一个新硬盘">6.1 &nbsp&nbsp<a href="#挂载一个新硬盘" class="headerlink" title="挂载一个新硬盘"></a>挂载一个新硬盘</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lsblk    <span class="comment">#查看所有硬盘情况</span></span><br><span class="line"><span class="built_in">df</span> -lh    <span class="comment">#查看硬盘占用情况，以及挂载位置</span></span><br><span class="line">sudo fdisk -l    <span class="comment">#查看硬盘分区情况</span></span><br><span class="line">sudo fdisk /dev/sdb    <span class="comment">#给硬盘sdb创建分区</span></span><br><span class="line">sudo mkfs.ext4 /dev/sdb    <span class="comment">#格式化硬盘sdb，并写入文件系统</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /mnt/pan <span class="comment">#创建目录</span></span><br><span class="line">sudo mount /dev/sdb /mnt/pan    <span class="comment">#将硬盘sdb挂载到 /mnt/pan 目录</span></span><br><span class="line">sudo vim /etc/fstab <span class="comment"># 设置开机自动挂载</span></span><br><span class="line">/dev/sdb    /mnt/pan    ext4    defaults    0    0</span><br></pre></td></tr></table></figure><h2 id="将-home目录挂载到新分区（或新硬盘）">6.2 &nbsp&nbsp<a href="#将-home目录挂载到新分区（或新硬盘）" class="headerlink" title="将&#x2F;home目录挂载到新分区（或新硬盘）"></a>将&#x2F;home目录挂载到新分区（或新硬盘）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过包管理器安装 gparted，进行新建分区或者格式化硬盘等操作。</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /mnt/home</span><br><span class="line">sudo mount /dev/新分区 /mnt/home <span class="comment"># 挂载新分区到/mnt/home</span></span><br><span class="line">sudo rsync -aXS /home/ /mnt/home <span class="comment"># a归档模式（递归传输并保持文件属性），X保持扩展属性</span></span><br><span class="line">sudo <span class="built_in">mv</span> /home /home_old</span><br><span class="line">sudo <span class="built_in">mkdir</span> /home</span><br><span class="line">sudo umount /dev/新分区</span><br><span class="line">sudo mount /dev/新分区 /home</span><br><span class="line">blkid|grep /dev/新分区 <span class="comment"># 查看新分区的uuid</span></span><br><span class="line">sudo gedit /etc/fstab <span class="comment"># 将新分区的uuid填入fstab</span></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /home_old <span class="comment"># 重启无异常，即可删除旧home目录</span></span><br></pre></td></tr></table></figure><h2 id="查看硬盘是不是固态硬盘（SSD）">6.3 &nbsp&nbsp<a href="#查看硬盘是不是固态硬盘（SSD）" class="headerlink" title="查看硬盘是不是固态硬盘（SSD）"></a>查看硬盘是不是固态硬盘（SSD）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 0表明为ssd，1是机械</span></span><br><span class="line"><span class="built_in">cat</span> /sys/block/sda/queue/rotational</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0表明为ssd，1是机械</span></span><br><span class="line">lsblk -d -o name,rota</span><br></pre></td></tr></table></figure><h1 id="网络">7 &nbsp&nbsp<a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="查看网卡信息">7.1 &nbsp&nbsp<a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h2><p>查看ip信息：</p><ul><li>windows：ipconfig &#x2F;a</li><li>linux: ifconfig（配置网络接口）或者iwconfig（配置无线网络接口）</li></ul><p>网卡名称解析：</p><ul><li>lo：表示local</li><li>wl：表示wlan(Wireless Local Area Network)无线局域网</li><li>en：表示ethernet以太网</li><li>PCI接口的物理位置的坐标(bus, slot)，其中bus表示总线，slot表示插槽</li></ul><p>例子：</p><ul><li>wlp3s0表示，WLAN PCI接口位置：bus&#x3D;3, slot&#x3D;0。</li><li>enp2s0表示，Etnernet PCI接口位置：bus&#x3D;2, slot&#x3D;0。</li></ul><h2 id="安装远程控制软件">7.2 &nbsp&nbsp<a href="#安装远程控制软件" class="headerlink" title="安装远程控制软件"></a>安装远程控制软件</h2><h2 id="ssh登录远程服务器">7.3 &nbsp&nbsp<a href="#ssh登录远程服务器" class="headerlink" title="ssh登录远程服务器"></a>ssh登录远程服务器</h2><div class="note "><p>大部分系统都预装ssh程序客户端，方便连接其他ssh服务器使用，包括windows系统。如果需要设置作为被连接的ssh端，需要自行手动安装ssh的server。</p></div><p>连接命令：<code>ssh 系统账户名@远程服务器ip</code>，例如<code>ssh root@192.168.1.1</code></p><p>查看ssh版本：<code>ssh -V</code></p><h3 id="Ubuntu开启ssh服务及允许root登录">7.3.1 &nbsp&nbsp<a href="#Ubuntu开启ssh服务及允许root登录" class="headerlink" title="Ubuntu开启ssh服务及允许root登录"></a>Ubuntu开启ssh服务及允许root登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/ssh/sshd_config文件</span></span><br><span class="line">sudo nano /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改如下字段</span></span><br><span class="line"><span class="comment">#PermitRootLogin prohibit-password</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启sshd服务</span></span><br><span class="line">sudo systemctl restart sshd.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认情况下，在Ubuntu 20.04上未设置root用户的密码，当尝试以root用户身份进行SSH登录时，将显示错误消息Permission denied，please try again。因此，我们需要设置root用户的密码。出现提示时，输入当前用户密码，然后输入新的根密码：</span></span><br><span class="line">sudo passwd</span><br><span class="line"><span class="comment"># 输入两次密码确定即可</span></span><br></pre></td></tr></table></figure><h4 id="系统自启ssh服务">7.3.1.1 &nbsp&nbsp<a href="#系统自启ssh服务" class="headerlink" title="系统自启ssh服务"></a>系统自启ssh服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开机自动启动ssh命令</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭ssh开机自动启动命令</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单次开启ssh</span></span><br><span class="line">sudo systemctl start ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单次关闭ssh</span></span><br><span class="line">sudo systemctl stop ssh</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看ssh是否启动，看到Active: active (running)即表示成功</span></span><br><span class="line">sudo systemctl status ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 SSH 守护进程是否已经运行</span></span><br><span class="line">systemctl status sshd</span><br></pre></td></tr></table></figure><h3 id="使用scp传递文件">7.3.2 &nbsp&nbsp<a href="#使用scp传递文件" class="headerlink" title="使用scp传递文件"></a>使用scp传递文件</h3><div class="note success no-icon"><p>windows和linux之间传输更推荐使用<a href="https://winscp.net/eng/download.php">WinSCP</a>工具。</p></div><ol><li>下载安装<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PuTTY</a></li><li>在PuTTY安装路径中打开终端窗口</li><li>拷贝命令：<code>pscp [Linux用户名]@[Linux服务器ip地址]:[Linux服务器源文件] [本地目标文件夹]</code>，示例：<code>pscp d:\Old\test.jpg root@ipaddress:/var/www/html/</code></li></ol><h2 id="arch-linux安装远程软件">7.4 &nbsp&nbsp<a href="#arch-linux安装远程软件" class="headerlink" title="arch linux安装远程软件"></a>arch linux安装远程软件</h2><p>P.S.配置好arch的“国内源”和“社区源”，安装yay。</p><ul><li>安装teamviewer<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装teamviewer</span></span><br><span class="line">yay -S teamviewer</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sudo teamviewer daemon start</span><br><span class="line">sudo teamviewer daemon <span class="built_in">enable</span></span><br><span class="line">sudo teamviewer daemon restart</span><br></pre></td></tr></table></figure></li><li>安装todesk<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装todesk</span></span><br><span class="line">yay -S todesk</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl start todeskd.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> todeskd.service</span><br></pre></td></tr></table></figure></li><li>安装向日葵<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装向日葵</span></span><br><span class="line">yay -S sunloginclient</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl start runsunloginclient.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> runsunloginclient.service</span><br></pre></td></tr></table></figure></li></ul><p>P.S.若遇到todesk打开系统就注销的问题，尝试下先删除teamviewer再重新安装一下，之后再打开todesk测试（yay社区编译版本的todesk和teamviewer可能存在冲突）。</p><h1 id="开机排障">8 &nbsp&nbsp<a href="#开机排障" class="headerlink" title="开机排障"></a>开机排障</h1><h2 id="ubuntu救援模式（recovery-mode）">8.1 &nbsp&nbsp<a href="#ubuntu救援模式（recovery-mode）" class="headerlink" title="ubuntu救援模式（recovery mode）"></a>ubuntu救援模式（recovery mode）</h2><p>救援模式相当于使用 SysV 作为默认的服务管理器的 Linux 发行版中的 单用户模式。在救援模式下，将挂载所有本地文件系统，仅启动一些重要服务。但是，不会启动正常服务（例如网络服务）。一般系统无法正常启动时，进入该模式修复，例如重置root。</p><ul><li>若硬盘挂载失败，会自动进入到救援模式中。修正fstab表中正确的硬盘uuid，之后正确恢复到</li><li>ubuntu摁一次esc键可以进入可grub选择界面，重复摁会导致无法进入的。进入到grub选择界面后，选择ubuntu的高级选项进入到救援模式。如果没有可选择的界面，尝试重启长摁SHIFT键看看。</li></ul><p>从救援模式切换到紧急模式：<code>systemctl emergency</code></p><h2 id="ubuntu紧急模式">8.2 &nbsp&nbsp<a href="#ubuntu紧急模式" class="headerlink" title="ubuntu紧急模式"></a>ubuntu紧急模式</h2><p>在紧急模式中不启动任何东西。没有服务启动、没有挂载点、没有建立套接字，什么也没有。只是一个原始的 shell。</p><p>从紧急模式切换到救援模式：<code>systemctl rescue</code></p><h2 id="开机出现initramfs-requires-a-manual-fsck">8.3 &nbsp&nbsp<a href="#开机出现initramfs-requires-a-manual-fsck" class="headerlink" title="开机出现initramfs(requires a manual fsck)"></a>开机出现initramfs(requires a manual fsck)</h2><p>问题常见于以下常见场景：</p><ul><li>异常断电或者关机引起文件数据损坏</li><li>系统无法启动</li><li>连接的驱动器（包括闪存驱动器&#x2F;SD卡这类设备）未按预期工作</li></ul><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提示中说明是哪个硬盘需要执行fsck修复（文件系统一致性检查），例如sda1</span></span><br><span class="line">fsck /dev/sda1 -y</span><br><span class="line"><span class="comment"># 等执行到出现FILE SYSTEM WAS MODIFIED即可reboot系统</span></span><br></pre></td></tr></table></figure><h1 id="参考文献">9 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] ubuntu开机出现initramfs(requires a manual fsck)解决办法[EB&#x2F;OL]. <a href="https://www.cnblogs.com/yibeimingyue/p/14261416.html">https://www.cnblogs.com/yibeimingyue/p/14261416.html</a>.<br>[2] 如何在 Ubuntu 18.04 中启动到救援模式或紧急模式[EB&#x2F;OL]. <a href="https://zhuanlan.zhihu.com/p/53902139">https://zhuanlan.zhihu.com/p/53902139</a>.<br>[3] Linux下如何查看一块硬盘是不是固态硬盘（SSD）[EB&#x2F;OL]. <a href="https://blog.csdn.net/qq_42303254/article/details/89317618">https://blog.csdn.net/qq_42303254/article/details/89317618</a>.<br>[4] Ubuntu 18.04 apt update failed for https repository[EB&#x2F;OL]. <a href="https://askubuntu.com/questions/1229122/ubuntu%E2%80%9118%E2%80%9104%E2%80%91apt%E2%80%91update%E2%80%91failed%E2%80%91for%E2%80%91https%E2%80%91repository">https://askubuntu.com/questions/1229122/ubuntu‑18‑04‑apt‑update‑failed‑for‑https‑repository</a>.<br>[5] 将&#x2F;home 目录挂载到新分区（或新硬盘）[EB&#x2F;OL]. <a href="https://blog.51cto.com/runixcn/4605838">https://blog.51cto.com/runixcn/4605838</a>.<br>[6] ubuntu修改密码（详细版）「建议收藏」[EB&#x2F;OL]. <a href="https://cloud.tencent.com/developer/article/2159425">https://cloud.tencent.com/developer/article/2159425</a>.<br>[7] Linux账号和密码文件 &#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow[EB&#x2F;OL]. <a href="https://www.cnblogs.com/fuyuanming/p/6519758.html">https://www.cnblogs.com/fuyuanming/p/6519758.html</a>.<br>[8] What means * and ! at second field of &#x2F;etc&#x2F;shadow?[EB&#x2F;OL]. <a href="https://superuser.com/questions/623881/what-means-and-at-second-field-of-etc-shadow">https://superuser.com/questions/623881/what-means-and-at-second-field-of-etc-shadow</a>.<br>[9] SSH and locked users[EB&#x2F;OL]. <a href="http://arlimus.github.io/articles/usepam/">http://arlimus.github.io/articles/usepam/</a>.<br>[10] Linux shadow文件中密码的加密方式[EB&#x2F;OL]. <a href="https://www.cnblogs.com/7-58/p/13328148.html">https://www.cnblogs.com/7-58/p/13328148.html</a>.<br>[11] 使用root ssh登录ubuntu22.4配置[EB&#x2F;OL]. <a href="https://www.cnblogs.com/waldron/p/16864613.html">https://www.cnblogs.com/waldron/p/16864613.html</a>.<br>[12] Windows连接ssh、scp到Ubuntu服务器[EB&#x2F;OL]. <a href="https://blog.csdn.net/renshy5/article/details/117735410">https://blog.csdn.net/renshy5/article/details/117735410</a>.<br>[13] Ubuntu下移动硬盘的分区、格式化、挂载操作[EB&#x2F;OL]. <a href="https://zhuanlan.zhihu.com/p/397440213">https://zhuanlan.zhihu.com/p/397440213</a>.<br>[14] Ubuntu ifconfig 查看网卡信息 lo enp2s0 wlp3s0 具体含义[EB&#x2F;OL]. <a href="https://blog.csdn.net/wuyujin1997/article/details/105460929">https://blog.csdn.net/wuyujin1997/article/details/105460929</a>.<br>[15] arch linux 安装teamviewer,todesk,向日葵,远程软件方法[EB&#x2F;OL]. <a href="https://www.jianshu.com/p/e4b61f754071">https://www.jianshu.com/p/e4b61f754071</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;基础命令&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#基础命令&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="troubleshooting" scheme="https://mister-kin.github.io/categories/troubleshooting/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="系统" scheme="https://mister-kin.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="linux" scheme="https://mister-kin.github.io/tags/linux/"/>
    
    <category term="终端" scheme="https://mister-kin.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="https://mister-kin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="电脑" scheme="https://mister-kin.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="维护" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E6%8A%A4/"/>
    
    <category term="维修" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E4%BF%AE/"/>
    
    <category term="故障" scheme="https://mister-kin.github.io/tags/%E6%95%85%E9%9A%9C/"/>
    
    <category term="命令" scheme="https://mister-kin.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>数据库技术总结笔记</title>
    <link href="https://mister-kin.github.io/code/database/"/>
    <id>https://mister-kin.github.io/code/database/</id>
    <published>2023-07-24T14:01:29.000Z</published>
    <updated>2023-07-26T20:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navicat">1 &nbsp&nbsp<a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h1><h2 id="mongodb导出导入">1.1 &nbsp&nbsp<a href="#mongodb导出导入" class="headerlink" title="mongodb导出导入"></a>mongodb导出导入</h2><h3 id="导入导出数据库">1.1.1 &nbsp&nbsp<a href="#导入导出数据库" class="headerlink" title="导入导出数据库"></a>导入导出数据库</h3><ol><li>去MongoDB官网下载<a href="https://www.mongodb.com/try/download/database-tools">MongoDB Command Line Database Tools</a></li><li>对数据库右键，选择MongoDump，设置刚刚下载解压后的bin下路径的mongodump.exe</li><li>设置保存路径，以gz格式存放</li><li>对新数据库右键，选择MongoRestore，配置路径mongorestore.exe，选择备份文件导入</li></ol><h3 id="导入导出表，或者表中部分字段">1.1.2 &nbsp&nbsp<a href="#导入导出表，或者表中部分字段" class="headerlink" title="导入导出表，或者表中部分字段"></a>导入导出表，或者表中部分字段</h3><p>使用mongoexport，mongoimport功能</p><h2 id="数据迁移">1.2 &nbsp&nbsp<a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><h3 id="单库迁移">1.2.1 &nbsp&nbsp<a href="#单库迁移" class="headerlink" title="单库迁移"></a>单库迁移</h3><ol><li>在目标服务器中创建一个和源服务器数据库名称一样的数据库</li><li>菜单栏&gt;工具&gt;数据传输（填写源服务器和目标服务器的信息，例如ip访问地址）</li><li>下一步即可开始迁移</li></ol><h3 id="多库迁移">1.2.2 &nbsp&nbsp<a href="#多库迁移" class="headerlink" title="多库迁移"></a>多库迁移</h3><ol><li>在目标服务器中创建一个和源服务器数据库名称一样的数据库</li><li>菜单栏&gt;工具&gt;数据传输（填写源服务器和目标服务器的信息，例如ip访问地址）</li><li>选择保存配置文件，一一为每个数据库都进行这个操作。</li><li>菜单栏&gt;工具&gt;数据传输&gt;自动运行&gt;点击新建批处理操作&gt;点击数据传递，导入前面保存的配置文件。</li></ol><h2 id="Navicat执行查询超时">1.3 &nbsp&nbsp<a href="#Navicat执行查询超时" class="headerlink" title="Navicat执行查询超时"></a>Navicat执行查询超时</h2><p>问题：执行一段复杂的Sql，在mysql命令行下用时较长。</p><p>解决方法：做好索引再查询或者更换其他工具（例如mongodb官方工具）进行查询。</p><h1 id="参考文献">2 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 利用Navicat进行数据迁移[EB&#x2F;OL]. <a href="https://blog.csdn.net/qq_39043762/article/details/118363462">https://blog.csdn.net/qq_39043762/article/details/118363462</a>.<br>[2] Navicat导出 导入mongodb数据库（windows）[EB&#x2F;OL]. <a href="https://blog.csdn.net/zjkpy_5/article/details/123952785">https://blog.csdn.net/zjkpy_5/article/details/123952785</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Navicat&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Navicat&quot; class=&quot;headerlink&quot; title=&quot;Navicat&quot;&gt;&lt;/a&gt;Navicat&lt;/h1&gt;&lt;h2 id=&quot;mongodb导出导入&quot;&gt;1.1 &amp;nbsp&amp;nbsp&lt;a</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据库" scheme="https://mister-kin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mongodb" scheme="https://mister-kin.github.io/tags/mongodb/"/>
    
    <category term="sql" scheme="https://mister-kin.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Windows系统排障总结</title>
    <link href="https://mister-kin.github.io/troubleshooting/windows-troubleshooting/"/>
    <id>https://mister-kin.github.io/troubleshooting/windows-troubleshooting/</id>
    <published>2023-07-23T10:12:13.000Z</published>
    <updated>2023-09-18T00:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装系统">1 &nbsp&nbsp<a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1><h2 id="虚拟机将gho，esd、wim等系统镜像文件加载进pe">1.1 &nbsp&nbsp<a href="#虚拟机将gho，esd、wim等系统镜像文件加载进pe" class="headerlink" title="虚拟机将gho，esd、wim等系统镜像文件加载进pe"></a>虚拟机将gho，esd、wim等系统镜像文件加载进pe</h2><p>虚拟机中，pe系统无法安装扩展工具，因此无法通过启用共享文件夹功能和宿主机传递文件。以下方法可以给pe系统中传递文件</p><ul><li>将gho、esd、wim文件打包封装成iso文件，通过CD&#x2F;DVD虚拟机硬件加载iso文件</li><li>映射虚拟磁盘</li></ul><h2 id="使用系统镜像内部自带的Setup-exe安装">1.2 &nbsp&nbsp<a href="#使用系统镜像内部自带的Setup-exe安装" class="headerlink" title="使用系统镜像内部自带的Setup.exe安装"></a>使用系统镜像内部自带的Setup.exe安装</h2><div class="note danger no-icon"><p>WinPE不推荐用这个方法，既然都在pe中，有其他方能够更好实现，没必要使用这个。</p></div><p>一般常见于将镜像作为PE启动盘或者直接在系统内运行。</p><p>P.S.在win7-win11系统上都可以直接运行安装（一般我都是用这个方法进行大版本的更新），只不过在WinPE中我们可以删除和格式化系统分区。如果WinPE中无法运行Setup.exe，换一个未深度精简过的PE再尝试。</p><div class="note "><p>注意：在WinPE中或者直接作为启动盘，GPT分区注意要启用BIOS的UEFI启动模式，MBR分区启用BIOS的Legacy启动模式。</p></div><h2 id="PE中使用Dism安装系统镜像">1.3 &nbsp&nbsp<a href="#PE中使用Dism安装系统镜像" class="headerlink" title="PE中使用Dism安装系统镜像"></a>PE中使用Dism安装系统镜像</h2><ol><li>使用分区工具分好区</li><li>查看镜像中专业版所对应的索引index：<code>Dism /Get-ImageInfo /ImageFile:H:\sources\install.wim</code></li><li>安装镜像：<code>Dism /apply-image /imagefile:H:\sources\install.wim /index:8 /ApplyDir:W:\</code></li><li>配置启动文件：<code>bcdboot W:\Windows /s S: /f ALL</code>。MBR分区使用这条命令安装bootmgr和更新mbr：<code>bootsect /nt60 W: /mbr</code></li><li>重启机器</li></ol><h2 id="win11-OOBE安装跳过强制登录帐号">1.4 &nbsp&nbsp<a href="#win11-OOBE安装跳过强制登录帐号" class="headerlink" title="win11 OOBE安装跳过强制登录帐号"></a>win11 OOBE安装跳过强制登录帐号</h2><ul><li>拔掉网线，Shift+F10调出cmd窗口：运行：<code>oobe\BypassNRO.cmd</code>，重启继续走OOBE流程，到登录账户页面时会多出一个暂时跳过的选项。（微软似乎通过云端修改策略，该法可能无效，并且要求插网线）</li><li>输入<a href="mailto:&#x6e;&#x6f;&#x40;&#116;&#x68;&#97;&#x6e;&#107;&#121;&#111;&#x75;&#x2e;&#99;&#111;&#x6d;">&#x6e;&#x6f;&#x40;&#116;&#x68;&#97;&#x6e;&#107;&#121;&#111;&#x75;&#x2e;&#99;&#111;&#x6d;</a> 触发账户锁定，在登录里输入此账户然后随便输入个字符当做密码点登录，此时系统会弹出错误提醒，然后点击下一步，创建本地账户。</li></ul><h2 id="新主板安装win7启动报错蓝屏0x000000a5">1.5 &nbsp&nbsp<a href="#新主板安装win7启动报错蓝屏0x000000a5" class="headerlink" title="新主板安装win7启动报错蓝屏0x000000a5"></a>新主板安装win7启动报错蓝屏0x000000a5</h2><p>问题：理论上1-13代酷睿都可以安装，本质上就是驱动的支持问题（锐龙芯片也是一样）。intel酷睿芯片原生支持win7的是6代，789代可通过注入驱动方式安装（可稳定用），10代及10代以后的也可以装，十分麻烦，需要特别处理BIOS和驱动问题（否则就是无限的a5蓝屏），而且不知道能否稳定用。一般导致a5蓝屏常见也是acpi.sys驱动问题。</p><h1 id="微软商店应用">2 &nbsp&nbsp<a href="#微软商店应用" class="headerlink" title="微软商店应用"></a>微软商店应用</h1><h2 id="Win10-LTSC-2021安装微软商店MicrosoftStore">2.1 &nbsp&nbsp<a href="#Win10-LTSC-2021安装微软商店MicrosoftStore" class="headerlink" title="Win10 LTSC 2021安装微软商店MicrosoftStore"></a>Win10 LTSC 2021安装微软商店MicrosoftStore</h2><p>为Windows 10 Enterprise LTSC增加应用商店：使用Github脚本「<a href="https://github.com/GFOXSH/LTSC-Add-MicrosoftStore-2021">LTSC-Add-MicrosoftStore-2021</a>」</p><h1 id="运行库">3 &nbsp&nbsp<a href="#运行库" class="headerlink" title="运行库"></a>运行库</h1><p>详看<a href="/troubleshooting/runtime-library-repair-on-windows">《Windows平台的运行库修复》</a></p><h1 id="硬件分区数据">4 &nbsp&nbsp<a href="#硬件分区数据" class="headerlink" title="硬件分区数据"></a>硬件分区数据</h1><h2 id="数据恢复">4.1 &nbsp&nbsp<a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><p>专业数据恢复软件：PC3000</p><h1 id="注册表">5 &nbsp&nbsp<a href="#注册表" class="headerlink" title="注册表"></a>注册表</h1><p><a href="https://pecmd.net/thread-68.htm">教程：了解和掌握Windows操作系统注册表，包括在线和离线修改方法</a></p><h1 id="网络">6 &nbsp&nbsp<a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="win10-ssh客户端">6.1 &nbsp&nbsp<a href="#win10-ssh客户端" class="headerlink" title="win10 ssh客户端"></a>win10 ssh客户端</h2><p>win10 1803版本自带安装ssh客户端，可检查是否已启用。新版都自带安装客户端并自动启动。</p><p>使用：<code>ssh username@ip</code></p><h2 id="win10-服务端并允许空密码连接登录">6.2 &nbsp&nbsp<a href="#win10-服务端并允许空密码连接登录" class="headerlink" title="win10 服务端并允许空密码连接登录"></a>win10 服务端并允许空密码连接登录</h2><p>虽说新版win10已自带安装ssh客户端，但服务端需自行安装设置。</p><ol><li>设置&gt;应用&gt;应用和功能：可选功能</li><li>添加功能：OpenSSH 服务器，选择安装</li><li>管理员权限终端，开启sshd服务<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> sshd  # 开启</span><br><span class="line"><span class="built_in">net</span> stop sshd   # 关闭</span><br></pre></td></tr></table></figure></li><li>设置ssh服务自启：任务管理器&gt;服务&gt;打开服务，将「OpenSSH SSH Server」服务设置为「开机自启」</li><li>编辑文件：C:\ProgramData\ssh\sshd_config，修改如下参数，允许空密码登录：<br>修改前：<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">#PasswordAuthentication yes</span><br><span class="line">#PermitEmptyPasswords no</span><br></pre></td></tr></table></figure>修改后：<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitEmptyPasswords yes</span><br></pre></td></tr></table></figure></li><li>打开本地安全策略窗口，WIN+R：secpol.msc。本地策略 -&gt; 安全选项：在右侧选中「帐户: 使用空白密码的本地帐户只允许进行控制台登录双击进行编辑」。选择禁用选项确认。</li></ol><ul><li>程序主目录：C:\Windows\System32\OpenSSH</li><li>配置文件目录：%PROGRAMDATA%\ssh\sshd_config</li></ul><h1 id="win防火墙开启后无法被ping通">7 &nbsp&nbsp<a href="#win防火墙开启后无法被ping通" class="headerlink" title="win防火墙开启后无法被ping通"></a>win防火墙开启后无法被ping通</h1><p>两种方案：</p><ul><li>关闭防火墙：控制面板-&gt;系统和安全-&gt;Windows Defender 防火墙-&gt;启用或关闭Windows Defender防火墙-&gt;全部选择关闭Windows Defender防火墙-&gt;点击确定即可。</li><li>配置防火墙规则：控制面板-&gt;系统和安全-&gt;Windows Defender 防火墙-&gt;高级设置-&gt;入站规则-&gt;右键点击「虚拟机监控（回显请求）」所对应的两条记录（或者只启用ICMPv4-In，不启用ICMPv6-In）-&gt;点击启用规则。（如果仍然不行，继续启用「文件和打印机共享（回显请求）」，共四条）</li></ul><h2 id="网络抓包分析工具">7.1 &nbsp&nbsp<a href="#网络抓包分析工具" class="headerlink" title="网络抓包分析工具"></a>网络抓包分析工具</h2><ul><li>wireshark：抓包分析</li><li>postman：分析接口</li><li>nmap:扫描端口</li></ul><h2 id="空密码无密码账户远程桌面连接出错提示用户账户限制">7.2 &nbsp&nbsp<a href="#空密码无密码账户远程桌面连接出错提示用户账户限制" class="headerlink" title="空密码无密码账户远程桌面连接出错提示用户账户限制"></a>空密码无密码账户远程桌面连接出错提示用户账户限制</h2><p>使用远程桌面功能时，报错：&#96;用户账户限制(例如，时间限制)会阻止你登录。请与系统管理员或技术支持联系以获取帮助。</p><p>问题原因：因为被控端的远程系统的用户密码为空，且系统默认只允许空白密码的本地账户进行控制台登录。</p><p>解决方式（在被控端操作）：</p><ol><li>打开本地安全策略窗口，WIN+R：secpol.msc</li><li>本地策略 -&gt; 安全选项：在右侧选中「帐户: 使用空白密码的本地帐户只允许进行控制台登录双击进行编辑」</li><li>选择禁用选项确认。</li></ol><h2 id="win10开启远程桌面功能">7.3 &nbsp&nbsp<a href="#win10开启远程桌面功能" class="headerlink" title="win10开启远程桌面功能"></a>win10开启远程桌面功能</h2><p>设置&gt;系统&gt;远程桌面&gt;启用远程桌面</p><p>P.S. 本质上和win7的设置一样，只是在win10的设置中提供了一个接口设置。</p><h2 id="win7启用远程桌面">7.4 &nbsp&nbsp<a href="#win7启用远程桌面" class="headerlink" title="win7启用远程桌面"></a>win7启用远程桌面</h2><p>系统&gt;设置&gt;远程设置&gt;允许远程协助连接这台计算机+允许运行任意版本远程桌面的计算机连接（较不安全）。</p><p>如果依旧被拦截，点击「选择用户」，将用户名加入。</p><h2 id="删除远程桌面连接记录">7.5 &nbsp&nbsp<a href="#删除远程桌面连接记录" class="headerlink" title="删除远程桌面连接记录"></a>删除远程桌面连接记录</h2><ol><li>WIN+R键：regedit</li><li>注册表编辑器的地址栏输入地址：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default</code></li><li>删除不要的记录</li></ol><h2 id="win公用网络切换为专用网络">7.6 &nbsp&nbsp<a href="#win公用网络切换为专用网络" class="headerlink" title="win公用网络切换为专用网络"></a>win公用网络切换为专用网络</h2><p>部分情况「公用网络」的权限缩紧，不少端口都被屏蔽禁用。</p><ol><li>打开本地安全策略窗口：WIN+R：secpol.msc</li><li>网络列表管理器策略</li><li>找到需要修改的网路名称，属性窗口的网络位置标签</li><li>选择位置类型为「专用（R）」，用户权限为「用户不可以更改位置（S）」</li></ol><h1 id="语言设置">8 &nbsp&nbsp<a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h1><h2 id="欢迎屏幕和程序界面语言乱码">8.1 &nbsp&nbsp<a href="#欢迎屏幕和程序界面语言乱码" class="headerlink" title="欢迎屏幕和程序界面语言乱码"></a>欢迎屏幕和程序界面语言乱码</h2><p>设置&gt;时间和语言&gt;语言&gt;管理语言设置。</p><ul><li>欢迎屏幕乱码：复制设置。</li><li>程序界面语言乱码：非Unicode程序的语言。</li></ul><div class="flex-row"><div class="flex-column"><img data-src="/images/windows10-troubleshooting/setting-language-zones.webp">区域语言设置</div><div class="flex-column"><img data-src="/images/windows10-troubleshooting/setting-language-welcom-screen.webp">欢迎屏幕设置</div></div><h1 id="参考文献">9 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 支持win7的最后一代CPU?支持win7系统推荐(支持8&#x2F;9&#x2F;10&#x2F;11&#x2F;12&#x2F;13代cpu)[EB&#x2F;OL]. <a href="http://w7.dnxtc.net/zixun/zuzhuangjiaocheng/2023-04-16/11866.html">http://w7.dnxtc.net/zixun/zuzhuangjiaocheng/2023-04-16/11866.html</a>.<br>[2] 10代11代主板装win7开机蓝屏A5解决办法[EB&#x2F;OL]. <a href="https://www.yweihu.com/post/242.html">https://www.yweihu.com/post/242.html</a>.<br>[3] 微软又给Windows11增加了限制？[EB&#x2F;OL]. <a href="https://zhuanlan.zhihu.com/p/514063607">https://zhuanlan.zhihu.com/p/514063607</a>.<br>[4] 在虚拟机上安装gho、esd（wim）系统镜像文件[EB&#x2F;OL]. <a href="https://www.cnblogs.com/-mrl/p/9634227.html">https://www.cnblogs.com/-mrl/p/9634227.html</a>.<br>[5] Methods to install Windows from WinPE[EB&#x2F;OL]. <a href="https://www.aioboot.com/en/install-windows/">https://www.aioboot.com/en/install-windows/</a>.<br>[6] 远程桌面连接出错「用户账户限制会阻止你登录...」[EB&#x2F;OL]. <a href="https://blog.csdn.net/tian_ci/article/details/106790244">https://blog.csdn.net/tian_ci/article/details/106790244</a>.<br>[7] win10 系统怎么删除远程桌面连接记录[EB&#x2F;OL]. <a href="https://blog.csdn.net/COCO56/article/details/102671007">https://blog.csdn.net/COCO56/article/details/102671007</a>.<br>[8] 公用网络切换为专用网络的详细步骤[EB&#x2F;OL]. <a href="https://blog.csdn.net/xuzishe/article/details/110818980">https://blog.csdn.net/xuzishe/article/details/110818980</a>.<br>[9] 如何使用 Windows 自带的 OpenSSH 服务端[EB&#x2F;OL]. <a href="https://www.cnblogs.com/lfri/p/13423261.html">https://www.cnblogs.com/lfri/p/13423261.html</a>.<br>[10]【Windows】允许空密码连接 Windows 的 OpenSSH Server[EB&#x2F;OL]. <a href="https://www.jianshu.com/p/1ec72a019bd9">https://www.jianshu.com/p/1ec72a019bd9</a>.<br>[11] 解决 Windows 10 防火墙开启后无法 ping 通的问题[EB&#x2F;OL]. <a href="https://blog.csdn.net/coco56/article/details/105800213">https://blog.csdn.net/coco56/article/details/105800213</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;安装系统&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#安装系统&quot; class=&quot;headerlink&quot; title=&quot;安装系统&quot;&gt;&lt;/a&gt;安装系统&lt;/h1&gt;&lt;h2 id=&quot;虚拟机将gho，esd、wim等系统镜像文件加载进pe&quot;&gt;1.1</summary>
        
      
    
    
    
    <category term="troubleshooting" scheme="https://mister-kin.github.io/categories/troubleshooting/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="系统" scheme="https://mister-kin.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="windows" scheme="https://mister-kin.github.io/tags/windows/"/>
    
    <category term="计算机" scheme="https://mister-kin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="电脑" scheme="https://mister-kin.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="维护" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E6%8A%A4/"/>
    
    <category term="维修" scheme="https://mister-kin.github.io/tags/%E7%BB%B4%E4%BF%AE/"/>
    
    <category term="故障" scheme="https://mister-kin.github.io/tags/%E6%95%85%E9%9A%9C/"/>
    
  </entry>
  
  <entry>
    <title>Qt总结笔记</title>
    <link href="https://mister-kin.github.io/code/qt/"/>
    <id>https://mister-kin.github.io/code/qt/</id>
    <published>2023-07-21T16:10:46.000Z</published>
    <updated>2023-09-09T12:35:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt语法">1 &nbsp&nbsp<a href="#Qt语法" class="headerlink" title="Qt语法"></a>Qt语法</h1><p><a href="https://www.cnblogs.com/jfzhu/p/13501678.html">Qt信号与槽使用方法最完整总结</a></p><h1 id="Qt学习资料">2 &nbsp&nbsp<a href="#Qt学习资料" class="headerlink" title="Qt学习资料"></a>Qt学习资料</h1><ul><li><a href="https://blog.csdn.net/dengjin20104042056/article/details/115174639">Qt6系列教程汇总</a></li><li><a href="https://dengjin.blog.csdn.net/article/details/88978836">Qt学习资料汇总</a></li></ul><h1 id="Qt-Creator的总结">3 &nbsp&nbsp<a href="#Qt-Creator的总结" class="headerlink" title="Qt Creator的总结"></a>Qt Creator的总结</h1><h2 id="修改模板文件以便新建工程时默认支持C-20">3.1 &nbsp&nbsp<a href="#修改模板文件以便新建工程时默认支持C-20" class="headerlink" title="修改模板文件以便新建工程时默认支持C++20"></a>修改模板文件以便新建工程时默认支持C++20</h2><p>将以下文件中的<code>CONFIG += c++17</code>修改为<code>CONFIG += c++20</code></p><ul><li>qtcreator-11.0.0\share\qtcreator\templates\wizards\projects\consoleapp\file.pro</li><li>qtcreator-11.0.0\share\qtcreator\templates\wizards\projects\plaincpp\file.pro</li><li>qtcreator-11.0.0\share\qtcreator\templates\wizards\projects\cpplibrary\project.pro</li><li>qtcreator-11.0.0\share\qtcreator\templates\wizards\projects\qtwidgetsapplication\project.pro</li></ul><h2 id="创建工程提示找不到合适的套件">3.2 &nbsp&nbsp<a href="#创建工程提示找不到合适的套件" class="headerlink" title="创建工程提示找不到合适的套件"></a>创建工程提示找不到合适的套件</h2><p>问题：安装Qt Creator之后，在创建工程提示<code>No suitable kits found</code>.</p><p>解决：点击管理，手动设置构建套件kit的qt版本，这是通过选择qmake.exe或者qmake6.exe的路径确认。（不用重装，网上的教程都是重装或者安装在线版本包，但直接重装是无效）。</p><h1 id="Qt源码编译">4 &nbsp&nbsp<a href="#Qt源码编译" class="headerlink" title="Qt源码编译"></a>Qt源码编译</h1><h2 id="下载">4.1 &nbsp&nbsp<a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://cmake.org/download/">CMake</a></li><li><a href="https://github.com/ninja-build/ninja/releases">Ninja</a></li><li><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">MSVC CL编译器（Visual Studio 2022 生成工具）</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/">Qt源码和Qt Creator</a></li></ul><h2 id="环境配置和编译步骤">4.2 &nbsp&nbsp<a href="#环境配置和编译步骤" class="headerlink" title="环境配置和编译步骤"></a>环境配置和编译步骤</h2><p>环境变量：确保系统PATH环境变量含有CMake和Ninja路径。</p><p><em>注意不能使用ninja直接构建源码，会报错：build.ninja not found。<strong>构建是使用CMake。</strong></em></p><p>编译步骤：</p><ol><li>将源码解决到分区的根目录下，例如：<code>G:\qtbase-everywhere-src-6.5.2</code></li><li>在源码文件夹外新建一个文件夹，如<code>qtbasebuild</code>，拷贝该编译脚本进文件夹，打开cmd窗口，执行该脚本（不建议直接双击运行编译脚本，因为脚本编译出错或者执行完毕都会关闭窗口，这样无法得知编译详情）。</li></ol><h2 id="单模块逐个编译的BAT脚本">4.3 &nbsp&nbsp<a href="#单模块逐个编译的BAT脚本" class="headerlink" title="单模块逐个编译的BAT脚本"></a>单模块逐个编译的BAT脚本</h2><p>附加编译子模块的方式：运行Qt安装路径下的&#x2F;bin&#x2F;qt-configure-module.bat + 附件模块源码解压路径。</p><h3 id="编译release版本">4.3.1 &nbsp&nbsp<a href="#编译release版本" class="headerlink" title="编译release版本"></a>编译release版本</h3><h4 id="编译qtbase-release">4.3.1.1 &nbsp&nbsp<a href="#编译qtbase-release" class="headerlink" title="编译qtbase(release)"></a>编译qtbase(release)</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">CALL</span> &quot;C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2022</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&quot; x64</span><br><span class="line">..\qtbase-everywhere-src-<span class="number">6</span>.<span class="number">5</span>.<span class="number">2</span>\configure.bat -prefix C:\Qt\qt6release -c++std c++<span class="number">20</span> -release -optimize-size -shared &amp;&amp; cmake --build . --parallel &amp;&amp; cmake --install .</span><br></pre></td></tr></table></figure><h4 id="附加编译其他子模块（release）">4.3.1.2 &nbsp&nbsp<a href="#附加编译其他子模块（release）" class="headerlink" title="附加编译其他子模块（release）"></a>附加编译其他子模块（release）</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">CALL</span> &quot;C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2022</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&quot; x64</span><br><span class="line"><span class="function">C:\<span class="title">Qt</span>\<span class="title">qt6release</span>\<span class="title">bin</span>\<span class="title">qt</span>-<span class="title">configure</span>-<span class="title">module.bat</span> <span class="title">G</span>:\<span class="title">qtshadertools</span>-<span class="title">everywhere</span>-<span class="title">src</span>-6.5.2 &amp;&amp; <span class="title">cmake</span> --<span class="title">build</span> . --<span class="title">parallel</span> &amp;&amp; <span class="title">cmake</span> --<span class="title">install</span> .</span></span><br></pre></td></tr></table></figure><h3 id="编译debug版本">4.3.2 &nbsp&nbsp<a href="#编译debug版本" class="headerlink" title="编译debug版本"></a>编译debug版本</h3><h4 id="编译qtbase-debug">4.3.2.1 &nbsp&nbsp<a href="#编译qtbase-debug" class="headerlink" title="编译qtbase(debug)"></a>编译qtbase(debug)</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">CALL</span> &quot;C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2022</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&quot; x64</span><br><span class="line">..\qtbase-everywhere-src-<span class="number">6</span>.<span class="number">5</span>.<span class="number">2</span>\configure.bat -prefix C:\Qt\qt6debug -c++std c++<span class="number">20</span> -debug -shared &amp;&amp; cmake --build . --parallel &amp;&amp; cmake --install .</span><br></pre></td></tr></table></figure><h4 id="附加编译其他子模块（debug）">4.3.2.2 &nbsp&nbsp<a href="#附加编译其他子模块（debug）" class="headerlink" title="附加编译其他子模块（debug）"></a>附加编译其他子模块（debug）</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">CALL</span> &quot;C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2022</span>\BuildTools\VC\Auxiliary\Build\vcvarsall.bat&quot; x64</span><br><span class="line"><span class="function">C:\<span class="title">Qt</span>\<span class="title">qt6debug</span>\<span class="title">bin</span>\<span class="title">qt</span>-<span class="title">configure</span>-<span class="title">module.bat</span> ..\<span class="title">qtshadertools</span>-<span class="title">everywhere</span>-<span class="title">src</span>-6.5.2 &amp;&amp; <span class="title">cmake</span> --<span class="title">build</span> . --<span class="title">parallel</span> &amp;&amp; <span class="title">cmake</span> --<span class="title">install</span> .</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="编译遇到的坑">4.4 &nbsp&nbsp<a href="#编译遇到的坑" class="headerlink" title="编译遇到的坑"></a>编译遇到的坑</h2><h3 id="系统PATH环境变量含有CL路径，但终端手动编译时依旧报错">4.4.1 &nbsp&nbsp<a href="#系统PATH环境变量含有CL路径，但终端手动编译时依旧报错" class="headerlink" title="系统PATH环境变量含有CL路径，但终端手动编译时依旧报错"></a>系统PATH环境变量含有CL路径，但终端手动编译时依旧报错</h3><p>问题：系统PATH环境变量含有CL路径，直接输入cl可以查询到该命令。但终端手动编译时依旧出错，cmake等操作无法正常运行。</p><p>解决方式：需要在MSVC Cl初始化环境的情况下编译。不能使用普通终端运行，虽然系统PATH有添加可识别CL命令，但是CL相关环境变量只能通过vcvarsall.bat设置，例如<code>vcvarsall.bat x64</code>。</p><h3 id="无法写入源文件更新的清单">4.4.2 &nbsp&nbsp<a href="#无法写入源文件更新的清单" class="headerlink" title="无法写入源文件更新的清单"></a>无法写入源文件更新的清单</h3><p>报错信息：<code>mt.exe : general error c101008d: Failed to write the updated manifest to the resource of file</code></p><p>解决方法：多线程编译偶尔引起的现象，重新运行编译脚本命令即可。（个人见解：多线程编译引起资源阻塞，导致写入失败）</p><h3 id="找不到qtshadertools-qsb-工具">4.4.3 &nbsp&nbsp<a href="#找不到qtshadertools-qsb-工具" class="headerlink" title="找不到qtshadertools &#39;qsb&#39;工具"></a>找不到qtshadertools &#39;qsb&#39;工具</h3><p>报错信息：<code>Note: Qt Quick modules not built due to not finding the qtshadertools &#39;qsb&#39; tool.</code></p><p>解决方法：qtdeclarative模块依赖于qtshadertools模块，需要先编译安装好qtshadertools，之后再编译安装qtdeclarative。</p><h3 id="optimize-size选项导致编译中断">4.4.4 &nbsp&nbsp<a href="#optimize-size选项导致编译中断" class="headerlink" title="optimize_size选项导致编译中断"></a>optimize_size选项导致编译中断</h3><p>报错信息：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ERROR: <span class="title">Feature</span> &quot;<span class="title">optimize_size</span>&quot;: <span class="title">Forcing</span> <span class="title">to</span> &quot;<span class="title">ON</span>&quot; <span class="title">breaks</span> <span class="title">its</span> <span class="title">condition</span>:</span></span><br><span class="line"><span class="function">    <span class="title">NOT</span> <span class="title">QT_FEATURE_debug</span> <span class="title">OR</span> <span class="title">QT_FEATURE_debug_and_release</span></span></span><br><span class="line"><span class="function"><span class="title">Condition</span> <span class="title">values</span> <span class="title">dump</span>:</span></span><br><span class="line"><span class="function">    <span class="title">QT_FEATURE_debug</span> = &quot;<span class="title">ON</span>&quot;</span></span><br><span class="line"><span class="function">    <span class="title">QT_FEATURE_debug_and_release</span> = &quot;<span class="title">OFF</span>&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">CMake</span> <span class="title">Error</span> <span class="title">at</span> <span class="title">cmake</span>/<span class="title">QtBuildInformation.cmake</span>:194 (<span class="title">message</span>):</span></span><br><span class="line"><span class="function">  <span class="title">Check</span> <span class="title">the</span> <span class="title">configuration</span> <span class="title">messages</span> <span class="title">for</span> <span class="title">an</span> <span class="title">error</span> <span class="title">that</span> <span class="title">has</span> <span class="title">occurred</span>.</span></span><br><span class="line"><span class="function"><span class="title">Call</span> <span class="title">Stack</span> (<span class="title">most</span> <span class="title">recent</span> <span class="title">call</span> <span class="title">first</span>):</span></span><br><span class="line"><span class="function">  <span class="title">cmake</span>/<span class="title">QtBuildInformation.cmake</span>:24 (<span class="title">qt_configure_print_summary</span>)</span></span><br><span class="line"><span class="function">  <span class="title">cmake</span>/<span class="title">QtBuildInternals</span>/<span class="title">QtBuildInternalsConfig.cmake</span>:548 (<span class="title">qt_print_feature_summary</span>)</span></span><br><span class="line"><span class="function">  <span class="title">CMakeLists.txt</span>:198 (<span class="title">qt_build_repo_end</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">-- <span class="title">Configuring</span> <span class="title">incomplete</span>, <span class="title">errors</span> <span class="title">occurred</span>!</span></span><br><span class="line"><span class="function"><span class="title">CMake</span> <span class="title">Error</span> <span class="title">at</span> <span class="title">G</span>:/<span class="title">qtbase</span>-<span class="title">everywhere</span>-<span class="title">src</span>-6.5.2/<span class="title">cmake</span>/<span class="title">QtProcessConfigureArgs.cmake</span>:995 (<span class="title">message</span>):</span></span><br><span class="line"><span class="function">  <span class="title">CMake</span> <span class="title">exited</span> <span class="title">with</span> <span class="title">code</span> 1.</span></span><br></pre></td></tr></table></figure><p>解决方法：这是因为在64位的系统上选择x32的编译器引起的错误。根据自己的平台选择对应的编译器，例如，MSVC CL编译器的x64环境，否则启用optimize_size选项有相关报错信息。当然，不启用该选项的话，可正常编译，但得不偿失。</p><h3 id="链接lib文件出现错误LNK2019">4.4.5 &nbsp&nbsp<a href="#链接lib文件出现错误LNK2019" class="headerlink" title="链接lib文件出现错误LNK2019"></a>链接lib文件出现错误LNK2019</h3><p>问题：链接lib文件报错，error LNK2019: 无法解析的外部符号。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- Configuring done (<span class="number">10</span>.<span class="number">5</span>s)</span><br><span class="line">-- Generating done (<span class="number">2</span>.<span class="number">6</span>s)</span><br><span class="line">-- Build files have been written to: G:/qtdeclarative</span><br><span class="line">[<span class="number">1569</span>/<span class="number">4804</span>] Linking CXX shared library bin\Qt6QmlXmlListModeld.dll</span><br><span class="line"><span class="function">FAILED: <span class="title">bin</span>/<span class="title">Qt6QmlXmlListModeld.dll</span> <span class="title">lib</span>/<span class="title">Qt6QmlXmlListModeld.lib</span></span></span><br><span class="line"><span class="function"><span class="title">cmd.exe</span> /<span class="title">C</span> &quot;<span class="title">cd</span> . &amp;&amp; &quot;<span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">CMake</span>\<span class="title">bin</span>\<span class="title">cmake.exe</span>&quot; -<span class="title">E</span> <span class="title">vs_link_dll</span> --<span class="title">intdir</span>=<span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span> --<span class="title">rc</span>=&quot;<span class="title">C</span>:\<span class="title">PROGRA</span>~2\<span class="title">Windows</span> <span class="title">Kits</span>\10\<span class="title">bin</span>\10.0.22621.0\<span class="title">x64</span>\<span class="title">rc.exe</span>&quot; --<span class="title">mt</span>=&quot;<span class="title">C</span>:\<span class="title">PROGRA</span>~2\<span class="title">Windows</span> <span class="title">Kits</span>\10\<span class="title">bin</span>\10.0.22621.0\<span class="title">x64</span>\<span class="title">mt.exe</span>&quot; --<span class="title">manifests</span>  -- &quot;<span class="title">C</span>:\<span class="title">PROGRA</span>~2\<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span>\2022\<span class="title">BuildTools</span>\<span class="title">VC</span>\<span class="title">Tools</span>\<span class="title">MSVC</span>\14.36.32532\<span class="title">bin</span>\<span class="title">Hostx64</span>\<span class="title">x64</span>\<span class="title">link.exe</span>&quot; /<span class="title">nologo</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">QmlXmlListModel_autogen</span>\<span class="title">mocs_compilation_Debug.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">cmake_pch.cxx.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">Debug</span>\<span class="title">QmlXmlListModel_resource.rc.res</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">qqmlxmllistmodel.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">qmlxmllistmodel_qmltyperegistrations.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug.rcc</span>\<span class="title">qrc_qmake_QtQml_XmlListModel.cpp.obj</span>  /<span class="title">out:bin</span>\<span class="title">Qt6QmlXmlListModeld.dll</span> /<span class="title">implib:lib</span>\<span class="title">Qt6QmlXmlListModeld.lib</span> /<span class="title">pdb:bin</span>\<span class="title">Qt6QmlXmlListModeld.pdb</span> /<span class="title">dll</span> /<span class="title">version</span>:6.5 /<span class="title">machine:x64</span> /<span class="title">debug</span>  -<span class="title">DYNAMICBASE</span> -<span class="title">NXCOMPAT</span> -<span class="title">LARGEADDRESSAWARE</span>  <span class="title">lib</span>\<span class="title">Qt6QmlModelsd.lib</span>  <span class="title">lib</span>\<span class="title">Qt6Qmld.lib</span>  <span class="title">C</span>:\<span class="title">Qt</span>\<span class="title">qt6</span>\<span class="title">lib</span>\<span class="title">Qt6Network.lib</span>  <span class="title">C</span>:\<span class="title">Qt</span>\<span class="title">qt6</span>\<span class="title">lib</span>\<span class="title">Qt6Core.lib</span>  <span class="title">mpr.lib</span>  <span class="title">userenv.lib</span>  <span class="title">ws2_32.lib</span>  <span class="title">shell32.lib</span>  <span class="title">kernel32.lib</span> <span class="title">user32.lib</span> <span class="title">gdi32.lib</span> <span class="title">winspool.lib</span> <span class="title">shell32.lib</span> <span class="title">ole32.lib</span> <span class="title">oleaut32.lib</span> <span class="title">uuid.lib</span> <span class="title">comdlg32.lib</span> <span class="title">advapi32.lib</span>  &amp;&amp; <span class="title">cd</span> .&quot;</span></span><br><span class="line"><span class="function"><span class="title">LINK</span>: <span class="title">command</span> &quot;<span class="title">C</span>:\<span class="title">PROGRA</span>~2\<span class="title">Microsoft</span> <span class="title">Visual</span> <span class="title">Studio</span>\2022\<span class="title">BuildTools</span>\<span class="title">VC</span>\<span class="title">Tools</span>\<span class="title">MSVC</span>\14.36.32532\<span class="title">bin</span>\<span class="title">Hostx64</span>\<span class="title">x64</span>\<span class="title">link.exe</span> /<span class="title">nologo</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">QmlXmlListModel_autogen</span>\<span class="title">mocs_compilation_Debug.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">cmake_pch.cxx.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">Debug</span>\<span class="title">QmlXmlListModel_resource.rc.res</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">qqmlxmllistmodel.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug</span>\<span class="title">qmlxmllistmodel_qmltyperegistrations.cpp.obj</span> <span class="title">src</span>\<span class="title">qmlxmllistmodel</span>\<span class="title">CMakeFiles</span>\<span class="title">QmlXmlListModel.dir</span>\<span class="title">Debug.rcc</span>\<span class="title">qrc_qmake_QtQml_XmlListModel.cpp.obj</span> /<span class="title">out:bin</span>\<span class="title">Qt6QmlXmlListModeld.dll</span> /<span class="title">implib:lib</span>\<span class="title">Qt6QmlXmlListModeld.lib</span> /<span class="title">pdb:bin</span>\<span class="title">Qt6QmlXmlListModeld.pdb</span> /<span class="title">dll</span> /<span class="title">version</span>:6.5 /<span class="title">machine:x64</span> /<span class="title">debug</span> -<span class="title">DYNAMICBASE</span> -<span class="title">NXCOMPAT</span> -<span class="title">LARGEADDRESSAWARE</span> <span class="title">lib</span>\<span class="title">Qt6QmlModelsd.lib</span> <span class="title">lib</span>\<span class="title">Qt6Qmld.lib</span> <span class="title">C</span>:\<span class="title">Qt</span>\<span class="title">qt6</span>\<span class="title">lib</span>\<span class="title">Qt6Network.lib</span> <span class="title">C</span>:\<span class="title">Qt</span>\<span class="title">qt6</span>\<span class="title">lib</span>\<span class="title">Qt6Core.lib</span> <span class="title">mpr.lib</span> <span class="title">userenv.lib</span> <span class="title">ws2_32.lib</span> <span class="title">shell32.lib</span> <span class="title">kernel32.lib</span> <span class="title">user32.lib</span> <span class="title">gdi32.lib</span> <span class="title">winspool.lib</span> <span class="title">shell32.lib</span> <span class="title">ole32.lib</span> <span class="title">oleaut32.lib</span> <span class="title">uuid.lib</span> <span class="title">comdlg32.lib</span> <span class="title">advapi32.lib</span> /<span class="title">MANIFEST</span> /<span class="title">MANIFESTFILE:bin</span>\<span class="title">Qt6QmlXmlListModeld.dll.manifest</span>&quot; <span class="title">failed</span> (<span class="title">exit</span> <span class="title">code</span> 1120) <span class="title">with</span> <span class="title">the</span> <span class="title">following</span> <span class="title">output</span>:</span></span><br><span class="line"><span class="function">正在创建库 <span class="title">lib</span>\<span class="title">Qt6QmlXmlListModeld.lib</span> 和对象 <span class="title">lib</span>\<span class="title">Qt6QmlXmlListModeld.exp</span></span></span><br><span class="line"><span class="function"><span class="title">qqmlxmllistmodel.cpp.obj</span> : <span class="title">error</span> <span class="title">LNK2019</span>: 无法解析的外部符号 &quot;<span class="title">__declspec</span>(<span class="title">dllimport</span>) <span class="title">public</span>: <span class="title">__cdecl</span> <span class="title">QtPrivate</span>::<span class="title">ResultIteratorBase</span>::~<span class="title">ResultIteratorBase</span>(<span class="title">void</span>)&quot; (<span class="title">_imp</span>??1<span class="title">ResultIteratorBase</span>@<span class="title">QtPrivate</span>@@<span class="title">QEAA</span>@<span class="title">XZ</span>)，函数 &quot;<span class="title">public</span>: <span class="title">struct</span> <span class="title">QQmlXmlListModelQueryResult</span> <span class="title">const</span> &amp; <span class="title">__cdecl</span> <span class="title">QFutureInterface</span>&lt;<span class="title">struct</span> <span class="title">QQmlXmlListModelQueryResult</span>&gt;::<span class="title">resultReference</span>(<span class="title">int</span>)<span class="title">const</span> &quot; (?<span class="title">resultReference</span>@?$<span class="title">QFutureInterface</span>@<span class="title">UQQmlXmlListModelQueryResult</span>@@@@<span class="title">QEBAAEBUQQmlXmlListModelQueryResult</span>@@<span class="title">H</span>@<span class="title">Z</span>) 中引用了该符号</span></span><br><span class="line"><span class="function"><span class="title">bin</span>\<span class="title">Qt6QmlXmlListModeld.dll</span> : <span class="title">fatal</span> <span class="title">error</span> <span class="title">LNK1120</span>: 1 个无法解析的外部命令</span></span><br><span class="line"><span class="function">[1598/4804] <span class="title">Automatic</span> <span class="title">MOC</span> <span class="title">for</span> <span class="title">target</span> <span class="title">Quick</span></span></span><br><span class="line"><span class="function"><span class="title">ninja</span>: <span class="title">build</span> <span class="title">stopped</span>: <span class="title">subcommand</span> <span class="title">failed</span>.</span></span><br></pre></td></tr></table></figure><p>解决方式：这是启用debug-and-release编译源码导致的，debug和release同时编译易出问题，因此建议分开编译。</p><h3 id="编译的字符报错或者其他问题">4.4.6 &nbsp&nbsp<a href="#编译的字符报错或者其他问题" class="headerlink" title="编译的字符报错或者其他问题"></a>编译的字符报错或者其他问题</h3><p>问题：编译可能提示找不到路径或者字符报错等其他问题，可能是由于中文路径引起。</p><p>解决方式：路径中不要含有中文字符，可以在磁盘根目录下操作，这样可保证路径总字符不会很多。</p><h2 id="Qt各模块的介绍及其依赖项：">4.5 &nbsp&nbsp<a href="#Qt各模块的介绍及其依赖项：" class="headerlink" title="Qt各模块的介绍及其依赖项："></a>Qt各模块的介绍及其依赖项：</h2><table><thead><tr><th>Module</th><th>Required submodules</th><th>Development packages required</th><th>Description</th></tr></thead><tbody><tr><td>qtbase</td><td></td><td></td><td>Qt core, start with this.</td></tr><tr><td>qtimageformats</td><td></td><td>libmng-dev</td><td>Support for loading various extra image formats <br> <br> TIFF, MNG, WebP</td></tr><tr><td>qtsvg</td><td></td><td></td><td>Support for SVG vector graphics</td></tr><tr><td>qtshadertools</td><td></td><td></td><td>Tools for the cross-platform Qt shader pipeline</td></tr><tr><td>qttools</td><td>qtdeclarative</td><td>QDoc requires clang to be installed (See section about documentation above): <br> <br> clang-11 libclang-11-dev libclang-common-11-dev</td><td>Various Qt tools: <br> <strong>QtAssistant</strong> <br> Qt Designer <br> Qt Linguist <br> <strong>QDoc</strong> <br> etc</td></tr><tr><td>qtserialbus</td><td></td><td></td><td>Serial bus (CAN bus, ModBus) support</td></tr><tr><td>qtserialport</td><td>qtserialbus</td><td></td><td>Serial port support</td></tr><tr><td>qtlocation</td><td>qtserialport</td><td></td><td>Positioning (GPS) and location (Map) services</td></tr><tr><td>qtdeclarative</td><td>qtshadertools</td><td></td><td>Qt Quick &#x2F; QML</td></tr><tr><td>qtmultimedia</td><td>qtdeclarative</td><td>For ffmpeg backend (prefered backend since 6.5): <br> ffmpeg libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev <br> <br>  For gstreamer backend: <br> libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad libgstreamer-plugins-bad1.0-dev gstreamer1.0-pulseaudio gstreamer1.0-tools gstreamer1.0-alsa <br> <br> For pulseaudio support: <br> pulseaudio libpulse-dev <br> <br> For plain ALSA: <br> libasound2-dev</td><td>Multimedia (audio&#x2F;video) support <br> Audio play, record <br> Video play <br> Video input, capture</td></tr><tr><td>qt3d</td><td></td><td></td><td></td></tr><tr><td>qtquick3d</td><td></td><td></td><td>A high-level API for creating 3D content and 3D user interfaces based on Qt Quick</td></tr><tr><td>qtquick3dphysics</td><td></td><td></td><td>A physics engine for use with Qt Quick 3D</td></tr><tr><td>qtdatavis3d</td><td></td><td></td><td></td></tr><tr><td>qtsensors</td><td>qtmultimedia</td><td></td><td>Support for various device sensors</td></tr><tr><td>qtnetworkauth</td><td></td><td></td><td>Network authentication protocol support (OAuth)</td></tr><tr><td>qtconnectivity</td><td></td><td>bluez libbluetooth-dev</td><td>Bluetooth and NFC connectivity support</td></tr><tr><td>qtwebsockets</td><td>qtdeclarative</td><td></td><td>Websockets support</td></tr><tr><td>qtcharts</td><td>qtdeclarative</td><td></td><td>Charting controls</td></tr><tr><td>qtwayland</td><td></td><td>libwayland-dev</td><td>Wayland support</td></tr><tr><td>qtvirtualkeyboard</td><td>qtsvg</td><td></td><td>Provides on-screen keyboard</td></tr><tr><td>qtwebengine</td><td>qtdeclarative</td><td>flex bison gperf libre2-dev libnss3-dev nodejs libdrm-dev libxdamage-dev libsnappy-dev</td><td>WebEngine.</td></tr><tr><td>qtgrpc</td><td></td><td></td><td>Support for gRPC</td></tr><tr><td>qthttpserver</td><td></td><td></td><td>Qt HTTP Server</td></tr><tr><td>qtspeech</td><td></td><td></td><td>Text To Speech with Flite</td></tr><tr><td>qt5compat</td><td></td><td></td><td>Unsupported Qt 5 compatibility code.</td></tr></tbody></table><h1 id="Qt的许可协议和费用问题">5 &nbsp&nbsp<a href="#Qt的许可协议和费用问题" class="headerlink" title="Qt的许可协议和费用问题"></a>Qt的许可协议和费用问题</h1><p>使用LGPL协议开发闭源程序，若使用动态链接的形式，可以以任何形式发布应用程序，只需声明使用Qt开发即可。</p><h1 id="参考资料">6 &nbsp&nbsp<a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Building Qt 6.5 submodules[EB&#x2F;OL]. <a href="https://www.tal.org/tutorials/building-qt-65-sub-modules">https://www.tal.org/tutorials/building-qt-65-sub-modules</a>.<br>[2] 用 VS Code 搞 Qt6：编译附加模块[EB&#x2F;OL]. <a href="https://www.cnblogs.com/tcjiaan/p/16575655.html">https://www.cnblogs.com/tcjiaan/p/16575655.html</a>.<br>[3] Building Qt 6 from Git[EB&#x2F;OL]. <a href="https://wiki.qt.io/Building_Qt_6_from_Git">https://wiki.qt.io/Building_Qt_6_from_Git</a>.<br>[4] Obligations of the GPL and LGPL[EB&#x2F;OL]. <a href="https://www.qt.io/licensing/open-source-lgpl-obligations">https://www.qt.io/licensing/open-source-lgpl-obligations</a>.<br>[5] Qt 收费吗？[EB&#x2F;OL]. <a href="https://blog.csdn.net/csyounth/article/details/7347182">https://blog.csdn.net/csyounth/article/details/7347182</a>.<br>[6] Qt 的开源版本与商业版区别及 LGPL 与闭源程序[EB&#x2F;OL]. <a href="https://blog.csdn.net/heli200482128/article/details/79305245">https://blog.csdn.net/heli200482128/article/details/79305245</a>.<br>[7] Qt5 怎么最小化编译，只编译 qtbase[EB&#x2F;OL]. <a href="https://blog.csdn.net/jhkwei/article/details/107949403">https://blog.csdn.net/jhkwei/article/details/107949403</a>.<br>[8] Qt 5.15.0 编译指南[EB&#x2F;OL]. <a href="https://blog.csdn.net/zxjohnson/article/details/106621457">https://blog.csdn.net/zxjohnson/article/details/106621457</a>.<br>[9] 在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本[EB&#x2F;OL]. <a href="https://xmuli.tech/posts/8b05b275/">https://xmuli.tech/posts/8b05b275/</a>.<br>[10] 愿编程不再乱码 (含 Qt)-根因深究[EB&#x2F;OL]. <a href="https://ifmet.cn/posts/c0862e62/">https://ifmet.cn/posts/c0862e62/</a>.<br>[11] QT error: LNK2019: 无法解析的外部符号“__declspec(dllimport) public:[EB&#x2F;OL]. <a href="https://blog.csdn.net/lifuran156/article/details/118935649">https://blog.csdn.net/lifuran156/article/details/118935649</a>.<br>[12] error LNK2019: 无法解析的外部符号”__declspec(dllimport)[EB&#x2F;OL]. <a href="https://www.cnblogs.com/lihaozy/archive/2012/07/05/2577512.html">https://www.cnblogs.com/lihaozy/archive/2012/07/05/2577512.html</a>.<br>[13] 配置Qt新建工程时默认支持C++14或C++17[EB&#x2F;OL]. <a href="https://blog.csdn.net/no_say_you_know/article/details/121924999">https://blog.csdn.net/no_say_you_know/article/details/121924999</a>.<br>[14] 首次安装Qt后，创建项目时出现“No valid kits found” 的解决办法[EB&#x2F;OL]. <a href="https://codeantenna.com/a/Mc08ZG5tEW">https://codeantenna.com/a/Mc08ZG5tEW</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Qt语法&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Qt语法&quot; class=&quot;headerlink&quot; title=&quot;Qt语法&quot;&gt;&lt;/a&gt;Qt语法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/jfzhu/p/13501678.html&quot;&gt;Qt信号与槽使用方法最完整总结&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Qt学习资料&quot;&gt;2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Qt学习资料&quot; class=&quot;headerlink&quot; title=&quot;Qt学习资料&quot;&gt;&lt;/a&gt;Qt学习资料&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/dengjin20104042056/article/details/115174639&quot;&gt;Qt6系列教程汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dengjin.blog.csdn.net/article/details/88978836&quot;&gt;Qt学习资料汇总&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Qt-Creator的总结&quot;&gt;3 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Qt-Creator的总结&quot; class=&quot;headerlink&quot; title=&quot;Qt Creator的总结&quot;&gt;&lt;/a&gt;Qt Creator的总结&lt;/h1&gt;&lt;h2 id=&quot;修改模板文件以便新建工程时默认支持C-20&quot;&gt;3.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#修改模板文件以便新建工程时默认支持C-20&quot; class=&quot;headerlink&quot; title=&quot;修改模板文件以便新建工程时默认支持C++20&quot;&gt;&lt;/a&gt;修改模板文件以便新建工程时默认支持C++20&lt;/h2&gt;&lt;p&gt;将以下文件中的&lt;code&gt;CONFIG += c++17&lt;/code&gt;修改为&lt;code&gt;CONFIG += c++20&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;qtcreator-11.0.0&#92;share&#92;qtcreator&#92;templates&#92;wizards&#92;projects&#92;consoleapp&#92;file.pro&lt;/li&gt;
&lt;li&gt;qtcreator-11.0.0&#92;share&#92;qtcreator&#92;templates&#92;wizards&#92;projects&#92;plaincpp&#92;file.pro&lt;/li&gt;
&lt;li&gt;qtcreator-11.0.0&#92;share&#92;qtcreator&#92;templates&#92;wizards&#92;projects&#92;cpplibrary&#92;project.pro&lt;/li&gt;
&lt;li&gt;qtcreator-11.0.0&#92;share&#92;qtcreator&#92;templates&#92;wizards&#92;projects&#92;qtwidgetsapplication&#92;project.pro&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建工程提示找不到合适的套件&quot;&gt;3.2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#创建工程提示找不到合适的套件&quot; class=&quot;headerlink&quot; title=&quot;创建工程提示找不到合适的套件&quot;&gt;&lt;/a&gt;创建工程提示找不到合适的套件&lt;/h2&gt;&lt;p&gt;问题：安装Qt Creator之后，在创建工程提示&lt;code&gt;No suitable kits found&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;解决：点击管理，手动设置构建套件kit的qt版本，这是通过选择qmake.exe或者qmake6.exe的路径确认。（不用重装，网上的教程都是重装或者安装在线版本包，但直接重装是无效）。&lt;/p&gt;
&lt;h1 id=&quot;Qt源码编译&quot;&gt;4 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Qt源码编译&quot; class=&quot;headerlink&quot; title=&quot;Qt源码编译&quot;&gt;&lt;/a&gt;Qt源码编译&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;4.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cmake.org/download/&quot;&gt;CMake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ninja-build/ninja/releases&quot;&gt;Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://visualstudio.microsoft.com/zh-hans/downloads/&quot;&gt;MSVC CL编译器（Visual Studio 2022 生成工具）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/qt/official_releases/&quot;&gt;Qt源码和Qt Creator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;环境配置和编译步骤&quot;&gt;4.2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#环境配置和编译步骤&quot; class=&quot;headerlink&quot; title=&quot;环境配置和编译步骤&quot;&gt;&lt;/a&gt;环境配置和编译步骤&lt;/h2&gt;&lt;p&gt;环境变量：确保系统PATH环境变量含有CMake和Ninja路径。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意不能使用ninja直接构建源码，会报错：build.ninja not found。&lt;strong&gt;构建是使用CMake。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;编译步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将源码解决到分区的根目录下，例如：&lt;code&gt;G:&#92;qtbase-everywhere-src-6.5.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在源码文件夹外新建一个文件夹，如&lt;code&gt;qtbasebuild&lt;/code&gt;，拷贝该编译脚本进文件夹，打开cmd窗口，执行该脚本（不建议直接双击运行编译脚本，因为脚本编译出错或者执行完毕都会关闭窗口，这样无法得知编译详情）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;单模块逐个编译的BAT脚本&quot;&gt;4.3 &amp;nbsp&amp;nbsp&lt;a href=&quot;#单模块逐个编译的BAT脚本&quot; class=&quot;headerlink&quot; title=&quot;单模块逐个编译的BAT脚本&quot;&gt;&lt;/a&gt;单模块逐个编译的BAT脚本&lt;/h2&gt;&lt;p&gt;附加编译子模块的方式：运行Qt安装路径下的&amp;#x2F;bin&amp;#x2F;qt-configure-module.bat + 附件模块源码解压路径。&lt;/p&gt;
&lt;h3 id=&quot;编译release版本&quot;&gt;4.3.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#编译release版本&quot; class=&quot;headerlink&quot; title=&quot;编译release版本&quot;&gt;&lt;/a&gt;编译release版本&lt;/h3&gt;&lt;h4 id=&quot;编译qtbase-release&quot;&gt;4.3.1.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#编译qtbase-release&quot; class=&quot;headerlink&quot; title=&quot;编译qtbase(release)&quot;&gt;&lt;/a&gt;编译qtbase(release)&lt;/h4&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65001&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt; &amp;quot;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio&#92;&lt;span class=&quot;number&quot;&gt;2022&lt;/span&gt;&#92;BuildTools&#92;VC&#92;Auxiliary&#92;Build&#92;vcvarsall.bat&amp;quot; x64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..&#92;qtbase-everywhere-src-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&#92;configure.bat -prefix C:&#92;Qt&#92;qt6release -c++std c++&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; -release -optimize-size -shared &amp;amp;&amp;amp; cmake --build . --parallel &amp;amp;&amp;amp; cmake --install .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;附加编译其他子模块（release）&quot;&gt;4.3.1.2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#附加编译其他子模块（release）&quot; class=&quot;headerlink&quot; title=&quot;附加编译其他子模块（release）&quot;&gt;&lt;/a&gt;附加编译其他子模块（release）&lt;/h4&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65001&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt; &amp;quot;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio&#92;&lt;span class=&quot;number&quot;&gt;2022&lt;/span&gt;&#92;BuildTools&#92;VC&#92;Auxiliary&#92;Build&#92;vcvarsall.bat&amp;quot; x64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;C:&#92;&lt;span class=&quot;title&quot;&gt;Qt&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;qt6release&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;bin&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;qt&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;module.bat&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;G&lt;/span&gt;:&#92;&lt;span class=&quot;title&quot;&gt;qtshadertools&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;everywhere&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;src&lt;/span&gt;-6.5.2 &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;cmake&lt;/span&gt; --&lt;span class=&quot;title&quot;&gt;build&lt;/span&gt; . --&lt;span class=&quot;title&quot;&gt;parallel&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;cmake&lt;/span&gt; --&lt;span class=&quot;title&quot;&gt;install&lt;/span&gt; .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;编译debug版本&quot;&gt;4.3.2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#编译debug版本&quot; class=&quot;headerlink&quot; title=&quot;编译debug版本&quot;&gt;&lt;/a&gt;编译debug版本&lt;/h3&gt;&lt;h4 id=&quot;编译qtbase-debug&quot;&gt;4.3.2.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#编译qtbase-debug&quot; class=&quot;headerlink&quot; title=&quot;编译qtbase(debug)&quot;&gt;&lt;/a&gt;编译qtbase(debug)&lt;/h4&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65001&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt; &amp;quot;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio&#92;&lt;span class=&quot;number&quot;&gt;2022&lt;/span&gt;&#92;BuildTools&#92;VC&#92;Auxiliary&#92;Build&#92;vcvarsall.bat&amp;quot; x64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..&#92;qtbase-everywhere-src-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&#92;configure.bat -prefix C:&#92;Qt&#92;qt6debug -c++std c++&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; -debug -shared &amp;amp;&amp;amp; cmake --build . --parallel &amp;amp;&amp;amp; cmake --install .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;附加编译其他子模块（debug）&quot;&gt;4.3.2.2 &amp;nbsp&amp;nbsp&lt;a href=&quot;#附加编译其他子模块（debug）&quot; class=&quot;headerlink&quot; title=&quot;附加编译其他子模块（debug）&quot;&gt;&lt;/a&gt;附加编译其他子模块（debug）&lt;/h4&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65001&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CALL&lt;/span&gt; &amp;quot;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio&#92;&lt;span class=&quot;number&quot;&gt;2022&lt;/span&gt;&#92;BuildTools&#92;VC&#92;Auxiliary&#92;Build&#92;vcvarsall.bat&amp;quot; x64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;C:&#92;&lt;span class=&quot;title&quot;&gt;Qt&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;qt6debug&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;bin&lt;/span&gt;&#92;&lt;span class=&quot;title&quot;&gt;qt&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;module.bat&lt;/span&gt; ..&#92;&lt;span class=&quot;title&quot;&gt;qtshadertools&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;everywhere&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;src&lt;/span&gt;-6.5.2 &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;cmake&lt;/span&gt; --&lt;span class=&quot;title&quot;&gt;build&lt;/span&gt; . --&lt;span class=&quot;title&quot;&gt;parallel&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;title&quot;&gt;cmake&lt;/span&gt; --&lt;span class=&quot;title&quot;&gt;install&lt;/span&gt; .&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="编译" scheme="https://mister-kin.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="qt" scheme="https://mister-kin.github.io/tags/qt/"/>
    
    <category term="gui" scheme="https://mister-kin.github.io/tags/gui/"/>
    
    <category term="源码" scheme="https://mister-kin.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
    <category term="qt creator" scheme="https://mister-kin.github.io/tags/qt-creator/"/>
    
    <category term="界面开发" scheme="https://mister-kin.github.io/tags/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Bat语法总结笔记</title>
    <link href="https://mister-kin.github.io/code/bat/"/>
    <id>https://mister-kin.github.io/code/bat/</id>
    <published>2023-07-21T15:33:28.000Z</published>
    <updated>2023-07-23T20:50:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用法示例">1 &nbsp&nbsp<a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><h2 id="检测并获取管理员权限">1.1 &nbsp&nbsp<a href="#检测并获取管理员权限" class="headerlink" title="检测并获取管理员权限"></a>检测并获取管理员权限</h2><h3 id="方式一：使用cacls工具检测权限">1.1.1 &nbsp&nbsp<a href="#方式一：使用cacls工具检测权限" class="headerlink" title="方式一：使用cacls工具检测权限"></a>方式一：使用cacls工具检测权限</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">title</span> 自动激活系统 &amp; <span class="built_in">color</span> F0</span><br><span class="line"><span class="built_in">cd</span> /d &quot;%~dp0&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 查询当前终端窗口的列数大小</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span> delims=: &quot; <span class="variable">%%c</span> <span class="keyword">in</span> (&#x27;<span class="built_in">mode</span> <span class="built_in">con</span> ^| <span class="built_in">findstr</span> Columns&#x27;) <span class="keyword">do</span> <span class="built_in">set</span> cols=<span class="variable">%%c</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 局部环境设置打印的符号和数量，并传递到全局环境draw_line变量中</span></span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="built_in">set</span> &quot;char==&quot;</span><br><span class="line"><span class="built_in">set</span> /a &quot;count=<span class="variable">%cols%</span>&quot;</span><br><span class="line"><span class="built_in">set</span> &quot;line=&quot;</span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="variable">%count%</span>) <span class="keyword">do</span> <span class="built_in">set</span> &quot;line=<span class="variable">!line!</span><span class="variable">%char%</span>&quot;</span><br><span class="line"><span class="built_in">endlocal</span> &amp; <span class="built_in">set</span> &quot;draw_line=<span class="variable">%line%</span>&quot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%draw_line%</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 检测权限：根据系统版本尝试访问系统文件路径</span></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%PROCESSOR_ARCHITECTURE%</span>&quot; <span class="keyword">equ</span> &quot;amd64&quot; (</span><br><span class="line">    &quot;<span class="variable">%SYSTEMROOT%</span>\SysWOW64\<span class="built_in">cacls</span>.exe&quot; &quot;<span class="variable">%SYSTEMROOT%</span>\SysWOW64\config\system&quot; &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    &quot;<span class="variable">%SYSTEMROOT%</span>\system32\<span class="built_in">cacls</span>.exe&quot; &quot;<span class="variable">%SYSTEMROOT%</span>\system32\config\system&quot; &gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 根据权限情况跳转标签</span></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%errorlevel%</span>&quot; <span class="keyword">neq</span> &quot;<span class="number">0</span>&quot; (</span><br><span class="line">    <span class="built_in">echo</span> 当前检测无管理员权限。正在请求管理员权限...</span><br><span class="line">    <span class="built_in">echo</span>.</span><br><span class="line">    <span class="keyword">goto</span> uac_prompt</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="keyword">goto</span> got_admin</span><br><span class="line">)</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 获取管理员权限</span></span><br><span class="line">:uac_prompt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">Set</span> UAC = CreateObject^(&quot;Shell.Application&quot;^) &gt; &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot;</span><br><span class="line"><span class="built_in">set</span> params= %*</span><br><span class="line"><span class="built_in">echo</span> UAC.ShellExecute &quot;<span class="built_in">cmd</span>.exe&quot;, &quot;/c &quot;&quot;%~<span class="number">0</span>&quot;&quot; <span class="variable">%params:&quot;=&quot;&quot;%</span>&quot;, &quot;&quot;, &quot;runas&quot;, <span class="number">1</span> &gt;&gt; &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot;</span><br><span class="line">&quot;<span class="variable">%temp%</span>\getadmin.vbs&quot;</span><br><span class="line"><span class="built_in">del</span> &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot;</span><br><span class="line"><span class="keyword">exit</span> /b</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM &quot;已获取管理员权限，存储当前目录并切换到脚本程序目录&quot;</span></span><br><span class="line">:got_admin</span><br><span class="line"><span class="built_in">pushd</span> &quot;<span class="variable">%cd%</span>&quot;</span><br><span class="line"><span class="built_in">cd</span> /d &quot;%~dp0&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="方式二：使用fsutil-dirty-query检测权限">1.1.2 &nbsp&nbsp<a href="#方式二：使用fsutil-dirty-query检测权限" class="headerlink" title="方式二：使用fsutil dirty query检测权限"></a>方式二：使用fsutil dirty query检测权限</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">set</span> &quot;params=%*&quot;</span><br><span class="line"><span class="built_in">cd</span> /d &quot;%~dp0&quot; &amp;&amp; ( <span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot; <span class="built_in">del</span> &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot; ) &amp;&amp;  <span class="variable">%systemdrive%</span> <span class="number">1</span>&gt;<span class="built_in">nul</span> <span class="number">2</span>&gt;<span class="built_in">nul</span> || (  <span class="built_in">echo</span> <span class="built_in">Set</span> UAC = CreateObject^(&quot;Shell.Application&quot;^) : UAC.ShellExecute &quot;<span class="built_in">cmd</span>.exe&quot;, &quot;/c <span class="built_in">cd</span> &quot;&quot;%~sdp0&quot;&quot; &amp;&amp; %~s0 <span class="variable">%params%</span>&quot;, &quot;&quot;, &quot;runas&quot;, <span class="number">1</span> &gt;&gt; &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot; &amp;&amp; &quot;<span class="variable">%temp%</span>\getadmin.vbs&quot; &amp;&amp; <span class="keyword">exit</span> /B )</span><br><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">title</span> Install latest office &amp; <span class="built_in">color</span> <span class="number">70</span></span><br><span class="line">@<span class="built_in">chcp</span> <span class="number">65001</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">cd</span> /d %~dp0</span><br></pre></td></tr></table></figure><h2 id="提权并传递参数">1.2 &nbsp&nbsp<a href="#提权并传递参数" class="headerlink" title="提权并传递参数"></a>提权并传递参数</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@REM 提权之前先保存当前的命令行参数</span></span><br><span class="line"><span class="comment">@REM 保存命令行参数到txt文件</span></span><br><span class="line"><span class="built_in">set</span> commandline_argument=%*</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%commandline_argument%</span> &gt; &quot;__temp__argument.txt&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 提权代码《检测并获取管理员权限》</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">@REM 重新读取参数</span></span><br><span class="line"><span class="comment">@REM 读取txt文件中的首个参数</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">1</span>&quot; <span class="variable">%%c</span> <span class="keyword">in</span> (__temp__argument.txt) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> get_argument=<span class="variable">%%c</span></span><br><span class="line">    <span class="keyword">goto</span> activate</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="判断网络连通状态执行不同命令">1.3 &nbsp&nbsp<a href="#判断网络连通状态执行不同命令" class="headerlink" title="判断网络连通状态执行不同命令"></a>判断网络连通状态执行不同命令</h2><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com -n <span class="number">1</span> | <span class="built_in">find</span> &quot;TTL&quot; &gt;<span class="built_in">nul</span> &amp;&amp; <span class="keyword">goto</span> network_well || <span class="keyword">goto</span> network_bad</span><br></pre></td></tr></table></figure><h1 id="语法笔记">2 &nbsp&nbsp<a href="#语法笔记" class="headerlink" title="语法笔记"></a>语法笔记</h1><h1 id="参考文献">3 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] How to request Administrator access inside a batch file[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/1894967/how%E2%80%91to%E2%80%91request%E2%80%91administrator%E2%80%91access%E2%80%91inside%E2%80%91a%E2%80%91batch%E2%80%91file">https://stackoverflow.com/questions/1894967/how‑to‑request‑administrator‑access‑inside‑a‑batch‑file</a>.<br>[2] How to write a batch file can run parameters as command with administrative privi‑leges?[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/38364617/how%E2%80%91to%E2%80%91write%E2%80%91a%E2%80%91batch%E2%80%91file%E2%80%91can%E2%80%91run%E2%80%91parameters%E2%80%91as%E2%80%91command%E2%80%91with%E2%80%91administrative%E2%80%91priv">https://stackoverflow.com/questions/38364617/how‑to‑write‑a‑batch‑file‑can‑run‑parameters‑as‑command‑with‑administrative‑priv</a>.<br>[3] 批处理通过 ping 判断网络[EB&#x2F;OL]. <a href="https://www.52pojie.cn/thread-1021861-1-1.html">https://www.52pojie.cn/thread-1021861-1-1.html</a>.<br>[4] 批处理 ping命令判断是否可以连接到一个网站[EB&#x2F;OL]. <a href="https://lanlan2017.github.io/blog/318f3e6b/">https://lanlan2017.github.io/blog/318f3e6b/</a>.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;用法示例&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#用法示例&quot; class=&quot;headerlink&quot; title=&quot;用法示例&quot;&gt;&lt;/a&gt;用法示例&lt;/h1&gt;&lt;h2 id=&quot;检测并获取管理员权限&quot;&gt;1.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#检测并获取管理员权限&quot; class=&quot;headerlink&quot; title=&quot;检测并获取管理员权限&quot;&gt;&lt;/a&gt;检测并获取管理员权限&lt;/h2&gt;&lt;h3 id=&quot;方式一：使用cacls工具检测权限&quot;&gt;1.1.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#方式一：使用cacls工具检测权限&quot; class=&quot;headerlink&quot; title=&quot;方式一：使用cacls工具检测权限&quot;&gt;&lt;/a&gt;方式一：使用cacls工具检测权限&lt;/h3&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;chcp&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65001&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; off &amp;amp; &lt;span class=&quot;built_in&quot;&gt;title&lt;/span&gt; 自动激活系统 &amp;amp; &lt;span class=&quot;built_in&quot;&gt;color&lt;/span&gt; F0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /d &amp;quot;%~dp0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM 查询当前终端窗口的列数大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /f &amp;quot;tokens=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; delims=: &amp;quot; &lt;span class=&quot;variable&quot;&gt;%%c&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&amp;#x27;&lt;span class=&quot;built_in&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;con&lt;/span&gt; ^| &lt;span class=&quot;built_in&quot;&gt;findstr&lt;/span&gt; Columns&amp;#x27;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; cols=&lt;span class=&quot;variable&quot;&gt;%%c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM 局部环境设置打印的符号和数量，并传递到全局环境draw_line变量中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;setlocal&lt;/span&gt; enabledelayedexpansion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &amp;quot;char==&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; /a &amp;quot;count=&lt;span class=&quot;variable&quot;&gt;%cols%&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &amp;quot;line=&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; /l &lt;span class=&quot;variable&quot;&gt;%%i&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;variable&quot;&gt;%count%&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &amp;quot;line=&lt;span class=&quot;variable&quot;&gt;!line!&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;%char%&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;endlocal&lt;/span&gt; &amp;amp; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; &amp;quot;draw_line=&lt;span class=&quot;variable&quot;&gt;%line%&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;%draw_line%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM 检测权限：根据系统版本尝试访问系统文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%PROCESSOR_ARCHITECTURE%&lt;/span&gt;&amp;quot; &lt;span class=&quot;keyword&quot;&gt;equ&lt;/span&gt; &amp;quot;amd64&amp;quot; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;&lt;span class=&quot;variable&quot;&gt;%SYSTEMROOT%&lt;/span&gt;&#92;SysWOW64&#92;&lt;span class=&quot;built_in&quot;&gt;cacls&lt;/span&gt;.exe&amp;quot; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%SYSTEMROOT%&lt;/span&gt;&#92;SysWOW64&#92;config&#92;system&amp;quot; &amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;&lt;span class=&quot;variable&quot;&gt;%SYSTEMROOT%&lt;/span&gt;&#92;system32&#92;&lt;span class=&quot;built_in&quot;&gt;cacls&lt;/span&gt;.exe&amp;quot; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%SYSTEMROOT%&lt;/span&gt;&#92;system32&#92;config&#92;system&amp;quot; &amp;gt;&lt;span class=&quot;built_in&quot;&gt;nul&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;&amp;amp;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM 根据权限情况跳转标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%errorlevel%&lt;/span&gt;&amp;quot; &lt;span class=&quot;keyword&quot;&gt;neq&lt;/span&gt; &amp;quot;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;quot; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 当前检测无管理员权限。正在请求管理员权限...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; uac_prompt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; got_admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM 获取管理员权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:uac_prompt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt; UAC = CreateObject^(&amp;quot;Shell.Application&amp;quot;^) &amp;gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%temp%&lt;/span&gt;&#92;getadmin.vbs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; params= %*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; UAC.ShellExecute &amp;quot;&lt;span class=&quot;built_in&quot;&gt;cmd&lt;/span&gt;.exe&amp;quot;, &amp;quot;/c &amp;quot;&amp;quot;%~&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;quot;&amp;quot; &lt;span class=&quot;variable&quot;&gt;%params:&amp;quot;=&amp;quot;&amp;quot;%&lt;/span&gt;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;runas&amp;quot;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;gt;&amp;gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%temp%&lt;/span&gt;&#92;getadmin.vbs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&lt;span class=&quot;variable&quot;&gt;%temp%&lt;/span&gt;&#92;getadmin.vbs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%temp%&lt;/span&gt;&#92;getadmin.vbs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt; /b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;@REM &amp;quot;已获取管理员权限，存储当前目录并切换到脚本程序目录&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:got_admin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;pushd&lt;/span&gt; &amp;quot;&lt;span class=&quot;variable&quot;&gt;%cd%&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /d &amp;quot;%~dp0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="终端" scheme="https://mister-kin.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
    <category term="bat" scheme="https://mister-kin.github.io/tags/bat/"/>
    
    <category term="cmd" scheme="https://mister-kin.github.io/tags/cmd/"/>
    
    <category term="语法" scheme="https://mister-kin.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="windows" scheme="https://mister-kin.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Git总结笔记</title>
    <link href="https://mister-kin.github.io/code/git/"/>
    <id>https://mister-kin.github.io/code/git/</id>
    <published>2023-07-18T06:49:53.000Z</published>
    <updated>2023-09-18T00:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux和windows之间的换行符">1 &nbsp&nbsp<a href="#linux和windows之间的换行符" class="headerlink" title="linux和windows之间的换行符"></a>linux和windows之间的换行符</h1><p>windows中的换行符（dos）是\r\n，而linux中的换行符（unix）是\n。若不转换，git可能会视作为被更改的文件，从而造成大量无意义的commit。此外，windows中bat脚本文件要求换行符为\r\n，否则cmd解释器无法正确解析，导致无法正确执行脚本。</p><h2 id="单文件转换">1.1 &nbsp&nbsp<a href="#单文件转换" class="headerlink" title="单文件转换"></a>单文件转换</h2><ul><li>\r\n转\n：<code>dos2unix test.c</code></li><li>\n转\r\n：<code>unix2dos test.c</code></li></ul><h2 id="批量转换">1.2 &nbsp&nbsp<a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h2><ul><li>\r\n转\n：<code>find . -type f -exec dos2unix &#123;&#125; \;</code></li><li>\n转\r\n：<code>find . -type f -exec unix2dos &#123;&#125; \;</code></li></ul><p>find .: Find anything in this directory, including its subdirectories, and anything in those subdirectories as well (recursion)<br>-type f: Only return &#39;regular file&#39; names. Exclude folder names from the results.<br>-exec: Execute the following command for every result. Everything beyond this point should be treated as part of that command until the ; character is found.<br>dos2unix: dos2unix will be executed with the following options...<br>-k: Keep the date stamp of the output file the same as the input file<br>-s: Skip binary files (images, archives, etc.). This option is included by default, but I use it anyway in case that default were different on some systems (e.g. OS X v. Debian v. CentOS v. Ubuntu v. ...).<br>-o: Write the changes directly to the file, rather than creating a new file with the data in the new format.<br>{}: This tells find to insert the filename it has found as a parameter of the dos2unix call.<br>&#39;;&#39;: Tell find that the params for dos2unix have ended. Anything beyond this point will again be treated as a parameter of find. 反斜杠\是用于转移分号;<br>&#39;{}&#39; is a placeholder which indicates where in the command you want the filename(s) to be inserted, and &#39;+&#39; terminates the said command. You can also run dos2unix once for each filename (by changing &#39;+&#39; with &#39;;&#39;), but since dos2unix accepts an arbitrary number of input arguments, it’s better to use it (as it avoids spawning many processes).</p><h1 id="克隆远程仓库中的指定文件或者文件夹">2 &nbsp&nbsp<a href="#克隆远程仓库中的指定文件或者文件夹" class="headerlink" title="克隆远程仓库中的指定文件或者文件夹"></a>克隆远程仓库中的指定文件或者文件夹</h1><p>以克隆blender手册翻译的简中为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> locale</span><br><span class="line">$ <span class="built_in">cd</span> locale</span><br><span class="line"></span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> D:/git/blender-manual/locale/.git/</span><br><span class="line"></span><br><span class="line">$ git remote add -f origin https://projects.blender.org/blender/blender-manual-translations.git</span><br><span class="line">Updating origin</span><br><span class="line">remote: Enumerating objects: 420552, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (420552/420552), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (138226/138226), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 420552 (delta 268033), reused 420520 (delta 268009), pack-reused 0</span><br><span class="line">Receiving objects: 100% (420552/420552), 834.07 MiB | 274.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (268033/268033), <span class="keyword">done</span>.</span><br><span class="line">From https://projects.blender.org/blender/blender-manual-translations</span><br><span class="line"> * [new branch]            main       -&gt; origin/main</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;zh-hans&quot;</span> &gt;&gt; .git/info/sparse-checkout <span class="comment"># sparse-checkout文件里写入要拉取的文件或者文件夹</span></span><br><span class="line">$ git config core.sparsecheckout <span class="literal">true</span> <span class="comment"># 开启稀疏检出</span></span><br><span class="line">$ git pull origin main <span class="comment"># 最后执行拉取获得特定文件或者文件夹</span></span><br></pre></td></tr></table></figure><h1 id="Git-LFS大文件管理">3 &nbsp&nbsp<a href="#Git-LFS大文件管理" class="headerlink" title="Git LFS大文件管理"></a>Git LFS大文件管理</h1><p>windows上使用Git for windows客户端程序时，LFS启用命令：<code>git lfs install</code></p><p>添加LFS需要管理的大文件：<code>git lfs track test.txt</code></p><h1 id="添加子仓库">4 &nbsp&nbsp<a href="#添加子仓库" class="headerlink" title="添加子仓库"></a>添加子仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/Mister-Kin/actions.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动如下功能，更新主仓，同时会执行submodule update</span></span><br><span class="line">git config --global submodule.recurse <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="github从上游拉取未并入主干的拉取请求-pull-request">5 &nbsp&nbsp<a href="#github从上游拉取未并入主干的拉取请求-pull-request" class="headerlink" title="github从上游拉取未并入主干的拉取请求(pull request)"></a>github从上游拉取未并入主干的拉取请求(pull request)</h1><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加远程上游，仓库地址填写需要拉取的上游</span><br><span class="line">git remote add upstream https://github.com/USER/repository.git</span><br><span class="line"># ID 填pull-request id，BRANCHNAME填准备拉取到本地的某个分支名</span><br><span class="line">git pull upstream pull/ID/head:BRANCHNAME</span><br><span class="line"># 切换到分支目录</span><br><span class="line">git checkout BRANCHNAME</span><br><span class="line"># push到自己fork之后的上游</span><br><span class="line">git push -u origin BRANCHNAME</span><br></pre></td></tr></table></figure><h1 id="重命名分支并推送到远程仓库">6 &nbsp&nbsp<a href="#重命名分支并推送到远程仓库" class="headerlink" title="重命名分支并推送到远程仓库"></a>重命名分支并推送到远程仓库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rename the local branch to the new name</span></span><br><span class="line">git branch -m &lt;old_name&gt; &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete the old branch on remote - where &lt;remote&gt; is, for example, origin</span></span><br><span class="line">git push &lt;remote&gt; --delete &lt;old_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Or shorter way to delete remote branch [:]</span></span><br><span class="line">git push &lt;remote&gt; :&lt;old_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除失败时，请更改默认分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Prevent git from using the old name when pushing in the next step.</span></span><br><span class="line"><span class="comment"># Otherwise, git will use the old upstream name instead of &lt;new_name&gt;.</span></span><br><span class="line">git branch --unset-upstream &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push the new branch to remote</span></span><br><span class="line">git push &lt;remote&gt; &lt;new_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset the upstream branch for the new_name local branch</span></span><br><span class="line">git push &lt;remote&gt; -u &lt;new_name&gt;</span><br></pre></td></tr></table></figure><h1 id="参考文献">7 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] How do I rename both a Git local and remote branch name?[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/30590083/how%E2%80%91do%E2%80%91i%E2%80%91rename%E2%80%91both%E2%80%91a%E2%80%91git%E2%80%91local%E2%80%91and%E2%80%91remote%E2%80%91branch%E2%80%91name">https://stackoverflow.com/questions/30590083/how‑do‑i‑rename‑both‑a‑git‑local‑and‑remote‑branch‑name</a>.<br>[2] Git 中 submodule 的使用[EB&#x2F;OL]. <a href="https://zhuanlan.zhihu.com/p/614114699">https://zhuanlan.zhihu.com/p/614114699</a>.<br>[3] Why is git submodule not updated automatically on git checkout?[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/1899792/why%E2%80%91is%E2%80%91git%E2%80%91submodule%E2%80%91not%E2%80%91updated%E2%80%91automatically%E2%80%91on%E2%80%91git%E2%80%91checkout">https://stackoverflow.com/questions/1899792/why‑is‑git‑submodule‑not‑updated‑automatically‑on‑git‑checkout</a>.<br>[4] git lfs安装及使用方法[EB&#x2F;OL]. <a href="https://blog.csdn.net/michaelshare/article/details/83183806">https://blog.csdn.net/michaelshare/article/details/83183806</a>.<br>[5] Git克隆远程仓库中的指定文件或者文件夹[EB&#x2F;OL]. <a href="https://blog.csdn.net/fsfsdgsdg/article/details/127177631">https://blog.csdn.net/fsfsdgsdg/article/details/127177631</a>.<br>[6] How to run dos2unix on all files with all extensions in a directory and its sun-directories?[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/67254229/how-to-run-dos2unix-on-all-files-with-all-extensions-in-a-directory-and-its-sun">https://stackoverflow.com/questions/67254229/how-to-run-dos2unix-on-all-files-with-all-extensions-in-a-directory-and-its-sun</a>.<br>[7] How to pull a pull request from upstream in github[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/54033842/how-to-pull-a-pull-request-from-upstream-in-github">https://stackoverflow.com/questions/54033842/how-to-pull-a-pull-request-from-upstream-in-github</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;linux和windows之间的换行符&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#linux和windows之间的换行符&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="git" scheme="https://mister-kin.github.io/tags/git/"/>
    
    <category term="github" scheme="https://mister-kin.github.io/tags/github/"/>
    
    <category term="代码管理" scheme="https://mister-kin.github.io/tags/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    
    <category term="版本控制" scheme="https://mister-kin.github.io/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Bash总结笔记</title>
    <link href="https://mister-kin.github.io/code/bash/"/>
    <id>https://mister-kin.github.io/code/bash/</id>
    <published>2023-07-18T06:48:46.000Z</published>
    <updated>2023-07-18T08:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bash-的简介">1 &nbsp&nbsp<a href="#Bash-的简介" class="headerlink" title="Bash 的简介"></a>Bash 的简介</h1><p>Shell是一种特殊的交互式工具，它为用户提供了启动程序、管理文件系统中的文件以及运行在Linux系统上的进程的途径。通过命令行提示符<code>$</code>，它允许用户输入文本命令，然后解释命令，并在内核中执行。</p><p>Bash是GNU项目的shell，即Bourne Again SHell。这是一个由Bourne shell（sh）发展而来的shell，并且兼容sh，包含不少korn shell（ksh）和c shell（csh）的优点。大部分Linux发行版都预装了bash，并且大多数sh脚本（由多个shell命令组成的文件）无需修改即可通过bash运行。</p><h1 id="shell提示符">2 &nbsp&nbsp<a href="#shell提示符" class="headerlink" title="shell提示符"></a>shell提示符</h1><p>shell命令行界面（CLI）</p><h1 id="bash的配置">3 &nbsp&nbsp<a href="#bash的配置" class="headerlink" title="bash的配置"></a>bash的配置</h1><p>source ~&#x2F;.bashrc<br>source ~&#x2F;.profile<br>echo &#39;export APP&#x3D;&#x2F;opt&#x2F;tinyos-2.x&#x2F;apps&#39; &gt;&gt; ~&#x2F;.bashrc</p><h1 id="参数表达式">4 &nbsp&nbsp<a href="#参数表达式" class="headerlink" title="参数表达式"></a><a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html">参数表达式</a></h1><h2 id="前缀和后缀的获取">4.1 &nbsp&nbsp<a href="#前缀和后缀的获取" class="headerlink" title="前缀和后缀的获取"></a>前缀和后缀的获取</h2><p><code>$&#123;file%.*&#125;</code>：移除最后一个点之后的内容<br><code>$&#123;file%%.*&#125;</code>：移除第一个点之后的内容<br><code>$&#123;file#*.&#125;</code>：移除第一个点之前的内容<br><code>$&#123;file##*.&#125;</code>：移除最后一个点之前的内容</p><h1 id="test">5 &nbsp&nbsp<a href="#test" class="headerlink" title="test"></a>test</h1><p>test可以与&amp;&amp;组成一个条件判断，无需用if命令。</p><h1 id="case">6 &nbsp&nbsp<a href="#case" class="headerlink" title="case"></a>case</h1><p>case命令，无法使用test命令。<br>case不能用正则表达，只用<a href="http://www.gnu.org/software/bash/manual/bashref.html#Pattern-Matching">样式匹配</a>。</p><h1 id="参考文献">7 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] BLUM R, BRESNAHAN C. Linux 命令行与 shell 脚本编程大全[M]. 门佳, 武海峰, 译. 3 版. 北京: 人民邮电出版社, 2016.<br>[2] GNU Bash[EB&#x2F;OL]. <a href="https://www.gnu.org/software/bash/">https://www.gnu.org/software/bash/</a>.<br>[3] Test variable in a bash case statement[EB&#x2F;OL]. <a href="https://unix.stackexchange.com/questions/205084/test%E2%80%91variable%E2%80%91in%E2%80%91a%E2%80%91bash%E2%80%91case%E2%80%91statement">https://unix.stackexchange.com/questions/205084/test‑variable‑in‑a‑bash‑case‑statement</a>.<br>[4] Regular expressions in a Bash case statement[EB&#x2F;OL]. <a href="https://stackoverflow.com/questions/9631335/regular%E2%80%91expressions%E2%80%91in%E2%80%91a%E2%80%91bash%E2%80%91case%E2%80%91statement">https://stackoverflow.com/questions/9631335/regular‑expressions‑in‑a‑bash‑case‑statement</a>.<br>[5] Adding suffix to filename during for loop in bash[EB&#x2F;OL]. <a href="https://unix.stackexchange.com/questions/600051/adding%E2%80%91suffix%E2%80%91to%E2%80%91filename%E2%80%91during%E2%80%91for%E2%80%91loop%E2%80%91in%E2%80%91bash">https://unix.stackexchange.com/questions/600051/adding‑suffix‑to‑filename‑during‑for‑loop‑in‑bash</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Bash-的简介&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#Bash-的简介&quot; class=&quot;headerlink&quot; title=&quot;Bash 的简介&quot;&gt;&lt;/a&gt;Bash</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="bash" scheme="https://mister-kin.github.io/tags/bash/"/>
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="shell" scheme="https://mister-kin.github.io/tags/shell/"/>
    
    <category term="系统" scheme="https://mister-kin.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="linux" scheme="https://mister-kin.github.io/tags/linux/"/>
    
    <category term="终端" scheme="https://mister-kin.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX语法总结笔记</title>
    <link href="https://mister-kin.github.io/code/latex/"/>
    <id>https://mister-kin.github.io/code/latex/</id>
    <published>2023-07-18T06:40:16.000Z</published>
    <updated>2023-09-09T12:35:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档元素">1 &nbsp&nbsp<a href="#文档元素" class="headerlink" title="文档元素"></a>文档元素</h1><h2 id="图片">1.1 &nbsp&nbsp<a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="自适应缩放大小">1.1.1 &nbsp&nbsp<a href="#自适应缩放大小" class="headerlink" title="自适应缩放大小"></a>自适应缩放大小</h3><p>使用width参数缩放到0.5倍的文本宽度，scale参数就是图片相对于原尺寸缩放，比较难以控制。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h!]</span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\linewidth</span>]&#123;figure&#125;</span><br><span class="line">    <span class="keyword">\caption</span>&#123;锚点文字&#125;</span><br><span class="line">    <span class="keyword">\label</span>&#123;图片注解&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure><h1 id="宏包">2 &nbsp&nbsp<a href="#宏包" class="headerlink" title="宏包"></a>宏包</h1><h2 id="moderncv">2.1 &nbsp&nbsp<a href="#moderncv" class="headerlink" title="moderncv"></a>moderncv</h2><p>moderncv的宏包是分文件编写的，具体语法参照texmf-dist\tex\latex\moderncv中的各个模块。</p><h1 id="常见问题">3 &nbsp&nbsp<a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="reference-bib中参考文献中的title中写法">3.1 &nbsp&nbsp<a href="#reference-bib中参考文献中的title中写法" class="headerlink" title="reference.bib中参考文献中的title中写法"></a>reference.bib中参考文献中的title中写法</h2><p>和LaTeX语法一样，如果有特殊符号，一样要使用反斜杠标注，例如_要写成_，不然编译会导致所有参考文献没有输出。</p><h1 id="参考文献">4 &nbsp&nbsp<a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] 【latex】LaTeX调整图片大小的方法；自动调整合适的大小[EB&#x2F;OL]. <a href="https://blog.csdn.net/weixin_39589455/article/details/128533896">https://blog.csdn.net/weixin_39589455/article/details/128533896</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;文档元素&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#文档元素&quot; class=&quot;headerlink&quot; title=&quot;文档元素&quot;&gt;&lt;/a&gt;文档元素&lt;/h1&gt;&lt;h2 id=&quot;图片&quot;&gt;1.1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#图片&quot;</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="语法" scheme="https://mister-kin.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="LaTeX" scheme="https://mister-kin.github.io/tags/LaTeX/"/>
    
    <category term="TeX" scheme="https://mister-kin.github.io/tags/TeX/"/>
    
    <category term="编译" scheme="https://mister-kin.github.io/tags/%E7%BC%96%E8%AF%91/"/>
    
    <category term="排版" scheme="https://mister-kin.github.io/tags/%E6%8E%92%E7%89%88/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法总结笔记</title>
    <link href="https://mister-kin.github.io/code/markdown/"/>
    <id>https://mister-kin.github.io/code/markdown/</id>
    <published>2023-07-18T06:32:10.000Z</published>
    <updated>2023-07-18T08:11:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题">1 &nbsp&nbsp<a href="#标题" class="headerlink" title="标题"></a>标题</h1><ul><li>一级标题：<code># 标题</code></li><li>二级标题：<code>## 标题</code></li><li>三级标题：<code>### 标题</code></li><li>四级标题：<code>#### 标题</code></li><li>五级标题：<code>##### 标题</code></li><li>六级标题：<code>###### 标题</code></li></ul><h1 id="代码块">2 &nbsp&nbsp<a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="行内代码">2.1 &nbsp&nbsp<a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>反引号包裹住代码内容：<code>`代码内容`</code></p><h2 id="多行代码（围栏代码块）">2.2 &nbsp&nbsp<a href="#多行代码（围栏代码块）" class="headerlink" title="多行代码（围栏代码块）"></a>多行代码（围栏代码块）</h2><p>在代码内容前后使用三个反引号包裹住。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```语言关键字</span></span><br><span class="line"><span class="code">代码内容</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>代码块支持语法高亮的语言关键字：</p><table><thead><tr><th>language</th><th>key</th></tr></thead><tbody><tr><td>1C</td><td>1c</td></tr><tr><td>ActionScript</td><td>actionscript</td></tr><tr><td>Apache</td><td>apache</td></tr><tr><td>AppleScript</td><td>applescript</td></tr><tr><td>AsciiDoc</td><td>asciidoc</td></tr><tr><td>AspectJ</td><td>asciidoc</td></tr><tr><td>AutoHotkey</td><td>autohotkey</td></tr><tr><td>AVR Assembler</td><td>avrasm</td></tr><tr><td>Axapta</td><td>axapta</td></tr><tr><td>Bash</td><td>bash</td></tr><tr><td>BrainFuck</td><td>brainfuck</td></tr><tr><td>Cap’n Proto</td><td>capnproto</td></tr><tr><td>Clojure REPL</td><td>clojure</td></tr><tr><td>Clojure</td><td>clojure</td></tr><tr><td>CMake</td><td>cmake</td></tr><tr><td>CoffeeScript</td><td>coffeescript</td></tr><tr><td>C++</td><td>cpp</td></tr><tr><td>C#</td><td>cs</td></tr><tr><td>CSS</td><td>css</td></tr><tr><td>D</td><td>d</td></tr><tr><td>Dart</td><td>d</td></tr><tr><td>Delphi</td><td>delphi</td></tr><tr><td>Diff</td><td>diff</td></tr><tr><td>Django</td><td>django</td></tr><tr><td>DOS.bat</td><td>dos</td></tr><tr><td>Dust</td><td>dust</td></tr><tr><td>Elixir</td><td>elixir</td></tr><tr><td>ERB(Embedded Ruby)</td><td>erb</td></tr><tr><td>Erlang REPL</td><td>erlang-repl</td></tr><tr><td>Erlang</td><td>erlang</td></tr><tr><td>FIX</td><td>fix</td></tr><tr><td>F#</td><td>fsharp</td></tr><tr><td>G-code(ISO 6983)</td><td>gcode</td></tr><tr><td>Gherkin</td><td>gherkin</td></tr><tr><td>GLSL</td><td>glsl</td></tr><tr><td>Go</td><td>go</td></tr><tr><td>Gradle</td><td>gradle</td></tr><tr><td>Groovy</td><td>groovy</td></tr><tr><td>Haml</td><td>haml</td></tr><tr><td>Handlebars</td><td>handlebars</td></tr><tr><td>Haskell</td><td>haskell</td></tr><tr><td>Haxe</td><td>haxe</td></tr><tr><td>HTML</td><td>html</td></tr><tr><td>HTTP</td><td>http</td></tr><tr><td>Ini file</td><td>ini</td></tr><tr><td>Java</td><td>java</td></tr><tr><td>JavaScript</td><td>javascript</td></tr><tr><td>JSON</td><td>json</td></tr><tr><td>Lasso</td><td>lasso</td></tr><tr><td>Less</td><td>less</td></tr><tr><td>Lisp</td><td>lisp</td></tr><tr><td>LiveCode</td><td>livecodeserver</td></tr><tr><td>LiveScript</td><td>livescript</td></tr><tr><td>Lua</td><td>lua</td></tr><tr><td>Makefile</td><td>makefile</td></tr><tr><td>Markdown</td><td>markdown</td></tr><tr><td>Mathematica</td><td>mathematica</td></tr><tr><td>Matlab</td><td>matlab</td></tr><tr><td>MEL (Maya Embedded Language)</td><td>mel</td></tr><tr><td>Mercury</td><td>mercury</td></tr><tr><td>Mizar</td><td>mizar</td></tr><tr><td>Monkey</td><td>monkey</td></tr><tr><td>Nginx</td><td>nginx</td></tr><tr><td>Nimrod</td><td>nimrod</td></tr><tr><td>Nix</td><td>nix</td></tr><tr><td>NSIS</td><td>nsis</td></tr><tr><td>Objective C</td><td>objectivec</td></tr><tr><td>OCaml</td><td>ocaml</td></tr><tr><td>Oxygene</td><td>oxygene</td></tr><tr><td>Parser 3</td><td>parser3</td></tr><tr><td>Perl</td><td>perl</td></tr><tr><td>PHP</td><td>php</td></tr><tr><td>PowerShell</td><td>powershell</td></tr><tr><td>Processing</td><td>processing</td></tr><tr><td>Python’s profiler output</td><td>profile</td></tr><tr><td>Protocol Buffers</td><td>protobuf</td></tr><tr><td>Puppet</td><td>puppet</td></tr><tr><td>Python</td><td>python</td></tr><tr><td>Q</td><td>q</td></tr><tr><td>R</td><td>r</td></tr><tr><td>RenderMan RIB</td><td>rib</td></tr><tr><td>Roboconf</td><td>roboconf</td></tr><tr><td>RenderMan RSL</td><td>rsl</td></tr><tr><td>Ruby</td><td>ruby</td></tr><tr><td>Oracle Rules Language</td><td>ruleslanguage</td></tr><tr><td>Rust</td><td>rust</td></tr><tr><td>Scala</td><td>scala</td></tr><tr><td>Scheme</td><td>scheme</td></tr><tr><td>Scilab</td><td>scilab</td></tr><tr><td>SCSS</td><td>scss</td></tr><tr><td>Smali</td><td>smali</td></tr><tr><td>SmallTalk</td><td>smalltalk</td></tr><tr><td>SML</td><td>sml</td></tr><tr><td>SQL</td><td>sql</td></tr><tr><td>Stata</td><td>stata</td></tr><tr><td>STEP Part21(ISO 10303-21)</td><td>step21</td></tr><tr><td>Stylus</td><td>stylus</td></tr><tr><td>Swift</td><td>swift</td></tr><tr><td>Tcl</td><td>tcl</td></tr><tr><td>Tex</td><td>tex</td></tr><tr><td>text</td><td>text&#x2F;plain</td></tr><tr><td>Thrift</td><td>thrift</td></tr><tr><td>Twig</td><td>twig</td></tr><tr><td>TypeScript</td><td>typescript</td></tr><tr><td>Vala</td><td>vala</td></tr><tr><td>VB.NET</td><td>vbnet</td></tr><tr><td>VBScript in HTML</td><td>vbscript-html</td></tr><tr><td>VBScript</td><td>vbscript</td></tr><tr><td>Verilog</td><td>verilog</td></tr><tr><td>VHDL</td><td>vhdl</td></tr><tr><td>Vim Script</td><td>vim</td></tr><tr><td>Intel x86 Assembly</td><td>x86asm</td></tr><tr><td>XL</td><td>xl</td></tr><tr><td>XML</td><td>xml</td></tr><tr><td>YAML</td><td>yml</td></tr></tbody></table><h1 id="参考资料">3 &nbsp&nbsp<a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] Markdown 官方教程[EB&#x2F;OL]. <a href="https://markdown.com.cn/">https://markdown.com.cn/</a>.<br>[2] MarkDown 支持高亮的语言[EB&#x2F;OL]. <a href="https://blog.csdn.net/u012102104/article/details/78950290">https://blog.csdn.net/u012102104/article/details/78950290</a>.</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;标题&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一级标题：&lt;code&gt;# 标题&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二级标题：&lt;code&gt;##</summary>
        
      
    
    
    
    <category term="code" scheme="https://mister-kin.github.io/categories/code/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="语法" scheme="https://mister-kin.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://mister-kin.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="markdown" scheme="https://mister-kin.github.io/tags/markdown/"/>
    
    <category term="写作" scheme="https://mister-kin.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Blender教程总结</title>
    <link href="https://mister-kin.github.io/software/blender/tranining/training/"/>
    <id>https://mister-kin.github.io/software/blender/tranining/training/</id>
    <published>2023-04-12T23:43:03.000Z</published>
    <updated>2023-04-13T00:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单个物体建模">1 &nbsp&nbsp<a href="#单个物体建模" class="headerlink" title="单个物体建模"></a>单个物体建模</h1><h1 id="综合场景全流程">2 &nbsp&nbsp<a href="#综合场景全流程" class="headerlink" title="综合场景全流程"></a>综合场景全流程</h1><ul><li><a href="/software/blender/tranining/cg-boost-blender28-beginner-series">Blender练习总结：《CG Boost-Blender 2.8 Beginner Series》</a>：苹果、小刀</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;单个物体建模&quot;&gt;1 &amp;nbsp&amp;nbsp&lt;a href=&quot;#单个物体建模&quot; class=&quot;headerlink&quot; title=&quot;单个物体建模&quot;&gt;&lt;/a&gt;单个物体建模&lt;/h1&gt;&lt;h1 id=&quot;综合场景全流程&quot;&gt;2 &amp;nbsp&amp;nbsp&lt;a</summary>
        
      
    
    
    
    <category term="software" scheme="https://mister-kin.github.io/categories/software/"/>
    
    <category term="blender" scheme="https://mister-kin.github.io/categories/software/blender/"/>
    
    <category term="tranining" scheme="https://mister-kin.github.io/categories/software/blender/tranining/"/>
    
    
    <category term="总结" scheme="https://mister-kin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="教程" scheme="https://mister-kin.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Blender" scheme="https://mister-kin.github.io/tags/Blender/"/>
    
  </entry>
  
</feed>
